apiVersion: v1
kind: ConfigMap
metadata:
  name: vnc-startup-scripts
  namespace: vnc-test
data:
  xvfb-fallback.sh: |
    #!/bin/bash
    # Fallback script that tries multiple Xvfb configurations
    
    echo "=== Xvfb Fallback Script ==="
    echo "Running as: $(id)"
    
    # Array of configurations to try (from most conservative to most feature-rich)
    configs=(
        # Ultra minimal - should work almost anywhere
        "-screen 0 320x240x8"
        "-screen 0 640x480x8 -ac"
        "-screen 0 800x600x8 -ac -nolisten tcp"
        "-screen 0 1024x768x16 -ac -nolisten tcp"
        "-screen 0 1024x768x16 -ac -nolisten tcp +extension GLX"
        "-screen 0 1280x1024x16 -ac -nolisten tcp +extension RANDR"
        "-screen 0 1280x1024x24 -ac -nolisten tcp -dpi 96 +extension RANDR"
    )
    
    # Ensure clean state
    rm -f /tmp/.X99-lock
    
    for i in "${!configs[@]}"; do
        echo "Attempt $((i+1)): Xvfb :99 ${configs[$i]}"
        
        # Try to start Xvfb
        Xvfb :99 ${configs[$i]} > /tmp/xvfb_attempt_$i.log 2>&1 &
        XVFB_PID=$!
        
        # Wait and check
        sleep 3
        
        if kill -0 $XVFB_PID 2>/dev/null; then
            # Process is running, test display
            export DISPLAY=:99
            if timeout 5 xdpyinfo > /tmp/xdpyinfo_$i.log 2>&1; then
                echo "SUCCESS: Xvfb started with config: ${configs[$i]}"
                echo "Display info:"
                xdpyinfo | grep -A 2 "screen #0"
                
                # Keep this one running
                echo "export DISPLAY=:99" >> /etc/profile.d/display.sh
                
                # Start the main application
                exec "$@"
            else
                echo "Display test failed for config $((i+1))"
                kill $XVFB_PID 2>/dev/null || true
            fi
        else
            echo "Xvfb failed to start with config $((i+1))"
            cat /tmp/xvfb_attempt_$i.log | tail -5
        fi
        
        # Clean up for next attempt
        pkill -f "Xvfb :99" 2>/dev/null || true
        rm -f /tmp/.X99-lock
        sleep 1
    done
    
    echo "ERROR: All Xvfb configurations failed!"
    echo "Falling back to xvfb-run..."
    exec xvfb-run -a -e /tmp/xvfb-run-error.log "$@"

  test-display.sh: |
    #!/bin/bash
    # Script to test X display functionality
    
    echo "=== X Display Test Script ==="
    echo "DISPLAY=$DISPLAY"
    echo ""
    
    # Check if display is set
    if [ -z "$DISPLAY" ]; then
        echo "ERROR: DISPLAY not set"
        exit 1
    fi
    
    # Test xdpyinfo
    echo "Testing xdpyinfo..."
    if timeout 5 xdpyinfo > /tmp/display-test.log 2>&1; then
        echo "✓ xdpyinfo succeeded"
        echo "Display details:"
        xdpyinfo | grep -E "name of display|version number|vendor string|dimensions|depth"
    else
        echo "✗ xdpyinfo failed"
        cat /tmp/display-test.log
    fi
    
    # Test creating a window
    echo ""
    echo "Testing window creation..."
    if command -v xterm >/dev/null 2>&1; then
        timeout 2 xterm -e "echo test" > /tmp/xterm-test.log 2>&1 &
        XTERM_PID=$!
        sleep 1
        if kill -0 $XTERM_PID 2>/dev/null; then
            echo "✓ Can create windows"
            kill $XTERM_PID 2>/dev/null || true
        else
            echo "✗ Window creation failed"
        fi
    else
        echo "⚠ xterm not available for window test"
    fi
    
    # Test GLX if available
    echo ""
    echo "Testing GLX..."
    if command -v glxinfo >/dev/null 2>&1; then
        if timeout 5 glxinfo > /tmp/glx-test.log 2>&1; then
            echo "✓ GLX is available"
            glxinfo | grep -E "OpenGL vendor|OpenGL renderer" || true
        else
            echo "✗ GLX test failed"
        fi
    else
        echo "⚠ glxinfo not available"
    fi
    
    echo ""
    echo "Display test completed"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: xvfb-configmap-test
  namespace: vnc-test
  labels:
    app: xvfb-configmap-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: xvfb-configmap-test
  template:
    metadata:
      labels:
        app: xvfb-configmap-test
    spec:
      initContainers:
      - name: prepare-scripts
        image: busybox
        command: ['sh', '-c']
        args:
          - |
            cp /scripts/* /app-scripts/
            chmod +x /app-scripts/*.sh
            ls -la /app-scripts/
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: app-scripts
          mountPath: /app-scripts
      containers:
      - name: xvfb-test
        image: node:18-bullseye-slim
        command: ["/app-scripts/xvfb-fallback.sh"]
        args: ["sh", "-c", "echo 'Application running with display: '$DISPLAY && sleep infinity"]
        env:
        - name: DEBIAN_FRONTEND
          value: noninteractive
        volumeMounts:
        - name: app-scripts
          mountPath: /app-scripts
        - name: tmp
          mountPath: /tmp
        lifecycle:
          preStop:
            exec:
              command: ["pkill", "-f", "Xvfb"]
        livenessProbe:
          exec:
            command: ["/app-scripts/test-display.sh"]
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        securityContext:
          runAsUser: 0  # Running as root for testing, should be changed for production
      volumes:
      - name: scripts
        configMap:
          name: vnc-startup-scripts
          defaultMode: 0755
      - name: app-scripts
        emptyDir: {}
      - name: tmp
        emptyDir:
          sizeLimit: "1Gi"