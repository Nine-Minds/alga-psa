# Test Dockerfile with improved Xvfb configuration for Kubernetes
FROM node:18-bullseye-slim

# Environment variables
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
ENV CHROME_PATH=/usr/bin/chromium
ENV DEBIAN_FRONTEND=noninteractive
ENV DISPLAY=:99
ENV NODE_OPTIONS="--max-http-header-size=26214400"

# Install dependencies with better error handling
RUN apt-get update -qq && \
    apt-get install -qq -y --no-install-recommends \
      ca-certificates \
      gnupg2 \
      apt-transport-https \
      software-properties-common \
      curl \
      procps \
      && rm -rf /var/lib/apt/lists/*

# Install X11 and VNC dependencies in a separate layer
RUN apt-get update -qq && \
    apt-get install -qq -y --no-install-recommends \
      xvfb \
      x11-utils \
      xauth \
      dbus-x11 \
      libxext6 \
      libxrender1 \
      libxtst6 \
      libxi6 \
      libxrandr2 \
      libxinerama1 \
      libxcursor1 \
      libxdamage1 \
      libxcomposite1 \
      libxfixes3 \
      fonts-liberation \
      fonts-noto-color-emoji \
      && rm -rf /var/lib/apt/lists/*

# Install VNC components
RUN apt-get update -qq && \
    apt-get install -qq -y --no-install-recommends \
      x11vnc \
      fluxbox \
      websockify \
      python3 \
      python3-numpy \
      novnc \
      net-tools \
      && rm -rf /var/lib/apt/lists/*

# Install Chromium separately to handle potential issues
RUN apt-get update -qq && \
    apt-get install -qq -y --no-install-recommends \
      chromium \
      chromium-sandbox \
      && rm -rf /var/lib/apt/lists/*

# Create non-root user with proper permissions
RUN useradd -m -u 1000 -s /bin/bash appuser && \
    mkdir -p /home/appuser/.config /home/appuser/.cache && \
    chown -R appuser:appuser /home/appuser

# Create necessary directories with proper permissions
RUN mkdir -p /tmp/.X11-unix /tmp/.ICE-unix /var/run/dbus && \
    chmod 1777 /tmp/.X11-unix /tmp/.ICE-unix && \
    chmod 755 /var/run/dbus

WORKDIR /app

# Copy test scripts
COPY --chown=appuser:appuser improved-vnc-startup.sh /app/
COPY --chown=appuser:appuser test-xvfb.sh /app/
RUN chmod +x /app/*.sh

# Create a simple test application
RUN echo '{"name":"vnc-test","version":"1.0.0","scripts":{"start":"node -e \"console.log(\'App running...\'); setInterval(() => console.log(\'Still running...\'), 30000);\""}}' > package.json

# Switch to non-root user
USER appuser

# Set working directory permissions
RUN mkdir -p /app/logs /app/tmp && \
    chmod 755 /app/logs /app/tmp

# Expose ports
EXPOSE 4000 5900 5901

# Default command
CMD ["/app/improved-vnc-startup.sh", "npm", "start"]