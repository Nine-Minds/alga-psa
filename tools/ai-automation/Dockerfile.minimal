FROM node:18-bullseye-slim

# Environment variables
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
ENV CHROME_PATH=/usr/bin/chromium
ENV DEBIAN_FRONTEND=noninteractive
ENV DISPLAY=:99
ENV NODE_OPTIONS="--max-http-header-size=26214400"
ENV CHOKIDAR_USEPOLLING=true
ENV CHOKIDAR_INTERVAL=300
# Add Xvfb environment variables for better compatibility
ENV XVFB_WHD=1280x1024x16
ENV XVFB_COLORDEPTH=16
ENV XVFB_ARGS="-ac -nolisten tcp -dpi 96 +extension RANDR"
# Force software rendering to avoid DRI driver issues
ENV LIBGL_ALWAYS_SOFTWARE=1
ENV GALLIUM_DRIVER=llvmpipe
ENV LP_NO_RAST=false
ENV LIBGL_DRI3_DISABLE=1
ENV LIBGL_ALWAYS_INDIRECT=1

# Update package list and install essential dependencies
RUN apt-get update -qq && \
    apt-get install -qq -y --no-install-recommends \
      ca-certificates \
      curl \
      gnupg2 && \
    apt-get update -qq

# Install minimal Chromium dependencies
RUN apt-get install -qq -y --no-install-recommends \
      chromium \
      chromium-sandbox \
      xvfb \
      x11vnc \
      fluxbox \
      x11-utils \
      xauth \
      procps \
      python3-minimal \
      python3-pip \
      libxcomposite1 \
      libxdamage1 \
      libxrandr2 \
      libxss1 \
      libxtst6 \
      libgtk-3-0 \
      libnss3 \
      libatk-bridge2.0-0 \
      libdrm2 \
      libxkbcommon0 \
      libgbm1 && \
    rm -rf /var/lib/apt/lists/*

# Install websockify via pip
RUN python3 -m pip install --no-cache-dir websockify==0.10.0

# Download NoVNC manually
RUN mkdir -p /usr/share/novnc && \
    curl -fsSL https://github.com/novnc/noVNC/archive/v1.3.0.tar.gz | \
    tar -xz --strip-components=1 -C /usr/share/novnc && \
    ln -s /usr/share/novnc/vnc.html /usr/share/novnc/index.html

# Create and switch to non-root user
RUN useradd -m appuser
WORKDIR /usr/src/app

# Copy package files and install dependencies
COPY --chown=appuser:appuser package*.json ./
RUN npm install

# Copy application files
COPY --chown=appuser:appuser . .

# Make startup scripts executable
RUN chmod +x vnc-startup.sh || true && \
    chmod +x vnc-startup-improved.sh || true && \
    chmod +x vnc-startup-k8s-fix.sh || true

USER appuser

# Expose VNC port
EXPOSE 4000 5900

# Use the k8s-fix startup script for maximum compatibility
CMD if [ "$VNC_ENABLED" = "true" ]; then \
      if [ -f "./vnc-startup-k8s-fix.sh" ]; then \
        echo "Using K8s-fix VNC startup script..." && \
        ./vnc-startup-k8s-fix.sh; \
      elif [ -f "./vnc-startup-improved.sh" ]; then \
        echo "Using improved VNC startup script..." && \
        ./vnc-startup-improved.sh; \
      else \
        echo "Using standard VNC startup script..." && \
        ./vnc-startup.sh; \
      fi \
    else \
      export DISPLAY=:99 && \
      Xvfb :99 -screen 0 1024x768x16 -ac > /tmp/xvfb.log 2>&1 & \
      sleep 2 && \
      npm run dev; \
    fi