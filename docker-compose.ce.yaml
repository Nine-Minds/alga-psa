services:
  server:
    extends:
      file: ./server/docker-compose.yaml
      service: server
    container_name: ${APP_NAME:-sebastian}_server_ce
    build:
      context: .
      dockerfile: Dockerfile.build
    environment:
      EDITION: community
      DB_NAME: server
      PGBOSS_DATABASE: server
      DB_NAME_SERVER: server
      DB_USER_SERVER: app_user
      DB_USER_ADMIN: ${DB_USER_ADMIN:-postgres}
      VERSION: ${VERSION}
      APP_NAME: ${APP_NAME}
      APP_ENV: ${APP_ENV:-development}
      NODE_ENV: ${APP_ENV:-development}
      HOST: ${HOST}
      VERIFY_EMAIL_ENABLED: ${VERIFY_EMAIL_ENABLED:-false}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      DB_TYPE: ${DB_TYPE:-postgres}
      DB_HOST: ${PGBOUNCER_HOST:-pgbouncer}
      DB_PORT: ${PGBOUNCER_PORT:-6432}
      REQUIRE_HOCUSPOCUS: ${REQUIRE_HOCUSPOCUS:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_IS_FORMAT_JSON: ${LOG_IS_FORMAT_JSON:-false}
      LOG_IS_FULL_DETAILS: ${LOG_IS_FULL_DETAILS:-false}
      EMAIL_ENABLE: ${EMAIL_ENABLE:-false}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@example.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USERNAME: ${EMAIL_USERNAME:-noreply@example.com}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SESSION_EXPIRES: ${NEXTAUTH_SESSION_EXPIRES:-86400}
      # Secret provider configuration (CE edition)
      SECRET_READ_CHAIN: ${SECRET_READ_CHAIN:-env,filesystem}
      SECRET_WRITE_PROVIDER: ${SECRET_WRITE_PROVIDER:-filesystem}
      # Workflow configuration
      WORKFLOW_DISTRIBUTED_MODE: "true"
      WORKFLOW_REDIS_STREAM_PREFIX: "workflow:events:"
      WORKFLOW_REDIS_CONSUMER_GROUP: "workflow-workers"
    volumes:
      - type: bind
        source: ./secrets/db_password_server
        target: /run/secrets/db_password_server
        read_only: true
    entrypoint: ["/bin/sh", "-c", "export DATABASE_URL=postgresql://app_user:$$(cat /run/secrets/db_password_server)@${PGBOUNCER_HOST:-pgbouncer}:${PGBOUNCER_PORT:-6432}/server && /app/entrypoint.sh"]
    secrets:
      - postgres_password
      - db_password_server
      - db_password_hocuspocus
      - redis_password
      - email_password
      - crypto_key
      - token_secret_key
      - nextauth_secret
      - google_oauth_client_id
      - google_oauth_client_secret
      - alga_auth_key
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_started
      pgbouncer:
        condition: service_started
      redis:
        condition: service_started
      hocuspocus:
        condition: service_started
      setup:
        condition: service_completed_successfully

  setup:
    build:
      context: .
      dockerfile: setup/Dockerfile
      args:
        SERVER_IMAGE_REPO: ${ALGA_SETUP_IMAGE_REPO:-ghcr.io/nine-minds/alga-psa-ce}
        ALGA_IMAGE_TAG: ${ALGA_IMAGE_TAG:-latest}
    environment:
      EDITION: community
      NODE_OPTIONS: --experimental-vm-modules
      DB_NAME_SERVER: server
      DB_USER_SERVER: app_user
      DB_USER_ADMIN: ${DB_USER_ADMIN:-postgres}
      PGBOSS_DATABASE: server
      VERSION: ${VERSION}
      APP_NAME: ${APP_NAME}
      APP_ENV: ${APP_ENV:-development}
      NODE_ENV: ${APP_ENV:-development}
      HOST: ${HOST}
      DB_TYPE: ${DB_TYPE:-postgres}
      DB_HOST: ${PGBOUNCER_HOST:-pgbouncer} # Changed to pgbouncer
      DB_PORT: ${PGBOUNCER_PORT:-6432} # Changed to pgbouncer port
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_IS_FORMAT_JSON: ${LOG_IS_FORMAT_JSON:-false}
      LOG_IS_FULL_DETAILS: ${LOG_IS_FULL_DETAILS:-false}
      EMAIL_ENABLE: ${EMAIL_ENABLE:-false}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@example.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USERNAME: ${EMAIL_USERNAME:-noreply@example.com}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SESSION_EXPIRES: ${NEXTAUTH_SESSION_EXPIRES:-86400}
      # Secret provider configuration for setup (CE edition)
      SECRET_READ_CHAIN: ${SECRET_READ_CHAIN:-env,filesystem}
      SECRET_WRITE_PROVIDER: ${SECRET_WRITE_PROVIDER:-filesystem}
    volumes:
      - type: bind
        source: ./setup/config.ini
        target: /opt/setup/config.ini
        read_only: true
      - type: bind
        source: ./setup/entrypoint.sh
        target: /opt/setup/entrypoint.sh
        read_only: true
      - type: bind
        source: ./secrets/postgres_password
        target: /run/secrets/postgres_password
        read_only: true
      - type: bind
        source: ./secrets/db_password_server
        target: /run/secrets/db_password_server
        read_only: true
    secrets:
      - postgres_password
      - db_password_server
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_started
      pgbouncer: # Added dependency on pgbouncer
        condition: service_started
    entrypoint: ["/opt/setup/entrypoint.sh"]

  workflow-worker:
    # Remove extends to use a custom build
    # extends:
    #   file: ./server/docker-compose.yaml
    #   service: server
    # Remove container_name to allow multiple instances
    # container_name: ${APP_NAME:-sebastian}_workflow_worker_ce
    build:
      context: .
      dockerfile: services/workflow-worker/Dockerfile
    environment:
      EDITION: community
      DB_NAME: server
      PGBOSS_DATABASE: server
      DB_NAME_SERVER: server
      DB_USER_SERVER: app_user
      DB_USER_ADMIN: ${DB_USER_ADMIN:-postgres}
      VERSION: ${VERSION}
      APP_NAME: ${APP_NAME}
      APP_ENV: ${APP_ENV:-development}
      NODE_ENV: ${APP_ENV:-development}
      HOST: ${HOST}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      DB_TYPE: ${DB_TYPE:-postgres}
      DB_HOST: ${PGBOUNCER_HOST:-pgbouncer}
      DB_PORT: ${PGBOUNCER_PORT:-6432}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_IS_FORMAT_JSON: ${LOG_IS_FORMAT_JSON:-false}
      LOG_IS_FULL_DETAILS: ${LOG_IS_FULL_DETAILS:-false}
      # Secret provider configuration for workflow-worker (CE edition)
      SECRET_READ_CHAIN: ${SECRET_READ_CHAIN:-env,filesystem}
      SECRET_WRITE_PROVIDER: ${SECRET_WRITE_PROVIDER:-filesystem}
      # Workflow-specific configuration
      WORKFLOW_DISTRIBUTED_MODE: "true"
      WORKFLOW_REDIS_STREAM_PREFIX: "workflow:events:"
      WORKFLOW_REDIS_CONSUMER_GROUP: "workflow-workers"
      WORKFLOW_REDIS_BATCH_SIZE: "10"
      WORKFLOW_REDIS_IDLE_TIMEOUT_MS: "60000"
    ports:
      # Expose a random port for health checks/monitoring
      - "3000"
    volumes:
      - type: bind
        source: ./secrets/db_password_server
        target: /run/secrets/db_password_server
        read_only: true
      - type: bind
        source: ./services/workflow-worker/entrypoint.sh
        target: /app/entrypoint.sh
        read_only: true
    entrypoint: ["/app/entrypoint.sh"]
    secrets:
      - postgres_password
      - db_password_server
      - redis_password
      - crypto_key
      - token_secret_key
      - nextauth_secret
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_started
      pgbouncer:
        condition: service_started
      redis:
        condition: service_started
      server:
        condition: service_started
    # Enable scaling of worker instances
    deploy:
      replicas: ${WORKFLOW_WORKER_REPLICAS:-1}

  hocuspocus:
    extends:
      file: ./hocuspocus/docker-compose.yaml
      service: hocuspocus
    container_name: ${APP_NAME:-sebastian}_hocuspocus_ce
    build:
      context: .
      dockerfile: hocuspocus/Dockerfile
    environment:
      VERSION: ${VERSION}
      APP_NAME: ${APP_NAME}
      APP_ENV: ${APP_ENV:-development}
      NODE_ENV: ${APP_ENV:-development}
      HOST: ${HOST}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      DB_TYPE: ${DB_TYPE:-postgres}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
    secrets:
      - db_password_hocuspocus
      - redis_password
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_started

  postgres:
    extends:
      file: docker-compose.base.yaml
      service: postgres # Updated from postgres-base
    environment:
      POSTGRES_DB: server
      VERSION: ${VERSION}
      APP_NAME: ${APP_NAME}
      APP_ENV: ${APP_ENV:-development}
      NODE_ENV: ${APP_ENV:-development}
      HOST: ${HOST}
      DB_TYPE: ${DB_TYPE:-postgres}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
    secrets:
      - postgres_password

  redis:
    extends:
      file: docker-compose.base.yaml
      service: redis # Updated from redis-base

networks:
  app-network:
    driver: bridge
