# Application Settings
APP_VERSION=1.0.0
APP_NAME=sebastian
APP_HOST=0.0.0.0
APP_PORT=3000
APP_EDITION=community  # Options: community, enterprise
NEXT_PUBLIC_EDITION=community  # Options: community, enterprise
APP_VERIFY_EMAIL=false
APP_ENV=production
NODE_ENV=production

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379
# REDIS_PASSWORD is managed via Docker secrets

# Database Configuration
DB_TYPE=postgres  # Required: Must be "postgres"
DB_HOST=postgres
DB_PORT=5432
DB_NAME=server
DB_NAME_SERVER=server

# Database Users:
# 1. Admin User (postgres):
#    - Username: postgres (fixed)
#    - Used for: Database administration, setup, migrations
#    - Password: Managed via postgres_password secret
#    - Has full database access
POSTGRES_USER=postgres
DB_USER_ADMIN=postgres  # Required: Admin user for database operations
DB_PASSWORD_ADMIN=/run/secrets/postgres_password  # Required: Path to admin password secret
DB_PASSWORD_SUPERUSER=/run/secrets/postgres_password  # Required: Path to superuser password secret
DB_PASSWORD_SERVER=/run/secrets/db_password_server  # Required: Path to server password secret

# 2. Application User (app_user):
#    - Username: app_user (fixed)
#    - Used for: Application database access
#    - Password: Managed via db_password_server secret
#    - Access controlled by Row Level Security (RLS)
DB_USER_SERVER=app_user

# 3. Hocuspocus User:
#    - Username: app_user (fixed)
#    - Used for: Hocuspocus service database access
#    - Password: Managed via db_password_hocuspocus secret
#    - Access controlled by Row Level Security (RLS)
DB_USER_HOCUSPOCUS=app_user

# Logging Configuration
LOG_LEVEL=INFO  # Required: One of 'SYSTEM' | 'TRACE' | 'DEBUG' | 'INFO' | 'WARNING' | 'ERROR' | 'CRITICAL'
LOG_IS_FORMAT_JSON=false  # Required: Boolean
LOG_IS_FULL_DETAILS=false  # Required: Boolean
LOG_ENABLED_FILE_LOGGING=false
LOG_DIR_PATH=/path/to/logs
LOG_ENABLED_EXTERNAL_LOGGING=false
LOG_EXTERNAL_HTTP_HOST=
LOG_EXTERNAL_HTTP_PORT=
LOG_EXTERNAL_HTTP_PATH=
LOG_EXTERNAL_HTTP_LEVEL=
LOG_EXTERNAL_HTTP_TOKEN=

# Hocuspocus Configuration
HOCUSPOCUS_PORT=1234
HOCUSPOCUS_URL=ws://localhost:1234

# nm-store Integration (for license management)
NM_STORE_URL=http://localhost:3000  # URL of nm-store service
TEMPORAL_WEBHOOK_SECRET=your-shared-secret-here  # Shared secret for Temporal callbacks
ALGA_WEBHOOK_SECRET=your-shared-secret-here  # Shared secret for webhook authentication
REQUIRE_HOCUSPOCUS=false  # Optional: Set to "true" to require hocuspocus

# Email Configuration
EMAIL_ENABLE=false  # Required: Boolean
EMAIL_FROM=noreply@example.com  # Required: Valid email address
EMAIL_HOST=smtp.example.com
EMAIL_PORT=587  # Required: Number greater than 0
EMAIL_USERNAME=noreply@example.com  # Required: Valid email address
# EMAIL_PASSWORD is managed via Docker secrets

# Cryptographic Settings
# CRYPTO_KEY is managed via Docker secrets
CRYPTO_SALT_BYTES=16
CRYPTO_ITERATION=100000
CRYPTO_KEY_LENGTH=64
CRYPTO_ALGORITHM=aes-256-gcm

# Authentication Settings
NEXTAUTH_URL=http://localhost:3000  # Required: Valid URL
NEXTAUTH_SESSION_EXPIRES=86400  # Required: Number greater than 0

# Workflow Configuration
WORKFLOW_DISTRIBUTED_MODE=true  # Enable distributed mode with Redis Streams
WORKFLOW_REDIS_STREAM_PREFIX=workflow:events:  # Redis stream prefix
WORKFLOW_REDIS_CONSUMER_GROUP=workflow-workers  # Consumer group name
WORKFLOW_REDIS_BATCH_SIZE=10  # Number of events to process in a batch
WORKFLOW_REDIS_IDLE_TIMEOUT_MS=60000  # Idle timeout in milliseconds
WORKFLOW_WORKER_REPLICAS=2  # Number of worker containers to run

# Deployment Settings
PROJECT_NAME=sebastian
EXPOSE_DB_PORT=5432
EXPOSE_HOCUSPOCUS_PORT=1234
EXPOSE_REDIS_PORT=6379
EXPOSE_SERVER_PORT=3000

# Docker Secrets:
# The following sensitive values are managed via Docker secrets:
# 1. Database Passwords:
#    - postgres_password: Admin user password
#    - db_password_server: Application user password
#    - db_password_hocuspocus: Hocuspocus service password
# 2. Redis Password:
#    - redis_password
# 3. Email Password:
#    - email_password
# 4. Security Keys:
#    - crypto_key
#    - token_secret_key
#    - nextauth_secret
#    - alga_auth_key
#    - secret_key
# 5. OAuth Credentials:
#    - google_oauth_client_id
#    - google_oauth_client_secret

# Enterprise Edition Gmail Configuration
# These are only used when NEXT_PUBLIC_EDITION=enterprise
# Hosted Gmail provider settings for simplified configuration
EE_GMAIL_CLIENT_ID=your-ee-gmail-client-id
EE_GMAIL_PROJECT_ID=your-ee-gmail-project-id
EE_GMAIL_REDIRECT_URI=https://api.algapsa.com/api/auth/google/callback
# EE_GMAIL_CLIENT_SECRET is managed via filesystem secrets

# Enterprise Edition Microsoft Configuration
# These are only used when NEXT_PUBLIC_EDITION=enterprise
# Hosted Microsoft provider settings for simplified configuration
EE_MICROSOFT_CLIENT_ID=your-ee-microsoft-client-id
EE_MICROSOFT_TENANT_ID=common
EE_MICROSOFT_REDIRECT_URI=https://api.algapsa.com/api/auth/microsoft/callback
# EE_MICROSOFT_CLIENT_SECRET is managed via filesystem secrets


# Deployment Identifier for Observability
# Used to identify this deployment in observability tools (Grafana, etc.)
# For hosted: Use environment name (e.g., "production", "staging")
# For on-premise: Use customer/instance identifier (e.g., "customer-abc", "demo-instance")
# DEPLOYMENT_ID=

# Usage Statistics
# Set to false to opt out of anonymous usage statistics
# This data helps us improve the product
ALGA_USAGE_STATS=true

# Analytics User ID Anonymization
# When true (default), user IDs are anonymized for privacy
# When false, actual user IDs are used (prefixed with "user_")
ANALYTICS_ANONYMIZE_USER_IDS=true

# Frontend configuration
# NEXT_PUBLIC_ALGA_USAGE_STATS=true  # Set to false to disable
NEXT_PUBLIC_ANALYTICS_ANONYMIZE_USER_IDS=true  # Must match ANALYTICS_ANONYMIZE_USER_IDS for frontend

# Instance identification
# If not set, a hash of the hostname will be used
# INSTANCE_ID=

# ============================================================================
# OBSERVABILITY CONFIGURATION (GRAFANA STACK)
# ============================================================================
# 
# IMPORTANT: This is for OPERATIONAL OBSERVABILITY only (performance, errors, traces)
# This is completely separate from PostHog usage analytics.
# 
# Two separate systems:
# 1. OpenTelemetry → Grafana Alloy → Prometheus/Loki/Tempo (this section)
#    - Application performance metrics
#    - Error tracking and traces  
#    - Database query performance
#    - HTTP request metrics
#    - System resource utilization
# 
# 2. PostHog (configured separately above)
#    - Product usage analytics
#    - User behavior tracking
#    - Feature usage statistics
#    - Business intelligence data
# 
# Deployment behavior:
# - Hosted: Always enabled for operational monitoring
# - On-premise: Opt-in via ALGA_OBSERVABILITY=true environment variable
# ============================================================================

# Enable/Disable Observability
# Set to true to enable local observability (metrics, logs, traces)
# For hosted deployments, this is automatically enabled
# For on-premise deployments, this must be explicitly enabled
ALGA_OBSERVABILITY=true

# OpenTelemetry OTLP Endpoint (Grafana Alloy)
# This is where metrics, logs, and traces are sent
# Grafana Alloy then routes them to Prometheus, Loki, and Tempo
# OTLP_ENDPOINT=

# Grafana Stack Endpoints (optional, for dashboard links and direct access)
# GRAFANA_ENDPOINT=
# PROMETHEUS_ENDPOINT=
# LOKI_ENDPOINT=
# TEMPO_ENDPOINT=

# Logging Configuration for Observability
# LOG_LEVEL is already defined above but affects observability logging
# Additional observability-specific logging settings:
# LOG_INCLUDE_TRACE_CONTEXT=true  # Include OpenTelemetry trace context in logs
