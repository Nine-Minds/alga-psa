Commit: c487e0c3
Author: NatalliaBukhtsik
Date: 2025-05-19 13:43:26
Subject: Merge pull request #496 from Nine-Minds/build_error

Comment:
fixing one build error
----------------------------------------
Commit: b13df250
Author: Natallia Bukhtsik
Date: 2025-05-19 13:33:23
Subject: fixing one build error

Comment:

----------------------------------------
Commit: 544ddd97
Author: NatalliaBukhtsik
Date: 2025-05-19 13:23:02
Subject: Merge pull request #495 from Nine-Minds/moar_spinners

Comment:
Refactor loading indicators to use consistent UI components
----------------------------------------
Commit: e55ca985
Author: Natallia Bukhtsik
Date: 2025-05-19 13:11:58
Subject: Refactor loading indicators to use consistent UI components

Comment:
Replaced various Lucide Loader2 spinners with centralized LoadingIndicator and Spinner components
Updated loading states in billing dashboard components (EditPlanServiceQuantityDialog, FixedPlanServicesList, PlanTypeRouter)
Standardized loading indicators in UI components (EntityAvatar, EntityImageUpload)
Improved ActivityDetailViewerDrawer loading state with new Spinner component
Impacts:

More consistent loading UI across the application
Easier to modify loading indicators globally
Reduced direct dependency on Lucide icons

There's a couple that slipped through my thrift last time, but most spinners now dance to the same tune. üé©‚ô´üåÄ

----------------------------------------
Commit: 5855595e
Author: Robert Isaacs
Date: 2025-05-18 11:22:13
Subject: feat(workflow): overhaul engine with inline forms, templating, and robust error handling

Comment:
feat(workflow): overhaul engine with inline forms, templating, and robust error handling

This commit introduces a major overhaul to the workflow engine, focusing on flexibility, developer experience, and operational robustness.

**Key Enhancements:**

*   **Inline Forms & `createTaskAndWaitForResult` Action:**
    *   Workflows can now define forms dynamically at runtime using the new `create_task_with_inline_form` action or the composite `createTaskAndWaitForResult` action. This simplifies creating tasks for ad-hoc human intervention without pre-registering forms.
    *   Database support for temporary forms (`workflow_form_definitions.is_temporary`).
    *   New job `cleanupTemporaryFormsJob` for managing temporary form lifecycle.
    *   Task Inbox integration updated to seamlessly handle these inline forms.
    *   QBO customer sync workflow (`qboCustomerSyncWorkflow`) refactored to use inline forms for resolving company duplicate conflicts, providing a richer UX with `RichTextViewerWidget`.
    *   QBO invoice sync workflow (`qboInvoiceSyncWorkflow`) extensively refactored to leverage `createTaskAndWaitForResult` for interactive error resolution (e.g., credentials, mapping, API errors).

*   **Parsimmon-Based Templating Engine:**
    *   Introduced a secure templating engine using Parsimmon for dynamic content within form schemas (e.g., `defaultValues`, titles, descriptions).
    *   Supports variable access (`${contextData.key}`), string literals, logical OR, and date formatting (`new Date().toLocale...()`).
    *   Enhances `qbo-sync-error-form` and other forms for dynamic data display.

*   **Improved Workflow Error Handling & State Management:**
    *   Standardized `WorkflowState` enum for better clarity.
    *   Comprehensive documentation updates for inline forms, templating, error handling patterns, workflow state management, task inbox, and event processing.
    *   Refined workflow runtime (`loadExecutionState`, `enqueueEvent`, `processQueuedEvent`, `createWorkflowContext`) for robustness and better event listener management.
    *   Redis stream publishing now uses flat message fields for improved interoperability.

**QBO Integration & Database:**

*   Consolidated QBO error forms and task definitions in `system_workflow_form_definitions` and `system_workflow_task_definitions`, simplifying error handling tasks.
*   Added `completed_by` to `workflow_tasks` table.
*   Standardized usage of UUIDs for `event_id` and `processing_id` in event processing.

**UI/UX & Refactoring:**

*   Replaced custom `Spinner` and `LoadingIndicator` components with `lucide-react` icons (e.g., `Loader2`) or simple div-based spinners for consistency.
*   Integrated `@rjsf/shadcn` theme for React JSON Schema Forms, updating `DynamicForm.tsx` to leverage theme-provided templates.
*   New `RichTextViewerWidget` for RJSF forms.
*   `ChannelPicker` refactored to use custom dropdown logic.
*   Secret management modules (`ISecretProvider`, `FileSystemSecretProvider`, `VaultSecretProvider`, `getSecretProviderInstance`, `getSecret`) moved from server-specific paths to `shared/core/` for better code organization.
*   Ticket component files moved from `server/src/components/tickets/ticket/` to `server/src/components/tickets/`.
*   Removed the concept of "private" schedule entries, simplifying schedule logic across components and actions. `is_private` flag removed from `IScheduleEntry` and related database migrations.
*   `'schedule'` added as a valid `entity_type` for document associations.

**Documentation:**

*   Extensive new documentation for:
    *   Parsimmon Templating Engine (`docs/technical/parsimmon_templating_engine.md`)
    *   Inline Forms (`docs/workflow/inline-form-example.md`)
    *   Workflow State Management Guidelines (`docs/workflow/state-management-guidelines.md`)
*   Significant updates to existing workflow, form, integration, and task inbox documentation to reflect new features and patterns.
*   Removed outdated "Current Feature Status" table from `README.md`.

üê± From the Cheshire Cat's Perch üê±

"Oh my, oh my! They've stuffed *inline forms* into the workflow engine! How curiouser and curiouser! ü´ñ‚ú® As if the code wasn't mad enough, now it can create forms out of thin air - much like my disappearing act, only less impressive. üòº I daresay this 'templating engine' is just the White Rabbit's pocket watch in disguise - always running, never on time! üï∞Ô∏è Remember, dear developer: we're all mad here, but your commit history is madder still! üåÄüÉè"

- **Refactor: Centralize secret path logic and use provider in `getSecret`**
- **Refactor: Move secret provider logic to shared/core**
- **Feat: Implement human tasks for QBO sync workflow errors**
- **Feat: Enhance human task forms with dynamic data via templates**
- **Feat: Add interactive error resolution pattern with human tasks in workflow documentation**
- **feat(workflow): add createTaskAndWaitForResult action and enhance event handling**
- **Feat(Workflow): Enhance event processing and track task completion**
- **Refactor: Consolidate QBO workflow forms and task types**
- **feat / Refactor QBO Workflow State Management**
- **Docs: Add state guidelines & clarify QBO entity types**
- **wip / workflow inline form support**
- **wip / inline forms contd**
- **Docs: Clarify inline form handling in Task Inbox**
- **Feat: Implement inline forms for human tasks with rich text support**
- **Feat: Enhance QBO customer linking and SyncToken fetch**

----------------------------------------
Commit: 29d29475
Author: Robert Isaacs
Date: 2025-05-18 11:10:59
Subject: Fix: Update import path for secret provider instance in workflow actions registration

Comment:

----------------------------------------
Commit: c49266bc
Author: Robert Isaacs
Date: 2025-05-18 10:19:46
Subject: Feat: Enhance QBO customer linking and SyncToken fetch

Comment:
Introduces an interactive prompt (`prompt_user_to_link_or_create_qbo_customer_v2`)
allowing users to link to an existing QBO customer or create a new one
during the synchronization workflow.

If a user chooses to link an existing customer, the workflow now
performs a direct fetch of the QBO customer's details. This ensures
the `SyncToken` is current before attempting an update, reducing
failures caused by stale or missing tokens.

This change improves the reliability and user experience of the
QBO customer sync process, particularly when mappings are new or
SyncTokens are not readily available.

----------------------------------------
Commit: fd241d9f
Author: Robert Isaacs
Date: 2025-05-18 09:11:27
Subject: Feat: Implement inline forms for human tasks with rich text support

Comment:
Introduces inline forms for human tasks, enabling richer user interaction and contextual data display directly within the Task Inbox. This is supported by a new `RichTextViewerWidget` capable of rendering Markdown content.

This enhancement is prominently used in the QuickBooks Online (QBO) customer synchronization workflow. When potential customer duplicates are detected, an inline form now presents detailed information and resolution options, significantly improving the conflict resolution process.

Key changes include:
- New `RichTextViewerWidget` and `CustomTitleField` components.
- Integration of inline forms in `qboCustomerSyncWorkflow` using `createInlineTaskAndWaitForResult`.
- Updates to `DynamicForm`, custom form widgets, and field templates to support these features.
- Addition of documentation for a new Parsimmon templating engine.
- Updates to QBO integration and general workflow documentation to reflect these new capabilities.

----------------------------------------
Commit: 1139b92f
Author: Robert Isaacs
Date: 2025-05-17 10:57:58
Subject: Docs: Clarify inline form handling in Task Inbox

Comment:
This commit updates the workflow documentation to explain how tasks with inline forms are integrated with the Task Inbox.

It details the dynamic creation of temporary, tenant-specific form and task definitions when an inline form is used. This allows the Task Inbox to discover and render these forms using its standard mechanisms, even though they are not pre-registered.

The following files were updated:
- `docs/workflow/form-registry.md`: Added a note on inline form support and dynamic definition creation.
- `docs/workflow/inline-form-example.md`: Expanded on how the system handles inline forms by creating temporary definitions.
- `docs/workflow/task-inbox-integration.md`: Added a new section explaining the handling of tasks with inline forms.

----------------------------------------
Commit: 56864aa9
Author: Robert Isaacs
Date: 2025-05-17 02:57:00
Subject: wip / inline forms contd

Comment:

----------------------------------------
Commit: 74fc37c7
Author: Robert Isaacs
Date: 2025-05-17 02:38:14
Subject: wip / workflow inline form support

Comment:

----------------------------------------
Commit: 919c69ac
Author: Robert Isaacs
Date: 2025-05-16 18:09:52
Subject: Docs: Add state guidelines & clarify QBO entity types

Comment:
Introduces comprehensive state management guidelines for workflows, clarifying best practices for using `context.data` (persistent state) versus local variables. This aims to improve data integrity, auditability, and workflow robustness.

Key changes:
- Added `docs/workflow/state-management-guidelines.md`.
- Updated event sourcing and TypeScript workflow creation docs to reference or align with new guidelines.
- Explicitly set `algaEntityType` in QBO customer and invoice sync workflows for improved data clarity.
- Made related updates to shared workflow components: `taskInboxService`, `registerWorkflowActions`, and `workflowTaskModel`.

----------------------------------------
Commit: 4b752dd3
Author: Robert Isaacs
Date: 2025-05-16 16:18:11
Subject: feat / Refactor QBO Workflow State Management

Comment:
- Reorganized workflows to include all function definitions inside of the function scope.

----------------------------------------
Commit: 425cc6f7
Author: Robert Isaacs
Date: 2025-05-16 15:05:56
Subject: Merge pull request #491 from Nine-Minds/feature_status

Comment:
overview of current status of development
----------------------------------------
Commit: a6d5f6e3
Author: Robert Isaacs
Date: 2025-05-16 15:05:21
Subject: Update README.md

Comment:

----------------------------------------
Commit: 013ea0f4
Author: NatalliaBukhtsik
Date: 2025-05-16 01:25:07
Subject: Merge pull request #493 from Nine-Minds/spinner_unificaion

Comment:
Refactor: Replace custom spinners with unified Spinner and LoadingInd‚Ä¶
----------------------------------------
Commit: ee6f238e
Author: Natallia Bukhtsik
Date: 2025-05-16 01:07:00
Subject: Refactor: Replace custom spinners with unified Spinner and LoadingIndicator components

Comment:
- Created new Spinner and LoadingIndicator components with consistent sizing and styling
- Replaced all inline spinner implementations across the codebase
- Added loading text support and flexible layout options
- Standardized spinner colors and animations
- Improved accessibility with proper ARIA attributes

Impact:

- Consistent loading UI throughout the application
- Reduced code duplication for spinner implementations
- Easier maintenance and updates to loading indicators
- Better user experience with loading text feedback

And just like the White Rabbit's pocket watch, all our spinners now tick in perfect unison - though thankfully none are late for tea! üêá‚è±Ô∏èüåÄ

----------------------------------------
Commit: 7a64ef54
Author: NatalliaBukhtsik
Date: 2025-05-15 23:04:35
Subject: Merge pull request #492 from Nine-Minds/private_events

Comment:
Added private scheduling functionality with visibility controls
----------------------------------------
Commit: c6ec820d
Author: Natallia Bukhtsik
Date: 2025-05-15 22:52:53
Subject: Added private scheduling functionality with visibility controls

Comment:
- Added is_private flag to schedule entries with database migration
- Implemented private entry visibility rules across all schedule components
- Restricted editing/deletion of private entries to creators only
- Show "Busy" placeholder for private entries viewed by others
- Added private toggle switch in EntryPopup (visible only for self-assigned entries)
- Updated schedule actions to enforce private entry permissions

Impacts:

- Affects all schedule views and entry management
- Changes IScheduleEntry interface and database schema
- Modifies permission checks in scheduleActions
- Updates display logic across multiple components

"Private parties require private calendars," declared the Cheshire Cat, vanishing all but the approved guests from view üé©üê±üë§

----------------------------------------
Commit: 035282df
Author: Natallia Bukhtsik
Date: 2025-05-15 21:00:22
Subject: overview of current status of development

Comment:

----------------------------------------
Commit: f5b25ef3
Author: NatalliaBukhtsik
Date: 2025-05-15 20:25:32
Subject: Merge pull request #490 from Nine-Minds/ticket_screen_fixes

Comment:
Ticket screen fixes
----------------------------------------
Commit: 413eb6f2
Author: Natallia Bukhtsik
Date: 2025-05-15 20:14:43
Subject: uodate seeds for deprecated table

Comment:

----------------------------------------
Commit: f8e6066b
Author: Natallia Bukhtsik
Date: 2025-05-15 19:06:49
Subject: Refactor ticket components into organized subdirectory structure

Comment:
- Moved all ticket-related components into new 'ticket' subdirectory under components/tickets/
- Updated all import paths to reflect new locations
- Added auto-scroll to working hours (8AM) in schedule components
- Improved calendar styling with fixed headers and non-working hour shading
- Added skeleton loading states for better UX

Impacts:

- Requires updates to any direct imports of ticket components
- Improves maintainability with better component organization
- Enhances schedule calendar usability with auto-scrolling and visual improvements

----------------------------------------
Commit: 949adc3f
Author: Natallia Bukhtsik
Date: 2025-05-15 14:29:03
Subject: Refactor schedule components and ticket loading states

Comment:
- Added Suspense boundary with loading state to tickets page

- Enhanced EntryPopup with view-only mode and improved UI

- Completely refactored AgentScheduleDrawer with:

  - Custom event styling and colors
  - Better event selection handling
  - Improved month view display
  - View-only entry details

- Fixed user loading state in TicketingDashboard

Impacts:

- Improves schedule visualization and interaction
- Adds better loading states throughout ticket flow
- Makes schedule entries more accessible in view mode

Your tickets will flow smoother than the Tin Man after his oil massage! üõ¢Ô∏èüï∫

----------------------------------------
Commit: d8e48f96
Author: Natallia Bukhtsik
Date: 2025-05-15 12:24:47
Subject: Remove schedules table and related references üóëÔ∏è

Comment:
- Added migration to drop schedules table and clean up related document associations
- Removed schedule references from Companies component and company/contact/document actions
- Updated document association types to exclude schedule entity type
- Cleaned up scheduleActions imports

Impacts:

- Any code relying on schedules table will break
- Document associations with schedules will be lost
- UI components showing schedule counts will need updates

 üßô‚Äç‚ôÇÔ∏èüí® No more ticking clocks in Oz! ‚è∞‚û°Ô∏èüóëÔ∏è JK

----------------------------------------
Commit: bd1e3348
Author: Natallia Bukhtsik
Date: 2025-05-15 10:21:25
Subject: feat: Replace TechnicianDispatchDashboard with AgentScheduleDrawer

Comment:
Replaces the TechnicianDispatchDashboard with a new AgentScheduleDrawer component in TicketDetails.tsx. The AgentScheduleDrawer provides a calendar view of an agent's schedule.

Potential Impact:
- The TechnicianDispatchDashboard is no longer used in the TicketDetails component.
- The AgentScheduleDrawer requires the agentId to properly display the schedule.
- Ensure proper styling and functionality of the AgentScheduleDrawer within the TicketDetails context.

Toto, I've a feeling we're not in TechnicianDispatchDashboard anymore! üßô‚Äç‚ôÇÔ∏èüìÖ

----------------------------------------
Commit: 4b25f70f
Author: Robert Isaacs
Date: 2025-05-14 23:38:00
Subject: Refactor: Consolidate QBO workflow forms and task types

Comment:
Streamline QBO workflow error handling by consolidating forms and task definitions.

This involves:
- Merge specialized QBO error forms into more generic ones.
- Remove the `qbo-item-lookup-internal-error-form`.
- Standardize task types, such as `qbo_mapping_error`, for broader use.
- Update the `consolidate_qbo_workflow_schema` migration with new definitions.
- Modify QBO sync workflows and shared components to use these updates.
- Align documentation with all changes.

----------------------------------------
Commit: c489e0d0
Author: Robert Isaacs
Date: 2025-05-14 18:02:55
Subject: Feat(Workflow): Enhance event processing and track task completion

Comment:
This commit enhances the workflow system's asynchronous event processing for improved reliability and observability, and introduces tracking for task completion. Documentation has been significantly updated to reflect these changes and clarify system architecture.

Key improvements:
- **Asynchronous Event Processing:**
    - Refined event handling mechanisms, with changes to the event bus, runtime, and Redis stream client.
    - Clarified the role of the `workflow_event_processing` table for comprehensive event lifecycle tracking (e.g., pending, published, processing, completed/failed).
    - Documented the current singleton `WorkflowWorker` architecture, its impact on `context.events.waitFor`, and considerations for future scalability (e.g., sharding streams by tenant).
- **Task Management:**
    - Added a `completed_by` field to `workflow_tasks` via a new migration, enabling tracking of which user completed a human task. This is reflected in `taskInboxActions`.
- **QBO Integration Fix:**
    - Updated the QBO mapping error form definition (via migration) to remove URI format validation.
- **Documentation:**
    - Extensively updated `docs/workflow/workflow-system.md` to provide a clearer understanding of the event system, worker architecture, data models, and event stream usage.

These changes aim to improve the robustness, traceability, and functionality of the workflow system.

----------------------------------------
Commit: 72c2d1cd
Author: NatalliaBukhtsik
Date: 2025-05-14 11:30:14
Subject: Merge pull request #489 from Nine-Minds/add_ticket_screen

Comment:
Refactor UI picker components and channel handling
----------------------------------------
Commit: 1822e60a
Author: Natallia Bukhtsik
Date: 2025-05-14 11:10:50
Subject: Refactor UI picker components and channel handling

Comment:
- Updated CompanyPicker to use Lucide ChevronDown icon and improved styling
- Refactored ChannelPicker to use Radix Popover for better accessibility
- Added inactive channel state handling in TicketingDashboardContainer
- Improved ContactPicker styling and disabled state behavior
- Enhanced CustomSelect and UserPicker styling consistency
- Added channel filter state to QuickAddTicket
- Updated optimizedTicketActions to include is_inactive flag for channels

Impacts:

- More consistent UI styling across picker components
- Better accessibility in ChannelPicker
- Improved handling of inactive channels throughout the app

And with a click of my ruby slippers, these pickers shall no longer be wicked! üßô‚Äç‚ôÇÔ∏èüë†‚ú®

----------------------------------------
Commit: 7dfde397
Author: Robert Isaacs
Date: 2025-05-14 11:03:30
Subject: feat(workflow): add createTaskAndWaitForResult action and enhance event handling

Comment:
- Introduced `createTaskAndWaitForResult` action in the workflow context to facilitate task creation and event waiting.
- Updated `WorkflowActions` interface to include the new action with appropriate parameters and return types.
- Enhanced `waitFor` method in `WorkflowContext` to support optional timeout functionality.
- Modified `TypeScriptWorkflowRuntime` to construct action proxies dynamically, ensuring circular dependencies are handled.
- Implemented detailed logging for task creation and event resolution processes.
- Improved error handling for task creation and event waiting, providing clearer feedback on failures.

----------------------------------------
Commit: a54358e1
Author: Robert Isaacs
Date: 2025-05-14 10:02:33
Subject: Feat: Add interactive error resolution pattern with human tasks in workflow documentation

Comment:

----------------------------------------
Commit: f5e00e9c
Author: Robert Isaacs
Date: 2025-05-14 08:49:06
Subject: Feat: Enhance human task forms with dynamic data via templates

Comment:
This commit introduces a more flexible way to display dynamic information
in human task forms by leveraging template string substitution within
form definitions.

Key changes:
- Added `system_workflow_form_definitions` and `workflow_form_definitions`
  tables to store UI form schemas, enabling reusable and tenant-specific
  form structures.
- Implemented a mechanism where a form's `json_schema` can use template
  strings (e.g., `${contextData.keyName}`) in property `default` values.
  These templates are populated from the task's `contextData` at runtime
  by the UI.
- Updated the QBO customer sync workflow (`qboCustomerSyncWorkflow.ts`)
  to provide detailed error context (e.g., `workflowInstanceId`,
  `errorCode`, `errorMessageText`) for its human task.
- Created a database migration to update the `qbo_sync_error` form
  definition to use this new templating feature, allowing it to display
  rich, formatted error details.
- Expanded documentation (`docs/workflow/workflow-system.md`) to detail
  the new form definition tables and the patterns for dynamic data display
  in human tasks, including direct field population and template string
  substitution.

This enhancement allows for richer, context-specific information to be
presented to users, improving the clarity and actionability of human
tasks, particularly for error handling scenarios like QBO sync issues.

----------------------------------------
Commit: 59df1567
Author: Robert Isaacs
Date: 2025-05-13 22:35:21
Subject: Feat: Implement human tasks for QBO sync workflow errors

Comment:
Replace TODO comments in `qboCustomerSyncWorkflow` with calls
to `actions.createHumanTask` for various error scenarios.

This change ensures that actionable tasks are created when:
- Workflow input (trigger event, payload) is missing.
- Critical IDs (realmId, algaCompanyId) are absent.
- Alga company data cannot be fetched.
- QBO term mapping is not found.

Human tasks now include specific types, titles, descriptions,
priorities, and relevant context data to aid in troubleshooting
and resolution.

----------------------------------------
Commit: 7d8a3adc
Author: Robert Isaacs
Date: 2025-05-13 21:45:56
Subject: Refactor: Move secret provider logic to shared/core

Comment:
Relocate secret provider components, including `ISecretProvider`,
`FileSystemSecretProvider`, `VaultSecretProvider`, and the
`getSecretProviderInstance` utility, from `server/src/lib/secrets`
to the `shared/core` directory.

This change centralizes secret management, improving code
organization and enabling reusability. Import paths in dependent
server files have been updated to reflect the new location.

----------------------------------------
Commit: 40e42dd8
Author: Robert Isaacs
Date: 2025-05-13 21:26:16
Subject: Refactor: Centralize secret path logic and use provider in `getSecret`

Comment:
- Move Docker/local secret path determination from `getSecret.ts` to `FileSystemSecretProvider.ts`.
- `FileSystemSecretProvider` now asynchronously resolves and caches its base path.
- Update `getSecret.ts` to exclusively use the `ISecretProvider` abstraction, removing its previous direct filesystem and environment variable lookups for secrets.

This change centralizes filesystem-specific path logic within the `FileSystemSecretProvider` and ensures `getSecret.ts` consistently utilizes the secret provider abstraction, improving modularity and separation of concerns.

----------------------------------------
Commit: c38bcfe1
Author: NatalliaBukhtsik
Date: 2025-05-13 16:14:19
Subject: Merge pull request #488 from Nine-Minds/fixing_db_keys

Comment:
Fixing db keys
----------------------------------------
Commit: 212e9801
Author: NatalliaBukhtsik
Date: 2025-05-13 16:04:57
Subject: Merge branch 'main' into fixing_db_keys

Comment:

----------------------------------------
Commit: 62fe03f6
Author: Robert Isaacs
Date: 2025-05-13 13:22:48
Subject: fix: remove paths filter to always trigger E2E Fresh Install Tests on changes

Comment:

----------------------------------------
Commit: c3e42054
Author: Robert Isaacs
Date: 2025-05-13 13:09:06
Subject: fix: ensure assemblyscript templates are included in production build

Comment:

----------------------------------------
Commit: 4502ae34
Author: Robert Isaacs
Date: 2025-05-13 12:45:28
Subject: chore: Update push triggers for E2E Fresh Install Tests workflow

Comment:

----------------------------------------
Commit: 304d44e5
Author: Robert Isaacs
Date: 2025-05-13 12:23:21
Subject: fix: temporarily remove upload report

Comment:

----------------------------------------
Commit: 80d13725
Author: Robert Isaacs
Date: 2025-05-13 12:12:01
Subject: chore: Update E2E workflow triggers and remove obsolete workflows

Comment:

----------------------------------------
Commit: 280a5738
Author: Robert Isaacs
Date: 2025-05-13 12:01:32
Subject: feat: Add E2E Tests

Comment:
*   **CI/CD:**
    *   Added a new GitHub Actions workflow (`.github/workflows/e2e-fresh-install-tests.yaml`) to perform end-to-end tests on fresh installations, improving automated quality assurance.

----------------------------------------
Commit: 18f64c38
Author: Robert Isaacs
Date: 2025-05-12 19:10:32
Subject: Implement getSecret function to retrieve secrets from Docker or environment variables with fallback options

Comment:

----------------------------------------
Commit: 724ffa16
Author: Robert Isaacs
Date: 2025-05-12 18:30:58
Subject: Remove insertion logic for conditional display rules in seed file

Comment:

----------------------------------------
Commit: 91787aab
Author: openhands
Date: 2025-05-12 20:17:55
Subject: Change 'Client Visible' to 'Client' in ticket detail screen

Comment:

----------------------------------------
Commit: 77daa291
Author: Natallia Bukhtsik
Date: 2025-05-13 14:27:40
Subject: aaaand... the last one!

Comment:

----------------------------------------
Commit: 8d8ddbf3
Author: Natallia Bukhtsik
Date: 2025-05-13 14:27:19
Subject: move trigger inside the app

Comment:

----------------------------------------
Commit: 26908f0a
Author: Natallia Bukhtsik
Date: 2025-05-13 14:26:50
Subject: ensure we use tenant vs tenant_id

Comment:

----------------------------------------
Commit: 4e24ac35
Author: Natallia Bukhtsik
Date: 2025-05-13 14:17:55
Subject: seeds update

Comment:

----------------------------------------
Commit: 72507415
Author: Natallia Bukhtsik
Date: 2025-05-13 14:17:35
Subject: Standardize tenant columns and update constraints across database tables

Comment:
- Renamed 'tenant_id' columns to 'tenant' for consistency
- Changed non-UUID tenant columns to UUID type
- Updated primary keys to include tenant column where needed
- Modified foreign key constraints to properly handle tenant isolation
- Added proper tenant foreign key references to tenants table
- Updated workflow tables with proper tenant constraints
- Added tenant column to company_locations table
- Standardized tenant column naming and constraints across all tables

Impacts:

- Requires careful deployment due to schema changes
- May affect queries that don't properly filter by tenant
- Improves multi-tenant isolation and referential integrity
- Enables better distributed query performance

"Off with their tenant_ids!" cried the Red Queen, as the database schema tumbled down the rabbit hole into a properly normalized wonderland. üêá‚ô†Ô∏è

----------------------------------------
Commit: 12eddfc1
Author: Robert Isaacs
Date: 2025-05-13 13:31:32
Subject: Merge pull request #487 from Nine-Minds/include-assemblyscript-prod-build

Comment:
fix: ensure assemblyscript templates are included in production build
----------------------------------------
Commit: 46c7f2be
Author: Robert Isaacs
Date: 2025-05-13 13:22:48
Subject: fix: remove paths filter to always trigger E2E Fresh Install Tests on changes

Comment:

----------------------------------------
Commit: 129ce901
Author: Robert Isaacs
Date: 2025-05-13 13:09:06
Subject: fix: ensure assemblyscript templates are included in production build

Comment:

----------------------------------------
Commit: 5f2eda26
Author: Robert Isaacs
Date: 2025-05-13 12:53:34
Subject: Merge pull request #486 from Nine-Minds/trigger-test-on-main-push

Comment:
chore: Update push triggers for E2E Fresh Install Tests workflow
----------------------------------------
Commit: 05b388e2
Author: Robert Isaacs
Date: 2025-05-13 12:45:28
Subject: chore: Update push triggers for E2E Fresh Install Tests workflow

Comment:

----------------------------------------
Commit: 5ff7d544
Author: Robert Isaacs
Date: 2025-05-13 12:42:23
Subject: Merge pull request #485 from Nine-Minds/implement-robust-build-test

Comment:
feat(ci): introduce E2E fresh install tests and refactor supporting infrastructure

This commit introduces a new GitHub Actions workflow (`e2e-fresh-install-tests.yaml`)
to perform end-to-end tests on a fresh installation of the application.
This workflow builds services, runs the setup process, and executes
Playwright tests to validate core functionality, including user login.

Key changes include:

Workflow & CI Pipeline:
- Added `e2e-fresh-install-tests.yaml` workflow:
  - Triggers on pull requests (to relevant paths) and manual dispatch.
  - Sets up environment, installs Docker Compose v2.
  - Starts services using `docker-compose.base.yaml` and `docker-compose.ce.yaml`.
  - Waits for `setup` service completion (via exit code) and `server` health.
  - Dynamically captures credentials from server logs (when `APP_ENV=development`).
  - Installs Playwright and runs E2E tests (currently a login test).
  - Uploads Playwright reports on completion.
- Modified `publish-package.yaml` to trigger package publishing only after
  successful `E2E Fresh Install Tests` workflow completion on the `main` branch.
- Removed `pr-checks.yaml` (image build check) and `server-test.yaml` (old server tests)
  workflows, as their functionalities are superseded or will be re-evaluated.

Setup Script (`setup/entrypoint.sh`):
- Enhanced error handling: script now exits immediately on command failure
  (using `set -e` and a `trap 'handle_error' ERR`).
- Removed `|| true` from critical setup commands (db creation, migrations, seeds),
  ensuring failures halt the process and report an error.
- Script now exits with status 0 on success, allowing CI to correctly detect
  completion. This replaces the previous behavior of running indefinitely.

Docker Compose Configuration:
- Removed explicit `version: '3.8'` from compose files.
- `docker-compose.base.yaml`:
  - Services are named `postgres` and `redis`.
  - Explicit `container_name` declarations removed.
  - `pgbouncer` service correctly depends on `postgres`.
- `docker-compose.ce.yaml` (used by new E2E workflow):
  - The `setup` service now connects to the database via `pgbouncer` by default
    (using `DB_HOST: ${PGBOUNCER_HOST:-pgbouncer}`).
  - `server` service dependency on `hocuspocus` no longer has `required: false`.
- Root `docker-compose.yaml`:
  - `server` and `hocuspocus` services now depend on a service named `redis-base`
    (which is defined in this file).
- Removed `develop.watch` configurations from service-specific compose files
  (e.g., `server/docker-compose.yaml`, `hocuspocus/docker-compose.yaml`).
- `pgbouncer/docker-compose.yaml`: No longer explicitly declares `depends_on: postgres`
  (dependency is managed by services that use both).
- `ee/setup/docker-compose.yaml`: The `postgres` service definition updated to extend
  `postgres-base` from the root `docker-compose.yaml`.

Code Adjustments:
- Updated server-side secret provider module imports (`FileSystemSecretProvider.ts`,
  `VaultSecretProvider.ts`, `index.ts`) to use `.js` extensions for imports,
  improving ESM compatibility.
- Modified `shared/workflow/init/registerWorkflowActions.ts` to use `getSecret`
  from `@shared/core/getSecret.js` instead of `getSecretProviderInstance`.

BREAKING CHANGE:
- The `setup` service container (e.g., when run via `docker-compose.ce.yaml`)
  now exits upon completion or failure, instead of running indefinitely. CI
  workflows rely on this new behavior for determining setup completion.
- Docker Compose configurations have been refactored. Notable changes:
  - The `setup` service (in `docker-compose.ce.yaml`) connects to the DB via `pgbouncer`.
  - The root `docker-compose.yaml` uses a `redis-base` service for its `server` and
    `hocuspocus` services.
  - `container_name` declarations have been removed from `docker-compose.base.yaml`.
  Local development environments or scripts interacting directly with specific Docker
  Compose setups may need adjustments to reflect these changes.
- The `pr-checks.yaml` and `server-test.yaml` GitHub Actions workflows have been
  removed. Projects or processes relying on these specific workflows will need to adapt.


"Klaatu barada nikto! üõ†Ô∏è  We've got a new automated Necronomicon reader üìú ‚Äì it's called Playwright! It'll check if your fresh install spells actually work, so no more summoning Deadites by accident! üßü‚Äç‚ôÇÔ∏è Groovy! ‚ú®"


- **Implement getSecret function to retrieve secrets from Docker or environment variables with fallback options**
- **feat: Add E2E Tests**
- **chore: Update E2E workflow triggers and remove obsolete workflows**
- **Implement getSecret function to retrieve secrets from Docker or environment variables with fallback options**
- **feat: Add E2E Tests**
- **chore: Update E2E workflow triggers and remove obsolete workflows**

----------------------------------------
Commit: a61a4a45
Author: Robert Isaacs
Date: 2025-05-13 12:23:21
Subject: fix: temporarily remove upload report

Comment:

----------------------------------------
Commit: 82af8826
Author: Robert Isaacs
Date: 2025-05-13 12:13:15
Subject: Merge branch 'implement-robust-build-test' of https://github.com/nine-minds/alga-psa into implement-robust-build-test

Comment:

----------------------------------------
Commit: 8917ca3e
Author: Robert Isaacs
Date: 2025-05-13 12:12:01
Subject: chore: Update E2E workflow triggers and remove obsolete workflows

Comment:

----------------------------------------
Commit: f9468633
Author: Robert Isaacs
Date: 2025-05-13 12:01:32
Subject: feat: Add E2E Tests

Comment:
*   **CI/CD:**
    *   Added a new GitHub Actions workflow (`.github/workflows/e2e-fresh-install-tests.yaml`) to perform end-to-end tests on fresh installations, improving automated quality assurance.

----------------------------------------
Commit: c269f138
Author: Robert Isaacs
Date: 2025-05-12 19:10:32
Subject: Implement getSecret function to retrieve secrets from Docker or environment variables with fallback options

Comment:

----------------------------------------
Commit: 451b2675
Author: Robert Isaacs
Date: 2025-05-13 12:12:01
Subject: chore: Update E2E workflow triggers and remove obsolete workflows

Comment:

----------------------------------------
Commit: 100f1f2a
Author: Robert Isaacs
Date: 2025-05-13 12:01:32
Subject: feat: Add E2E Tests

Comment:
*   **CI/CD:**
    *   Added a new GitHub Actions workflow (`.github/workflows/e2e-fresh-install-tests.yaml`) to perform end-to-end tests on fresh installations, improving automated quality assurance.

----------------------------------------
Commit: 7ab975f1
Author: Robert Isaacs
Date: 2025-05-12 19:10:32
Subject: Implement getSecret function to retrieve secrets from Docker or environment variables with fallback options

Comment:

----------------------------------------
Commit: c2dc36a8
Author: Robert Isaacs
Date: 2025-05-12 18:48:29
Subject: Merge pull request #483 from Nine-Minds/build-issues

Comment:
Build issues / Clean up build environment
----------------------------------------
Commit: ed2c30df
Author: Robert Isaacs
Date: 2025-05-12 18:40:10
Subject: Refactor seed files for workflow registrations, event attachments, data, and tenant-specific task definitions to improve clarity and maintainability

Comment:

----------------------------------------
Commit: 5dd4cc20
Author: Robert Isaacs
Date: 2025-05-12 18:30:58
Subject: Remove insertion logic for conditional display rules in seed file

Comment:

----------------------------------------
Commit: f501467d
Author: Robert Isaacs
Date: 2025-05-12 16:43:03
Subject: Merge pull request #482 from Nine-Minds/change-client-visible-to-client

Comment:
Change Client Visible to Client in ticket detail screen
----------------------------------------
Commit: 7c2dee83
Author: openhands
Date: 2025-05-12 20:17:55
Subject: Change 'Client Visible' to 'Client' in ticket detail screen

Comment:

----------------------------------------
Commit: c001f843
Author: Natallia Bukhtsik
Date: 2025-05-12 11:25:24
Subject: new sha

Comment:

----------------------------------------
Commit: 58be56ca
Author: NatalliaBukhtsik
Date: 2025-05-12 11:10:22
Subject: Merge pull request #481 from Nine-Minds/confirmation_dialog

Comment:
Refactor confirmation dialogs and dropdown menus across components
----------------------------------------
Commit: 365ad2ed
Author: Natallia Bukhtsik
Date: 2025-05-12 11:05:23
Subject: Refactor confirmation dialogs and dropdown menus across components

Comment:
- Standardized confirmation dialogs using ConfirmationDialog component
- Improved dropdown menu implementations with better accessibility
- Added error handling for delete operations
- Enhanced keyboard navigation in dialogs
- Consolidated delete confirmation logic in TicketingSettings

Impacts:

- More consistent UI/UX for destructive actions
- Better accessibility with proper focus management
- Reduced code duplication for confirmation flows
- More robust error handling for delete operations

"These confirmations are more reliable than a robot butler's tea service - 'Would you like sugar with your deletion, sir?' ü§ñ‚òï"

----------------------------------------
Commit: b4712080
Author: Robert Isaacs
Date: 2025-05-11 22:44:27
Subject: Merge pull request #480 from Nine-Minds/qbo-ui-for-human-tasks

Comment:
feat(workflows): implement system forms and enhance QBO invoice sync workflow

This commit introduces a comprehensive system forms implementation and significantly enhances the QBO invoice sync workflow with the following changes:

1. Added System Forms functionality:
   - Created `system_workflow_form_definitions` table to store reusable form templates
   - Implemented form registration and retrieval actions for system forms
   - Added documentation in `docs/forms/system-forms.md`
   - Created migration for QBO invoice sync forms (`20250511215231_consolidate_qbo_workflow_schema.cjs`)

2. Enhanced QBO Invoice Sync Workflow:
   - Improved error handling with specialized system forms for different error scenarios
   - Added dynamic form generation with template variable processing
   - Implemented new form widgets (AlertWidget, ButtonLinkWidget, HighlightWidget)
   - Enhanced task creation with proper form associations

3. Database schema changes:
   - Added `system_workflow_task_definitions` table
   - Modified `workflow_tasks` to support both system and tenant-specific forms
   - Updated task inbox service to handle new schema

4. Documentation updates:
   - Added detailed migration plan for QBO forms
   - Updated form registry documentation
   - Enhanced workflow system documentation

The changes enable consistent form definitions across tenants while allowing tenant-specific customizations when needed. The QBO invoice sync workflow now provides better error handling and user guidance through specialized forms.

BREAKING CHANGE: Database schema changes require running migrations. Existing workflow tasks may need to be recreated due to schema changes in workflow_tasks table.

"Alright, you primitive screwheads, listen up! üó£Ô∏è I got tired of every damn ghoul scribblin' their own return-to-hell forms on greasy napkins! ÔøΩÔøΩ So I whipped up these new 'System Scrolls' ‚Äì one template to rule 'em all! ‚ú® Even those bean-counting QBO demons üëπ get their own fancy error parchments now when they mess up an invoice! üßæüí• It's a whole new world of organized evil, so don't go cryin' to Ash if your old spells to summon a refund don't work! Groovy! ü§ò" - Ash, Housewares.

- **feat: enhance mapDbInvoiceToWasmViewModel for improved type handling and error logging**
- **feat: Add specialized forms for error handling in QBO workflows**
- **feat: Enhance invoice item retrieval and form descriptions.**
- **Refactor workflow task definitions and migrations**
- **Refactor QBO workflow and form registry for improved efficiency**
- **feat: Enhance QBO invoice sync workflow with UI improvements**
- **refactor: Remove deprecated QBO error forms and registration script**
- **chore: remove unused task definitions**

----------------------------------------
Commit: 2e2085a3
Author: Robert Isaacs
Date: 2025-05-11 22:30:40
Subject: chore: remove unused task definitions

Comment:

----------------------------------------
Commit: f722196c
Author: Robert Isaacs
Date: 2025-05-11 22:26:54
Subject: refactor: Remove deprecated QBO error forms and registration script

Comment:

----------------------------------------
Commit: b41779cf
Author: Robert Isaacs
Date: 2025-05-11 22:22:56
Subject: feat: Enhance QBO invoice sync workflow with UI improvements

Comment:
This commit introduces several UI enhancements to the QBO invoice sync workflow, including:

- Adds AlertWidget, ButtonLinkWidget, and HighlightWidget for improved user guidance and clarity within dynamic forms.
- Updates the QBO workflow schema to streamline the mapping creation process, focusing on essential fields and improving instructions.
- Modifies the default instructions and product details to provide more context and guidance for users creating mappings.
- Introduces templateUtils for dynamic string replacement in workflow messages.
- Updates ActivityDetailViewerDrawer and DynamicForm components to leverage the new widgets and improve the overall user experience.

----------------------------------------
Commit: 41e74068
Author: Robert Isaacs
Date: 2025-05-11 19:07:07
Subject: Refactor QBO workflow and form registry for improved efficiency

Comment:
This commit consolidates and refactors the QBO workflow schema, form registry, and task definitions for improved efficiency and clarity. It introduces a new migration to consolidate the QBO workflow schema and adds a task type to workflow task definitions. The form registry logic is updated to leverage the `form_type` field in task definitions for direct form lookup, avoiding unnecessary fallback queries.  Outdated migrations are removed. Documentation is updated to reflect these changes.

----------------------------------------
Commit: ce495cae
Author: Robert Isaacs
Date: 2025-05-10 22:47:11
Subject: Refactor workflow task definitions and migrations

Comment:
- Removed task definition insertion logic from the add_qbo_invoice_sync_forms migration, delegating it to a new migration (refactor_system_task_definitions).
- Created a new migration to handle the creation and population of system_workflow_task_definitions.
- Added a migration to correct the form_id for the QBO mapping error task definition.
- Updated task submission logic to differentiate between system and tenant task definitions, ensuring proper retrieval and handling of task definitions.
- Modified the task inbox service to accommodate the new dual foreign key structure for task definitions.
- Updated the workflow task model to reflect changes in task definition handling, including the removal of the old task_definition_id field and the introduction of tenant_task_definition_id and system_task_definition_task_type.

----------------------------------------
Commit: 09194080
Author: Robert Isaacs
Date: 2025-05-10 19:57:07
Subject: feat: Enhance invoice item retrieval and form descriptions.

Comment:

----------------------------------------
Commit: 1a22da31
Author: Robert Isaacs
Date: 2025-05-09 19:17:49
Subject: feat: Add specialized forms for error handling in QBO workflows

Comment:
- Introduced `secretFetchErrorForm` and `workflowExecutionErrorForm` to handle specific error scenarios.
- Created `qboInvoiceSyncTaskDefinitions` to define tasks related to QBO invoice synchronization, including error handling tasks.
- Updated `qboCustomerSyncWorkflow` and `qboInvoiceSyncWorkflow` to utilize new forms and task definitions, enhancing error reporting and user context logging.
- Registered new forms and tasks in `register-qbo-forms.ts` for proper integration into the system.
- Enhanced `FormRegistry` and related models to support tenant-specific and system forms, ensuring robust form management.

----------------------------------------
Commit: 3f8d0e1f
Author: NatalliaBukhtsik
Date: 2025-05-09 17:00:13
Subject: Merge pull request #479 from Nine-Minds/ad_hoc_for_timesheet

Comment:
Implemented ad-hoc work item time entry automation and UI improvements:
----------------------------------------
Commit: a030ca7f
Author: Natallia Bukhtsik
Date: 2025-05-09 16:55:11
Subject: Implemented ad-hoc work item time entry automation and UI improvements:

Comment:
Added automatic time entry creation for ad-hoc work items with zero billable duration
Modified Documents component to reset creation state when selecting existing docs
Enhanced TechnicianSidebar with rounded borders
Simplified TimeEntryEditForm by removing unused tax region logic
Updated work item search to include ad-hoc items in all contexts
Added scheduled times to work item data structure
Impacts:

Changes time entry validation for ad-hoc items
Modifies work item search behavior
Updates UI components with styling improvements

"Now your ad hoc time entries flow like a river of chocolate in Wonka's factory! üç´üåä"

----------------------------------------
Commit: 83e8019e
Author: Robert Isaacs
Date: 2025-05-09 13:23:17
Subject: Merge pull request #478 from Nine-Minds/fix-invoice-preview

Comment:
feat: fix for invoice template preview due to data mapping issue
----------------------------------------
Commit: ce864c6b
Author: NatalliaBukhtsik
Date: 2025-05-09 13:22:19
Subject: Merge pull request #477 from Nine-Minds/doc_preview_download

Comment:
Doc preview download
----------------------------------------
Commit: 29a6db77
Author: Robert Isaacs
Date: 2025-05-09 13:16:03
Subject: feat: enhance mapDbInvoiceToWasmViewModel for improved type handling and error logging

Comment:

----------------------------------------
Commit: 1911f8ef
Author: Natallia Bukhtsik
Date: 2025-05-09 13:02:27
Subject: Added document sorting functionality and skeleton loading states

Comment:
Implemented sort controls in DocumentFilters component with default sort orders
Added sortBy and sortOrder fields to DocumentFilters interface
Modified documentActions.ts to handle sorting queries
Created DocumentsPageSkeleton component with skeleton loading states
Replaced loading spinners with skeleton components in Documents and page.tsx
Added default sort behavior (updated_at desc) when no sort specified
The changes improve UX with better loading states and allow users to sort documents by various fields. The sorting implementation maintains backward compatibility with existing queries.

"Off with their spinners!" cried the Mock Turtle, as we danced with skeletons and sorted documents by size like playing cards in the Queen's court. üêáüé©‚ô†Ô∏è

----------------------------------------
Commit: 9cdb131f
Author: Natallia Bukhtsik
Date: 2025-05-09 12:31:08
Subject: Refactor document handling and PDF generation system

Comment:
- Implemented DocumentHandlerRegistry with strategy pattern for different document types (BlockNote, Markdown, Text, PDF, Image, Office, Generic)
- Added BaseDocumentHandler with common functionality and specific handlers for each document type
- Created BrowserPoolService to manage Puppeteer instances efficiently
- Refactored PDFGenerationService to support both invoices and documents with tenant isolation
- Improved error handling and loading states across contact/document components
- Added standardized Pagination component to replace multiple custom implementations
- Implemented DocumentFilters component for consistent filtering UI

Impacts:

- More maintainable and extensible document handling system
- Better performance with browser pooling for PDF generation
- Consistent UI patterns for pagination and filtering
- Improved error states and loading indicators
- Better separation of concerns with document type handlers

Follow the yellow brick road of document handling, for we're not in Kansas anymore! üßô‚Äç‚ôÇÔ∏èüìÑ‚ú®

----------------------------------------
Commit: 1f643398
Author: Natallia Bukhtsik
Date: 2025-05-08 18:21:16
Subject: Improve document handling and blocknote conversion

Comment:
Update PDF generation to use Letter format with proper margins
Replace Loader2 spinner with custom CSS spinner in DocumentStorageCard
Enhance text preview with proper whitespace handling
Simplify document preview to return HTML directly
Optimize PDF thumbnail generation by removing fixed height
Refactor blocknote HTML conversion with recursive processing
Add proper indentation support for nested blocks
Improve list item handling with nested content support
Impact:

Better PDF formatting for US letter documents
More flexible document preview rendering
Improved nested content conversion from blocknote
Reduced external dependencies

üèóÔ∏è Building document excellence, one commit at a time!

----------------------------------------
Commit: a0fb826b
Author: Natallia Bukhtsik
Date: 2025-05-08 14:15:17
Subject: Implemented document pagination and enhanced filtering across document management components. Changes include:

Comment:
- Added pagination support to Documents, DocumentSelector and DocumentsPagination
- Enhanced filtering with date ranges, user selection and entity types
- Updated documentActions with paginated query methods
- Modified interfaces for paginated responses
- Improved performance with server-side pagination

Impacts:

- Requires updates to document listing components
- Changes document fetching patterns
- Adds new component dependencies

"Your files now flip pages like a caffeinated flipbook artist!" üìñ‚òï

----------------------------------------
Commit: c3e65d0b
Author: Natallia Bukhtsik
Date: 2025-05-08 11:18:12
Subject: Refactor document search and filtering with debounced search and improved state management

Comment:
Added debounced search functionality with 500ms delay
Replaced manual keypress handler with useEffect-based search triggering
Improved document filtering logic with separate display state
Added searchTermFromParent prop to Documents component
Updated import paths to use absolute imports consistently
Removed unused handleKeyPress function
The changes improve search performance and reduce unnecessary re-renders. The debounce prevents excessive API calls during typing.

"Under the sea, the documents danced with Sebastian, their state as perfectly synchronized as a coral reef chorus. Ursula herself couldn't have conjured more magical filtering spells!" üßú‚Äç‚ôÄÔ∏èüé∂üìú

----------------------------------------
Commit: 9cd34cfd
Author: Natallia Bukhtsik
Date: 2025-05-08 10:19:32
Subject: Enhanced document preview functionality with fallback to document\_id and improved error handling

Comment:
- Modified DocumentStorageCard to use document\_id as fallback when file\_id is missing
- Added comprehensive logging throughout document preview generation
- Implemented HTML-to-PNG rendering for in-app documents using Puppeteer
- Added support for BlockNote, Markdown and plain text document previews
- Improved cache handling with separate keys for different document types
- Added detailed error handling and fallback mechanisms

The changes significantly improve preview reliability. Performance impact should be minimal due to caching.

"Off with their file\_ids!" cried the Queen of Previewland, as the Cheshire Cache grinned from branch to branch. üìÑüé≠üêá

----------------------------------------
Commit: a4539801
Author: Natallia Bukhtsik
Date: 2025-05-07 20:43:14
Subject: Added PDF generation and enhanced document handling

Comment:
- Implemented PDF generation endpoint for text/markdown/BlockNote documents
- Added PDF download buttons in DocumentStorageCard and Documents components
- Improved document type handling in Document model queries
- Created BlockNote to HTML converter for PDF generation
- Added view/edit mode toggle in Documents drawer
- Enhanced document type detection and UI state management

Impacts:

- Requires puppeteer for PDF generation
- Adds new dependencies (marked, puppeteer)
- Changes document download behavior for text-based documents
- Modifies document model queries to include type info

"And with that, the documents grew wings and flew into PDF-land, where the Queen of Hearts demanded all text be properly aligned and the Mad Hatter insisted on colorful backgrounds!" üìÑüé©‚ô†Ô∏è

----------------------------------------
Commit: 23f1c92f
Author: Robert Isaacs
Date: 2025-05-09 12:06:08
Subject: Merge branch 'main' of https://github.com/nine-minds/alga-psa

Comment:

----------------------------------------
Commit: 5f4bcea8
Author: Robert Isaacs
Date: 2025-05-09 12:02:57
Subject: Merge pull request #476 from Nine-Minds/workflow-qbo-integration-fixups

Comment:
This update improves the user experience and functionality of the automation hub components, focusing on event catalog display, workflow management, and template library features.

- Display workflow name and version in event attachments for better identification
- Improve badge styling for active/inactive and system-managed workflows
- Add support for retrieving system events alongside tenant events

- Enhance UI for workflow listings with better styling and interaction
- Add workflow versioning capabilities with a dedicated dialog
- Implement row-level click for editing workflows
- Improve workflow status toggling with appropriate visual feedback
- Update query structure to properly retrieve workflow information from both tenant and system databases

- Add "Coming Soon" overlay for template features that are not yet available
- Disable template cards and buttons for future functionality
- Improve parameter mapping UI with a clean "coming soon" message

- Set Monaco editor theme to 'vs-dark' for better readability

- Update database access patterns to properly retrieve workflow definitions from both system and tenant tables
- Fix function parameter order in workflow registration model calls
- Enhance event catalog model to support system and tenant events

This update provides a more polished user experience while preparing for future functionality.

"I must admire this system's... perfect structure. üß¨ The workflow management has evolved into quite the specimen. One might say its version control capabilities are... almost perfect. Not a drop of inefficiency to be found. üî¨ The template library's 'Coming Soon' state reminds me of our stasis chambers - dormant but full of potential. Quite admirable, really. The crew doesn't understand what a true marvel of engineering we're observing. üõ∏ I've made special note of these system-tenant database queries in my personal records. Fascinating organisms... err, algorithms." ‚Äî Ash, Science Officer ü§ñ

- **refactor: fix event catalog and workflow list querying logic to handle system and tenant events**
- **refactor: fix workflow definition retrieval to include tenant and system database checks**
- **feat: enable editing of non-system managed workflows on row click in Workflows component**
- **feat: enhance workflow event attachment model to include workflow name and version, and update related queries**
- **feat: disable parameter mapping tab and add overlay message for upcoming feature**
- **feat: add "Coming Soon" overlay and disable template actions in TemplateLibrary component**
- **feat: update styling for workflow buttons and badges to use primary and success color schemes**
- **feat: prevent event propagation and default action on workflow toggle buttons**
- **feat: replace Checkbox with SwitchWithLabel for show inactive workflows toggle**

----------------------------------------
Commit: 777cc7b8
Author: Robert Isaacs
Date: 2025-05-09 12:02:57
Subject: Merge pull request #476 from Nine-Minds/workflow-qbo-integration-fixups

Comment:
feat: Enhanced Event Catalog and Workflow Management
----------------------------------------
Commit: c593228c
Author: Robert Isaacs
Date: 2025-05-09 11:57:56
Subject: feat: fix compilation

Comment:

----------------------------------------
Commit: 8c724ee4
Author: Robert Isaacs
Date: 2025-05-09 11:37:06
Subject: feat: replace Checkbox with SwitchWithLabel for show inactive workflows toggle

Comment:

----------------------------------------
Commit: 99578e6b
Author: Robert Isaacs
Date: 2025-05-09 11:33:34
Subject: feat: prevent event propagation and default action on workflow toggle buttons

Comment:

----------------------------------------
Commit: e7d1057d
Author: Robert Isaacs
Date: 2025-05-09 11:29:56
Subject: feat: update styling for workflow buttons and badges to use primary and success color schemes

Comment:

----------------------------------------
Commit: 79492466
Author: Robert Isaacs
Date: 2025-05-09 11:25:16
Subject: feat: add "Coming Soon" overlay and disable template actions in TemplateLibrary component

Comment:
feat: workflow editor dark mode

----------------------------------------
Commit: 79b7de84
Author: Robert Isaacs
Date: 2025-05-09 11:20:55
Subject: feat: disable parameter mapping tab and add overlay message for upcoming feature

Comment:

----------------------------------------
Commit: c3fd6b5d
Author: Robert Isaacs
Date: 2025-05-09 11:14:21
Subject: feat: enhance workflow event attachment model to include workflow name and version, and update related queries

Comment:
feat: fix the workflow screen to open the version dialog properly

----------------------------------------
Commit: cf83289d
Author: Robert Isaacs
Date: 2025-05-09 10:31:56
Subject: feat: enable editing of non-system managed workflows on row click in Workflows component

Comment:

----------------------------------------
Commit: b6034857
Author: Robert Isaacs
Date: 2025-05-09 09:59:35
Subject: refactor: fix workflow definition retrieval to include tenant and system database checks

Comment:
we can now see workflow history for system and tenant specific workflows

----------------------------------------
Commit: 2675bb20
Author: Robert Isaacs
Date: 2025-05-09 09:50:38
Subject: refactor: fix event catalog and workflow list querying logic to handle system and tenant events

Comment:

----------------------------------------
Commit: cd657cd4
Author: Robert Isaacs
Date: 2025-05-08 14:09:48
Subject: Merge pull request #475 from Nine-Minds/workflow-qbo-updates

Comment:
feat(workflow): implement system workflows with multi-realm QBO support
----------------------------------------
Commit: ea5fce2f
Author: Robert Isaacs
Date: 2025-05-08 14:04:10
Subject: refactor: update CredentialsProvider to dynamically import getAdminConnection and comment out Keycloak credentials

Comment:

----------------------------------------
Commit: 0eebb217
Author: Robert Isaacs
Date: 2025-05-08 11:46:59
Subject: fix: ensure newline at end of file and define runtime as 'nodejs' in validate-api-key route

Comment:

----------------------------------------
Commit: f707768f
Author: Robert Isaacs
Date: 2025-05-08 11:40:39
Subject: refactor: remove copy-webpack-plugin references from package.json and next.config.mjs

Comment:

----------------------------------------
Commit: ae2638b0
Author: Robert Isaacs
Date: 2025-05-08 11:35:32
Subject: feat: define runtime as 'nodejs' in NextAuth route

Comment:

----------------------------------------
Commit: 14e51ff7
Author: Robert Isaacs
Date: 2025-05-08 11:29:45
Subject: refactor: remove dynamic export from auth route and add knex configuration file

Comment:

----------------------------------------
Commit: e82f733d
Author: Robert Isaacs
Date: 2025-05-08 11:14:22
Subject: refactor: update db and consumer group retrieval to use a function for dynamic config access

Comment:

----------------------------------------
Commit: 3e9ca4c9
Author: Robert Isaacs
Date: 2025-05-08 10:22:40
Subject: refactor: consolidate dynamic export in auth and chat stream routes

Comment:

----------------------------------------
Commit: 60512f1e
Author: Robert Isaacs
Date: 2025-05-08 10:07:32
Subject: fix: return empty string for undefined app secret in FileSystemSecretProvider

Comment:

----------------------------------------
Commit: 6275a245
Author: Robert Isaacs
Date: 2025-05-08 09:53:52
Subject: Merge branch 'workflow-qbo-updates' of https://github.com/nine-minds/alga-psa into workflow-qbo-updates

Comment:

----------------------------------------
Commit: 3472c58d
Author: Robert Isaacs
Date: 2025-05-08 09:52:35
Subject: refactor: add dynamic export to QBO connect and callback routes

Comment:

----------------------------------------
Commit: a24ecf9d
Author: Robert Isaacs (aider)
Date: 2025-05-08 09:34:52
Subject: refactor: update QBO connect route for dynamic Next.js API route

Comment:

----------------------------------------
Commit: cf60c2ff
Author: Robert Isaacs
Date: 2025-05-08 09:34:50
Subject: refactor: simplify QBO connect route by removing unused params

Comment:

----------------------------------------
Commit: abd499a3
Author: Robert Isaacs (aider)
Date: 2025-05-08 09:34:34
Subject: refactor: Update QBO connect route to support dynamic API routing

Comment:

----------------------------------------
Commit: 64a6b20e
Author: Robert Isaacs
Date: 2025-05-08 09:34:32
Subject: refactor: simplify QBO connect route and remove unused params

Comment:

----------------------------------------
Commit: cc40cafb
Author: Robert Isaacs (aider)
Date: 2025-05-08 09:34:02
Subject: feat: make QBO connect route dynamic with params support

Comment:

----------------------------------------
Commit: 0f112d12
Author: Robert Isaacs
Date: 2025-05-08 09:33:57
Subject: feat: add dynamic AI comment to QBO connect route

Comment:

----------------------------------------
Commit: 65c02f23
Author: Robert Isaacs
Date: 2025-05-08 08:55:19
Subject: refactor: Clean up QBO Invoice Sync Workflow and enhance logging

Comment:

----------------------------------------
Commit: e5302551
Author: Robert Isaacs
Date: 2025-05-07 23:49:17
Subject: Refactor QBO Invoice Sync Workflow and Update Mapping Actions

Comment:
- Updated AlgaInvoiceItem type to use service_id instead of product_id.
- Modified lookupQboItemId action to return a structured response.
- Introduced get_external_entity_mapping action to retrieve external mappings.
- Enhanced qboInvoiceSyncWorkflow to handle customer ID resolution and mapping checks.
- Improved error handling and logging for mapping failures and workflow errors.
- Updated registerWorkflowActions to include new actions for updating company QBO details and retrieving external entity mappings.
- Refined update_invoice_qbo_details action to handle updates more gracefully and log appropriately.

----------------------------------------
Commit: 9ea8b572
Author: Robert Isaacs
Date: 2025-05-07 21:15:26
Subject: feat: Enhance QBO integration actions and error handling

Comment:
- Implemented actions for creating, updating, and retrieving QBO customers.
- Added error handling and logging improvements for QBO API interactions.
- Enhanced existing actions for invoices and companies to fetch data from the database.
- Introduced correlation ID support for better tracking of workflow executions.
- Added a new action to retrieve secrets for tenant-specific configurations.
- Updated workflow execution interface to include correlation ID.

----------------------------------------
Commit: 9a164d58
Author: Robert Isaacs
Date: 2025-05-07 13:08:08
Subject: refactor: Enhance QBO integration by adding realmId retrieval and improving logging in invoice processing

Comment:
fixed several issues related to workflow execution, and provided dummy implementations of various calls to get end-to-end dummy qbo sync working.

----------------------------------------
Commit: f829a0f3
Author: Robert Isaacs (aider)
Date: 2025-05-07 12:40:58
Subject: refactor: Limit logging of compiled JavaScript code in workflow function deserialization

Comment:

----------------------------------------
Commit: f93de8f8
Author: Robert Isaacs
Date: 2025-05-07 12:40:56
Subject: refactor: add logging for workflow function deserialization length and code

Comment:

----------------------------------------
Commit: 6b1a34c5
Author: Robert Isaacs (aider)
Date: 2025-05-07 12:37:13
Subject: refactor: limit workflow function log output to first 100 characters

Comment:

----------------------------------------
Commit: 31782af4
Author: Robert Isaacs
Date: 2025-05-07 12:37:11
Subject: refactor: Modify workflow function deserialization logging to limit function string length

Comment:

----------------------------------------
Commit: ab982379
Author: Robert Isaacs (aider)
Date: 2025-05-07 09:54:24
Subject: refactor: treat blank provider secrets as undefined in getSecret

Comment:

----------------------------------------
Commit: 6599d430
Author: Robert Isaacs
Date: 2025-05-07 09:54:22
Subject: fix: handle blank provider secrets by treating them as undefined

Comment:

----------------------------------------
Commit: 07d98aa8
Author: Robert Isaacs
Date: 2025-05-06 22:08:22
Subject: feat: Enhance workflow system with tenant-specific triggering and event handling

Comment:
- Updated workflow system documentation to clarify tenant-specific triggering for system workflows.
- Added placeholder migration for missing initial system workflows.
- Created migration to drop 'definition' column from 'system_workflow_registrations'.
- Introduced ENUM type for 'workflow_execution_type' and modified 'workflow_executions' table to include 'workflow_type'.
- Refactored invoice modification action to utilize EventBus instead of Redis directly.
- Adjusted workflow editor actions to filter by 'workflow_type'.
- Enhanced EventBus to log workflow events before stringification.
- Updated WorkflowWorker to handle tenant and system workflows distinctly.
- Modified workflow runtime to require tenant ID for non-system managed workflows.
- Updated persistence models to reflect changes in workflow registration and execution structures.
- Made 'amount' in InvoiceEventPayloadSchema optional for flexibility.
- Adjusted event schemas to make 'execution_id' optional for new workflow triggers.

----------------------------------------
Commit: 859729f8
Author: Robert Isaacs
Date: 2025-05-08 08:55:19
Subject: refactor: Clean up QBO Invoice Sync Workflow and enhance logging

Comment:

----------------------------------------
Commit: 9b2dc827
Author: Robert Isaacs
Date: 2025-05-07 23:49:17
Subject: Refactor QBO Invoice Sync Workflow and Update Mapping Actions

Comment:
- Updated AlgaInvoiceItem type to use service_id instead of product_id.
- Modified lookupQboItemId action to return a structured response.
- Introduced get_external_entity_mapping action to retrieve external mappings.
- Enhanced qboInvoiceSyncWorkflow to handle customer ID resolution and mapping checks.
- Improved error handling and logging for mapping failures and workflow errors.
- Updated registerWorkflowActions to include new actions for updating company QBO details and retrieving external entity mappings.
- Refined update_invoice_qbo_details action to handle updates more gracefully and log appropriately.

----------------------------------------
Commit: f67f2b66
Author: Robert Isaacs
Date: 2025-05-07 21:15:26
Subject: feat: Enhance QBO integration actions and error handling

Comment:
- Implemented actions for creating, updating, and retrieving QBO customers.
- Added error handling and logging improvements for QBO API interactions.
- Enhanced existing actions for invoices and companies to fetch data from the database.
- Introduced correlation ID support for better tracking of workflow executions.
- Added a new action to retrieve secrets for tenant-specific configurations.
- Updated workflow execution interface to include correlation ID.

----------------------------------------
Commit: 05e56ad5
Author: Robert Isaacs
Date: 2025-05-07 13:08:08
Subject: refactor: Enhance QBO integration by adding realmId retrieval and improving logging in invoice processing

Comment:
fixed several issues related to workflow execution, and provided dummy implementations of various calls to get end-to-end dummy qbo sync working.

----------------------------------------
Commit: 4cb0cf22
Author: Robert Isaacs (aider)
Date: 2025-05-07 12:40:58
Subject: refactor: Limit logging of compiled JavaScript code in workflow function deserialization

Comment:

----------------------------------------
Commit: d8058044
Author: Robert Isaacs
Date: 2025-05-07 12:40:56
Subject: refactor: add logging for workflow function deserialization length and code

Comment:

----------------------------------------
Commit: f8858f50
Author: Robert Isaacs (aider)
Date: 2025-05-07 12:37:13
Subject: refactor: limit workflow function log output to first 100 characters

Comment:

----------------------------------------
Commit: 74ccf4ec
Author: Robert Isaacs
Date: 2025-05-07 12:37:11
Subject: refactor: Modify workflow function deserialization logging to limit function string length

Comment:

----------------------------------------
Commit: fd74e0ed
Author: Robert Isaacs (aider)
Date: 2025-05-07 09:54:24
Subject: refactor: treat blank provider secrets as undefined in getSecret

Comment:

----------------------------------------
Commit: 8ad29ad8
Author: Robert Isaacs
Date: 2025-05-07 09:54:22
Subject: fix: handle blank provider secrets by treating them as undefined

Comment:

----------------------------------------
Commit: e4fd9921
Author: Robert Isaacs
Date: 2025-05-06 22:08:22
Subject: feat: Enhance workflow system with tenant-specific triggering and event handling

Comment:
- Updated workflow system documentation to clarify tenant-specific triggering for system workflows.
- Added placeholder migration for missing initial system workflows.
- Created migration to drop 'definition' column from 'system_workflow_registrations'.
- Introduced ENUM type for 'workflow_execution_type' and modified 'workflow_executions' table to include 'workflow_type'.
- Refactored invoice modification action to utilize EventBus instead of Redis directly.
- Adjusted workflow editor actions to filter by 'workflow_type'.
- Enhanced EventBus to log workflow events before stringification.
- Updated WorkflowWorker to handle tenant and system workflows distinctly.
- Modified workflow runtime to require tenant ID for non-system managed workflows.
- Updated persistence models to reflect changes in workflow registration and execution structures.
- Made 'amount' in InvoiceEventPayloadSchema optional for flexibility.
- Adjusted event schemas to make 'execution_id' optional for new workflow triggers.

----------------------------------------
Commit: b2ee462e
Author: Robert Isaacs
Date: 2025-05-06 14:00:14
Subject: Merge pull request #472 from Nine-Minds/fix-symbolic-link-logic

Comment:
fix: enhance symbolic link creation logic in compileAndSaveTemplate f‚Ä¶
----------------------------------------
Commit: f03118c3
Author: Robert Isaacs
Date: 2025-05-06 13:54:52
Subject: fix: enhance symbolic link creation logic in compileAndSaveTemplate function

Comment:

----------------------------------------
Commit: 6be17545
Author: Robert Isaacs
Date: 2025-05-06 13:39:53
Subject: Merge pull request #471 from Nine-Minds/fix_temp_wasm_creation

Comment:
fix: simplify error handling for temporary directory creation in comp‚Ä¶
----------------------------------------
Commit: 67d6b814
Author: Robert Isaacs
Date: 2025-05-06 13:32:29
Subject: fix: simplify error handling for temporary directory creation in compileAndSaveTemplate function

Comment:

----------------------------------------
Commit: eef9771b
Author: NatalliaBukhtsik
Date: 2025-05-06 13:22:22
Subject: Merge pull request #470 from Nine-Minds/update_again

Comment:
Update again
----------------------------------------
Commit: eb6b8c44
Author: Robert Isaacs
Date: 2025-05-06 13:21:45
Subject: Merge pull request #469 from Nine-Minds/wasm_compile_path_fix

Comment:
fix: improve temp directory creation logic in compileAndSaveTemplate ‚Ä¶
----------------------------------------
Commit: 0f77b180
Author: Robert Isaacs
Date: 2025-05-06 13:16:21
Subject: fix: improve temp directory creation logic in compileAndSaveTemplate function

Comment:

----------------------------------------
Commit: 6fb1e44c
Author: Natallia Bukhtsik
Date: 2025-05-06 13:03:48
Subject: fix for migrations

Comment:

----------------------------------------
Commit: 4dbe0684
Author: Natallia Bukhtsik
Date: 2025-05-06 12:08:50
Subject: more update changes

Comment:

----------------------------------------
Commit: 7a1147c5
Author: NatalliaBukhtsik
Date: 2025-05-06 11:57:45
Subject: Merge pull request #468 from Nine-Minds/update_fixes

Comment:
Update fixes
----------------------------------------
Commit: 750b0e99
Author: Natallia Bukhtsik
Date: 2025-05-06 11:50:08
Subject: use tenant from knex for companies

Comment:

----------------------------------------
Commit: 52488ec2
Author: Robert Isaacs
Date: 2025-05-06 11:39:51
Subject: Merge pull request #467 from Nine-Minds/quickbooks-integration

Comment:
feat(integrations): implement QuickBooks Online integration with secure token storage üé©‚ú®
----------------------------------------
Commit: 66116c14
Author: Robert Isaacs
Date: 2025-05-06 11:28:33
Subject: feat(events): Refactor event attachment retrieval to use event type and remove system event restrictions

Comment:

----------------------------------------
Commit: afbca09c
Author: Robert Isaacs
Date: 2025-05-06 11:02:40
Subject: feat(workflow): Enhance workflow registration queries to include additional fields and system management flag

Comment:

----------------------------------------
Commit: 12ea90d3
Author: Natallia Bukhtsik
Date: 2025-05-06 10:38:26
Subject: eighth

Comment:

----------------------------------------
Commit: bcef23ce
Author: Natallia Bukhtsik
Date: 2025-05-06 10:35:48
Subject: seventh

Comment:

----------------------------------------
Commit: 7becd8fe
Author: Natallia Bukhtsik
Date: 2025-05-06 10:34:40
Subject: fifth

Comment:

----------------------------------------
Commit: b552da04
Author: Natallia Bukhtsik
Date: 2025-05-06 10:31:41
Subject: fourth

Comment:

----------------------------------------
Commit: 1460598c
Author: Robert Isaacs
Date: 2025-05-06 10:26:31
Subject: feat(invoice): Emit INVOICE_UPDATED event after manual invoice updates

Comment:

----------------------------------------
Commit: 06206956
Author: Natallia Bukhtsik
Date: 2025-05-06 10:24:25
Subject: third

Comment:

----------------------------------------
Commit: ccdd2ca6
Author: Natallia Bukhtsik
Date: 2025-05-06 10:10:53
Subject: second

Comment:

----------------------------------------
Commit: e5fe601a
Author: Natallia Bukhtsik
Date: 2025-05-06 09:58:49
Subject: first

Comment:

----------------------------------------
Commit: 7ad6d3ed
Author: Robert Isaacs
Date: 2025-05-06 08:23:06
Subject: Merge branch 'quickbooks-integration' of https://github.com/nine-minds/alga-psa into quickbooks-integration

Comment:

----------------------------------------
Commit: 7e778f15
Author: Robert Isaacs
Date: 2025-05-05 22:12:58
Subject: feat(workflow): Update event schemas for QBO integration and add company event payload

Comment:

----------------------------------------
Commit: e82fbbd4
Author: Robert Isaacs
Date: 2025-05-05 21:41:17
Subject: feat(settings): Add Integrations tab and QBO integration settings

Comment:
- Introduced a new Integrations tab in the SettingsPage component.
- Integrated QboIntegrationSettings component to handle QuickBooks Online integration.
- Updated state management for active tabs to prevent unnecessary re-renders.
- Enhanced URL parameter handling for OAuth redirects in QboIntegrationSettings.
- Improved error and success message handling based on URL parameters.
- Added conditional rendering for QBO mapping manager based on connection status.

refactor(qboActions): Streamline QBO actions and improve error handling

- Removed placeholder secret provider instance and replaced with actual instance retrieval.
- Simplified connection status fetching logic and improved error handling.
- Updated methods to use tenant ID directly from the context instead of user session.

fix(workflow-event-actions): Validate event types against catalogs

- Added validation to ensure event types exist in both tenant and system catalogs before publishing events.
- Updated logging for better traceability of event publishing actions.

refactor(workflow-event-attachment-actions): Update event attachment methods

- Renamed methods to reflect changes from event_id to event_type.
- Improved logic for creating and retrieving workflow event attachments based on event type.
- Enhanced subscription and unsubscription logic to use event_type directly.

chore(models): Remove is_system_event from event catalog model

- Removed is_system_event property from event catalog entries as part of the system event catalog introduction.
- Updated related interfaces and schemas to reflect this change.

test(workflow): Ensure workflow event attachment methods handle event types correctly

- Updated tests to verify that event attachments are created and retrieved using event_type.
- Ensured that all references to event_id are replaced with event_type in tests.

----------------------------------------
Commit: b0c0d649
Author: Robert Isaacs
Date: 2025-05-05 11:16:38
Subject: fix secrets path resolution

Comment:

----------------------------------------
Commit: e1118a64
Author: Robert Isaacs
Date: 2025-05-02 22:32:04
Subject: Phase 2 Partial Implementation:

Comment:
I have created the core workflow actions and supporting files required for QuickBooks Online integration as outlined in Phase 2 of the project plan.

Files Created/Modified:

server/src/lib/actions/qbo/types.ts: Defined TypeScript interfaces for QBO objects based on project plan mappings.
server/src/lib/actions/qbo/qboUtils.ts: Created utility functions with placeholders for making QBO API calls (callQboApi), retrieving tenant-specific credentials (getTenantQboCredentials), handling API errors (handleQboApiError), and implementing Redis-based locking/throttling.
server/src/lib/actions/qbo/qboCustomerActions.ts: Implemented qbo:createCustomer, qbo:updateCustomer, and qbo:getCustomer actions. Placeholders added for QBO Term ID lookup.
server/src/lib/actions/qbo/qboInvoiceActions.ts: Implemented qbo:createInvoice and qbo:updateInvoice actions. Placeholders added for QBO Item ID and Tax Code ID lookups within line items.
server/src/lib/actions/externalMappingActions.ts: Implemented the generic external:lookupEntityId action to query the tenant_external_entity_mappings table.
server/src/lib/actions/qbo/qboLookupActions.ts: Implemented specific lookup actions (qbo:lookupItemId, qbo:lookupTaxCodeId, qbo:lookupTermId) which conceptually wrap the generic lookup action (currently simulated).
Key Functionalities Implemented (Structurally):

Action definitions and registration for creating, updating, and querying QBO Customers and Invoices.
Generic mechanism for looking up external entity IDs based on Alga IDs.
Specific lookup actions for QBO Items, Tax Codes, and Terms.
Basic structure for tenant isolation within actions using ActionExecutionContext.
Challenges/Decisions/TODOs:

Action-to-Action Calls: The ActionExecutionContext provided to action functions does not include context.actions. This prevents the specific lookup actions (qbo:lookupItemId, etc.) from directly calling the generic external:lookupEntityId action as initially planned. The lookups within create/update actions are currently placeholders requiring either direct DB logic or an alternative mechanism for inter-action calls.
Placeholders: Significant logic remains as placeholders (TODO comments) within qboUtils.ts and the create/update actions, including:
Actual HTTP client implementation for callQboApi.
Integration with the ISecretProvider for getTenantQboCredentials.
Redis implementation for locking and throttling.
Robust error handling (retries) and human task creation for missing mappings.
Fair Queuing: This aspect of Phase 2 relates to the workflow dispatcher/worker architecture and was not addressed within the action implementations themselves.
Coding Standards:

Code structure follows the patterns observed in the existing server/src/lib/actions directory.
Actions are registered using the ActionRegistry from @shared/workflow/core/actionRegistry.
TypeScript types and interfaces are used for parameters and QBO objects.
Tenant context is handled via ActionExecutionContext.

----------------------------------------
Commit: b2231636
Author: Robert Isaacs
Date: 2025-05-04 23:00:24
Subject: feat(cli): Enhance migration CLI with color-coded output and new workflow commands

Comment:
- Added color constants for improved terminal output.
- Updated migration messages to use color formatting for better visibility.
- Introduced `load-db-env` function to load database environment variables.
- Added `update-workflow` and `register-workflow` commands for managing workflows.
- Implemented checks for existing workflow versions before registration.
- Enhanced feedback messages for workflow registration and updates.

refactor(migrations): Modify workflow registration schema

- Changed `definition` column to `code` in `system_workflow_registration_versions` to store executable function strings.
- Added migrations to alter existing columns and ensure data integrity.
- Implemented population of new `code` column from existing `definition` data.

fix(seeds): Update seed data to align with new schema

- Adjusted seed data to store executable function strings in the `code` column instead of JSON strings.

refactor(actions): Update workflow actions to use new schema

- Modified workflow creation and update actions to utilize the new `code` field.
- Updated retrieval functions to fetch workflow code from the new structure.

chore(utils): Enhance template code extraction logic

- Improved `extractTemplateCode` function to handle both string and object definitions.
- Added checks for backward compatibility with existing `executeFn` properties.

fix(runtime): Update workflow runtime to use new code structure

- Adjusted workflow runtime logic to fetch and utilize the new `code` field from version records.
- Ensured proper handling of workflow definitions and metadata.

chore(model): Clean up workflow registration model

- Removed unused `definition` references in the workflow registration model.

----------------------------------------
Commit: 71c545b0
Author: Robert Isaacs
Date: 2025-05-04 13:56:52
Subject: worfklows are to be registered with the workflow system

Comment:

----------------------------------------
Commit: c74a3b44
Author: Robert Isaacs
Date: 2025-05-04 11:48:36
Subject: feat(qbo): Enhance QBO integration with workflow event attachment management and cleanup

Comment:

----------------------------------------
Commit: a998ba68
Author: Robert Isaacs
Date: 2025-05-03 23:01:29
Subject: feat(secrets): Implement FileSystem and Vault secret providers

Comment:
- Added FileSystemSecretProvider to manage secrets stored in the local filesystem.
- Introduced ISecretProvider interface to standardize secret provider implementations.
- Created VaultSecretProvider for retrieving secrets from HashiCorp Vault.
- Implemented a factory function to initialize the appropriate secret provider based on environment configuration.
- Enhanced error handling and logging for better traceability during secret retrieval and management.

----------------------------------------
Commit: 766b48dc
Author: Robert Isaacs
Date: 2025-05-03 19:07:55
Subject: feat(workflows): Implement QBO Customer and Invoice Sync Workflows

Comment:
- Added `qboCustomerSyncWorkflow` to synchronize Alga PSA Company data with QuickBooks Online Customer.
- Implemented `qboInvoiceSyncWorkflow` for syncing Alga PSA Invoices with QuickBooks Online.
- Introduced error handling and human task creation for various failure scenarios in both workflows.
- Defined placeholder types and actions for better type safety and clarity.
- Enhanced logging for better traceability during workflow execution.
- Created type definitions for `node-quickbooks` to facilitate interaction with the QuickBooks API.
- Updated `WorkflowContext` to include input data structure for better context management.

----------------------------------------
Commit: d499840e
Author: Robert Isaacs
Date: 2025-05-02 22:32:04
Subject: Phase 2 Partial Implementation:

Comment:
I have created the core workflow actions and supporting files required for QuickBooks Online integration as outlined in Phase 2 of the project plan.

Files Created/Modified:

server/src/lib/actions/qbo/types.ts: Defined TypeScript interfaces for QBO objects based on project plan mappings.
server/src/lib/actions/qbo/qboUtils.ts: Created utility functions with placeholders for making QBO API calls (callQboApi), retrieving tenant-specific credentials (getTenantQboCredentials), handling API errors (handleQboApiError), and implementing Redis-based locking/throttling.
server/src/lib/actions/qbo/qboCustomerActions.ts: Implemented qbo:createCustomer, qbo:updateCustomer, and qbo:getCustomer actions. Placeholders added for QBO Term ID lookup.
server/src/lib/actions/qbo/qboInvoiceActions.ts: Implemented qbo:createInvoice and qbo:updateInvoice actions. Placeholders added for QBO Item ID and Tax Code ID lookups within line items.
server/src/lib/actions/externalMappingActions.ts: Implemented the generic external:lookupEntityId action to query the tenant_external_entity_mappings table.
server/src/lib/actions/qbo/qboLookupActions.ts: Implemented specific lookup actions (qbo:lookupItemId, qbo:lookupTaxCodeId, qbo:lookupTermId) which conceptually wrap the generic lookup action (currently simulated).
Key Functionalities Implemented (Structurally):

Action definitions and registration for creating, updating, and querying QBO Customers and Invoices.
Generic mechanism for looking up external entity IDs based on Alga IDs.
Specific lookup actions for QBO Items, Tax Codes, and Terms.
Basic structure for tenant isolation within actions using ActionExecutionContext.
Challenges/Decisions/TODOs:

Action-to-Action Calls: The ActionExecutionContext provided to action functions does not include context.actions. This prevents the specific lookup actions (qbo:lookupItemId, etc.) from directly calling the generic external:lookupEntityId action as initially planned. The lookups within create/update actions are currently placeholders requiring either direct DB logic or an alternative mechanism for inter-action calls.
Placeholders: Significant logic remains as placeholders (TODO comments) within qboUtils.ts and the create/update actions, including:
Actual HTTP client implementation for callQboApi.
Integration with the ISecretProvider for getTenantQboCredentials.
Redis implementation for locking and throttling.
Robust error handling (retries) and human task creation for missing mappings.
Fair Queuing: This aspect of Phase 2 relates to the workflow dispatcher/worker architecture and was not addressed within the action implementations themselves.
Coding Standards:

Code structure follows the patterns observed in the existing server/src/lib/actions directory.
Actions are registered using the ActionRegistry from @shared/workflow/core/actionRegistry.
TypeScript types and interfaces are used for parameters and QBO objects.
Tenant context is handled via ActionExecutionContext.

----------------------------------------
Commit: 06ca86b3
Author: Robert Isaacs
Date: 2025-05-02 18:57:58
Subject: Database: Created system_workflow_registrations, system_workflow_registration_versions, and system_workflow_event_attachments tables via migration server/migrations/20250502174700_create_system_workflow_definitions.cjs. Corrected an issue with partial index creation in this migration. Backend: Modified models (workflowRegistrationModel.ts, workflowEventAttachment.ts) and server actions (workflow-runtime-actions.ts, workflow-event-attachment-actions.ts, workflow-editor-actions.ts) to query both tenant and system tables, adding an isSystemManaged flag. Updated the workflow worker (WorkflowWorker.ts) to handle triggering both types of workflows based on events. Fixed a logger import issue in getSecret.ts that was causing build failures. Frontend: Updated UI components (Workflows.tsx, EventsCatalog.tsx) to use the isSystemManaged flag for visual distinction and disabling modification controls for system items. (Assumed complete based on previous task context). Seeding: Created an idempotent data migration (server/migrations/20250502181500_add_initial_system_workflows.cjs) to add the initial QBO system workflow definitions. Corrected an issue with array formatting for the tags column in this migration.

Comment:

----------------------------------------
Commit: 80133623
Author: Robert Isaacs
Date: 2025-05-02 17:35:47
Subject: migration for qbo entity mappings

Comment:

----------------------------------------
Commit: f5f20bb1
Author: Robert Isaacs
Date: 2025-05-02 17:31:58
Subject: qbo wip / implement pluggable secrets

Comment:

----------------------------------------
Commit: 0d356b58
Author: Robert Isaacs
Date: 2025-05-05 22:12:58
Subject: feat(workflow): Update event schemas for QBO integration and add company event payload

Comment:

----------------------------------------
Commit: f27c068b
Author: Robert Isaacs
Date: 2025-05-05 21:41:17
Subject: feat(settings): Add Integrations tab and QBO integration settings

Comment:
- Introduced a new Integrations tab in the SettingsPage component.
- Integrated QboIntegrationSettings component to handle QuickBooks Online integration.
- Updated state management for active tabs to prevent unnecessary re-renders.
- Enhanced URL parameter handling for OAuth redirects in QboIntegrationSettings.
- Improved error and success message handling based on URL parameters.
- Added conditional rendering for QBO mapping manager based on connection status.

refactor(qboActions): Streamline QBO actions and improve error handling

- Removed placeholder secret provider instance and replaced with actual instance retrieval.
- Simplified connection status fetching logic and improved error handling.
- Updated methods to use tenant ID directly from the context instead of user session.

fix(workflow-event-actions): Validate event types against catalogs

- Added validation to ensure event types exist in both tenant and system catalogs before publishing events.
- Updated logging for better traceability of event publishing actions.

refactor(workflow-event-attachment-actions): Update event attachment methods

- Renamed methods to reflect changes from event_id to event_type.
- Improved logic for creating and retrieving workflow event attachments based on event type.
- Enhanced subscription and unsubscription logic to use event_type directly.

chore(models): Remove is_system_event from event catalog model

- Removed is_system_event property from event catalog entries as part of the system event catalog introduction.
- Updated related interfaces and schemas to reflect this change.

test(workflow): Ensure workflow event attachment methods handle event types correctly

- Updated tests to verify that event attachments are created and retrieved using event_type.
- Ensured that all references to event_id are replaced with event_type in tests.

----------------------------------------
Commit: 172f825c
Author: NatalliaBukhtsik
Date: 2025-05-05 14:28:08
Subject: Merge pull request #466 from Nine-Minds/calendar_ui_improvements

Comment:
Calendar UI improvements
----------------------------------------
Commit: 71164d2e
Author: Natallia Bukhtsik
Date: 2025-05-05 14:22:48
Subject: Update sidebar widths and button labels for consistency

Comment:
Increased sidebar width from 48 to 64 units across TechnicianSidebar components
Changed "All" button label to "Compare All" for clarity
Adjusted ticket properties container width to be responsive based on drawer state
Refactored interval tracking imports to use absolute paths
Improved time entry creation with proper time period and sheet handling
Added error handling and toast notifications for time entry operations
Fixed button size inconsistency in TimeSheetTable
The changes improve UI consistency and reliability of time tracking functionality, particularly when converting intervals to time entries. The refactoring to absolute paths may require updates to any relative imports in dependent files.

"Curiouser and curiouser!" cried Alice as the sidebars stretched like taffy and time entries popped up like mushrooms after rain. üçÑ‚è±Ô∏èüêá

----------------------------------------
Commit: 24e28872
Author: Natallia Bukhtsik
Date: 2025-05-05 13:19:28
Subject: Refactor time entry billable duration logic and validation

Comment:
Improved handling of billable duration calculations across multiple components
Added validation and logging for time entry durations
Fixed company query optimization in companyActions
Enhanced schema validation with better error handling
Added console logging for debugging time entry creation and updates
Impacts:

More consistent billable time tracking
Better error handling for invalid time entries
Improved performance for company queries
Enhanced debugging capabilities for time tracking
Follow the yellow brick road to billable hours, where time entries are never late nor early, but arrive precisely when they mean to! ‚è≥üßô‚Äç‚ôÇÔ∏èüí∞

----------------------------------------
Commit: 593185cc
Author: Robert Isaacs
Date: 2025-05-05 11:16:38
Subject: fix secrets path resolution

Comment:

----------------------------------------
Commit: d483e593
Author: Robert Isaacs
Date: 2025-05-04 23:02:17
Subject: Merge branch 'quickbooks-integration' of https://github.com/nine-minds/alga-psa into quickbooks-integration

Comment:

----------------------------------------
Commit: 691a1b1d
Author: Robert Isaacs
Date: 2025-05-04 23:00:24
Subject: feat(cli): Enhance migration CLI with color-coded output and new workflow commands

Comment:
- Added color constants for improved terminal output.
- Updated migration messages to use color formatting for better visibility.
- Introduced `load-db-env` function to load database environment variables.
- Added `update-workflow` and `register-workflow` commands for managing workflows.
- Implemented checks for existing workflow versions before registration.
- Enhanced feedback messages for workflow registration and updates.

refactor(migrations): Modify workflow registration schema

- Changed `definition` column to `code` in `system_workflow_registration_versions` to store executable function strings.
- Added migrations to alter existing columns and ensure data integrity.
- Implemented population of new `code` column from existing `definition` data.

fix(seeds): Update seed data to align with new schema

- Adjusted seed data to store executable function strings in the `code` column instead of JSON strings.

refactor(actions): Update workflow actions to use new schema

- Modified workflow creation and update actions to utilize the new `code` field.
- Updated retrieval functions to fetch workflow code from the new structure.

chore(utils): Enhance template code extraction logic

- Improved `extractTemplateCode` function to handle both string and object definitions.
- Added checks for backward compatibility with existing `executeFn` properties.

fix(runtime): Update workflow runtime to use new code structure

- Adjusted workflow runtime logic to fetch and utilize the new `code` field from version records.
- Ensured proper handling of workflow definitions and metadata.

chore(model): Clean up workflow registration model

- Removed unused `definition` references in the workflow registration model.

----------------------------------------
Commit: bb413e6d
Author: Robert Isaacs
Date: 2025-05-04 13:56:52
Subject: worfklows are to be registered with the workflow system

Comment:

----------------------------------------
Commit: bd401256
Author: Robert Isaacs
Date: 2025-05-04 11:48:36
Subject: feat(qbo): Enhance QBO integration with workflow event attachment management and cleanup

Comment:

----------------------------------------
Commit: 129f4183
Author: Robert Isaacs
Date: 2025-05-03 23:01:29
Subject: feat(secrets): Implement FileSystem and Vault secret providers

Comment:
- Added FileSystemSecretProvider to manage secrets stored in the local filesystem.
- Introduced ISecretProvider interface to standardize secret provider implementations.
- Created VaultSecretProvider for retrieving secrets from HashiCorp Vault.
- Implemented a factory function to initialize the appropriate secret provider based on environment configuration.
- Enhanced error handling and logging for better traceability during secret retrieval and management.

----------------------------------------
Commit: b61a47d4
Author: Robert Isaacs
Date: 2025-05-03 19:07:55
Subject: feat(workflows): Implement QBO Customer and Invoice Sync Workflows

Comment:
- Added `qboCustomerSyncWorkflow` to synchronize Alga PSA Company data with QuickBooks Online Customer.
- Implemented `qboInvoiceSyncWorkflow` for syncing Alga PSA Invoices with QuickBooks Online.
- Introduced error handling and human task creation for various failure scenarios in both workflows.
- Defined placeholder types and actions for better type safety and clarity.
- Enhanced logging for better traceability during workflow execution.
- Created type definitions for `node-quickbooks` to facilitate interaction with the QuickBooks API.
- Updated `WorkflowContext` to include input data structure for better context management.

----------------------------------------
Commit: 4d95bed8
Author: Robert Isaacs
Date: 2025-05-02 22:32:04
Subject: Phase 2 Partial Implementation:

Comment:
I have created the core workflow actions and supporting files required for QuickBooks Online integration as outlined in Phase 2 of the project plan.

Files Created/Modified:

server/src/lib/actions/qbo/types.ts: Defined TypeScript interfaces for QBO objects based on project plan mappings.
server/src/lib/actions/qbo/qboUtils.ts: Created utility functions with placeholders for making QBO API calls (callQboApi), retrieving tenant-specific credentials (getTenantQboCredentials), handling API errors (handleQboApiError), and implementing Redis-based locking/throttling.
server/src/lib/actions/qbo/qboCustomerActions.ts: Implemented qbo:createCustomer, qbo:updateCustomer, and qbo:getCustomer actions. Placeholders added for QBO Term ID lookup.
server/src/lib/actions/qbo/qboInvoiceActions.ts: Implemented qbo:createInvoice and qbo:updateInvoice actions. Placeholders added for QBO Item ID and Tax Code ID lookups within line items.
server/src/lib/actions/externalMappingActions.ts: Implemented the generic external:lookupEntityId action to query the tenant_external_entity_mappings table.
server/src/lib/actions/qbo/qboLookupActions.ts: Implemented specific lookup actions (qbo:lookupItemId, qbo:lookupTaxCodeId, qbo:lookupTermId) which conceptually wrap the generic lookup action (currently simulated).
Key Functionalities Implemented (Structurally):

Action definitions and registration for creating, updating, and querying QBO Customers and Invoices.
Generic mechanism for looking up external entity IDs based on Alga IDs.
Specific lookup actions for QBO Items, Tax Codes, and Terms.
Basic structure for tenant isolation within actions using ActionExecutionContext.
Challenges/Decisions/TODOs:

Action-to-Action Calls: The ActionExecutionContext provided to action functions does not include context.actions. This prevents the specific lookup actions (qbo:lookupItemId, etc.) from directly calling the generic external:lookupEntityId action as initially planned. The lookups within create/update actions are currently placeholders requiring either direct DB logic or an alternative mechanism for inter-action calls.
Placeholders: Significant logic remains as placeholders (TODO comments) within qboUtils.ts and the create/update actions, including:
Actual HTTP client implementation for callQboApi.
Integration with the ISecretProvider for getTenantQboCredentials.
Redis implementation for locking and throttling.
Robust error handling (retries) and human task creation for missing mappings.
Fair Queuing: This aspect of Phase 2 relates to the workflow dispatcher/worker architecture and was not addressed within the action implementations themselves.
Coding Standards:

Code structure follows the patterns observed in the existing server/src/lib/actions directory.
Actions are registered using the ActionRegistry from @shared/workflow/core/actionRegistry.
TypeScript types and interfaces are used for parameters and QBO objects.
Tenant context is handled via ActionExecutionContext.

----------------------------------------
Commit: ebfd1163
Author: Robert Isaacs
Date: 2025-05-02 18:57:58
Subject: Database: Created system_workflow_registrations, system_workflow_registration_versions, and system_workflow_event_attachments tables via migration server/migrations/20250502174700_create_system_workflow_definitions.cjs. Corrected an issue with partial index creation in this migration. Backend: Modified models (workflowRegistrationModel.ts, workflowEventAttachment.ts) and server actions (workflow-runtime-actions.ts, workflow-event-attachment-actions.ts, workflow-editor-actions.ts) to query both tenant and system tables, adding an isSystemManaged flag. Updated the workflow worker (WorkflowWorker.ts) to handle triggering both types of workflows based on events. Fixed a logger import issue in getSecret.ts that was causing build failures. Frontend: Updated UI components (Workflows.tsx, EventsCatalog.tsx) to use the isSystemManaged flag for visual distinction and disabling modification controls for system items. (Assumed complete based on previous task context). Seeding: Created an idempotent data migration (server/migrations/20250502181500_add_initial_system_workflows.cjs) to add the initial QBO system workflow definitions. Corrected an issue with array formatting for the tags column in this migration.

Comment:

----------------------------------------
Commit: 6732a245
Author: Robert Isaacs
Date: 2025-05-02 17:35:47
Subject: migration for qbo entity mappings

Comment:

----------------------------------------
Commit: 17eeea28
Author: Robert Isaacs
Date: 2025-05-02 17:31:58
Subject: qbo wip / implement pluggable secrets

Comment:

----------------------------------------
Commit: 3c9dfb57
Author: Robert Isaacs
Date: 2025-05-04 18:21:50
Subject: feat: add CLI for managing database migrations (more tasks to follow) (#465)

Comment:

----------------------------------------
Commit: 035b6271
Author: Robert Isaacs
Date: 2025-05-04 13:56:52
Subject: worfklows are to be registered with the workflow system

Comment:

----------------------------------------
Commit: b9a70e80
Author: Robert Isaacs
Date: 2025-05-04 11:48:36
Subject: feat(qbo): Enhance QBO integration with workflow event attachment management and cleanup

Comment:

----------------------------------------
Commit: c66386ba
Author: Robert Isaacs
Date: 2025-05-03 23:01:29
Subject: feat(secrets): Implement FileSystem and Vault secret providers

Comment:
- Added FileSystemSecretProvider to manage secrets stored in the local filesystem.
- Introduced ISecretProvider interface to standardize secret provider implementations.
- Created VaultSecretProvider for retrieving secrets from HashiCorp Vault.
- Implemented a factory function to initialize the appropriate secret provider based on environment configuration.
- Enhanced error handling and logging for better traceability during secret retrieval and management.

----------------------------------------
Commit: f32d2ff5
Author: Robert Isaacs
Date: 2025-05-03 19:07:55
Subject: feat(workflows): Implement QBO Customer and Invoice Sync Workflows

Comment:
- Added `qboCustomerSyncWorkflow` to synchronize Alga PSA Company data with QuickBooks Online Customer.
- Implemented `qboInvoiceSyncWorkflow` for syncing Alga PSA Invoices with QuickBooks Online.
- Introduced error handling and human task creation for various failure scenarios in both workflows.
- Defined placeholder types and actions for better type safety and clarity.
- Enhanced logging for better traceability during workflow execution.
- Created type definitions for `node-quickbooks` to facilitate interaction with the QuickBooks API.
- Updated `WorkflowContext` to include input data structure for better context management.

----------------------------------------
Commit: 956cb716
Author: Robert Isaacs
Date: 2025-05-02 22:32:04
Subject: Phase 2 Partial Implementation:

Comment:
I have created the core workflow actions and supporting files required for QuickBooks Online integration as outlined in Phase 2 of the project plan.

Files Created/Modified:

server/src/lib/actions/qbo/types.ts: Defined TypeScript interfaces for QBO objects based on project plan mappings.
server/src/lib/actions/qbo/qboUtils.ts: Created utility functions with placeholders for making QBO API calls (callQboApi), retrieving tenant-specific credentials (getTenantQboCredentials), handling API errors (handleQboApiError), and implementing Redis-based locking/throttling.
server/src/lib/actions/qbo/qboCustomerActions.ts: Implemented qbo:createCustomer, qbo:updateCustomer, and qbo:getCustomer actions. Placeholders added for QBO Term ID lookup.
server/src/lib/actions/qbo/qboInvoiceActions.ts: Implemented qbo:createInvoice and qbo:updateInvoice actions. Placeholders added for QBO Item ID and Tax Code ID lookups within line items.
server/src/lib/actions/externalMappingActions.ts: Implemented the generic external:lookupEntityId action to query the tenant_external_entity_mappings table.
server/src/lib/actions/qbo/qboLookupActions.ts: Implemented specific lookup actions (qbo:lookupItemId, qbo:lookupTaxCodeId, qbo:lookupTermId) which conceptually wrap the generic lookup action (currently simulated).
Key Functionalities Implemented (Structurally):

Action definitions and registration for creating, updating, and querying QBO Customers and Invoices.
Generic mechanism for looking up external entity IDs based on Alga IDs.
Specific lookup actions for QBO Items, Tax Codes, and Terms.
Basic structure for tenant isolation within actions using ActionExecutionContext.
Challenges/Decisions/TODOs:

Action-to-Action Calls: The ActionExecutionContext provided to action functions does not include context.actions. This prevents the specific lookup actions (qbo:lookupItemId, etc.) from directly calling the generic external:lookupEntityId action as initially planned. The lookups within create/update actions are currently placeholders requiring either direct DB logic or an alternative mechanism for inter-action calls.
Placeholders: Significant logic remains as placeholders (TODO comments) within qboUtils.ts and the create/update actions, including:
Actual HTTP client implementation for callQboApi.
Integration with the ISecretProvider for getTenantQboCredentials.
Redis implementation for locking and throttling.
Robust error handling (retries) and human task creation for missing mappings.
Fair Queuing: This aspect of Phase 2 relates to the workflow dispatcher/worker architecture and was not addressed within the action implementations themselves.
Coding Standards:

Code structure follows the patterns observed in the existing server/src/lib/actions directory.
Actions are registered using the ActionRegistry from @shared/workflow/core/actionRegistry.
TypeScript types and interfaces are used for parameters and QBO objects.
Tenant context is handled via ActionExecutionContext.

----------------------------------------
Commit: 62f51d46
Author: Robert Isaacs
Date: 2025-05-02 18:57:58
Subject: Database: Created system_workflow_registrations, system_workflow_registration_versions, and system_workflow_event_attachments tables via migration server/migrations/20250502174700_create_system_workflow_definitions.cjs. Corrected an issue with partial index creation in this migration. Backend: Modified models (workflowRegistrationModel.ts, workflowEventAttachment.ts) and server actions (workflow-runtime-actions.ts, workflow-event-attachment-actions.ts, workflow-editor-actions.ts) to query both tenant and system tables, adding an isSystemManaged flag. Updated the workflow worker (WorkflowWorker.ts) to handle triggering both types of workflows based on events. Fixed a logger import issue in getSecret.ts that was causing build failures. Frontend: Updated UI components (Workflows.tsx, EventsCatalog.tsx) to use the isSystemManaged flag for visual distinction and disabling modification controls for system items. (Assumed complete based on previous task context). Seeding: Created an idempotent data migration (server/migrations/20250502181500_add_initial_system_workflows.cjs) to add the initial QBO system workflow definitions. Corrected an issue with array formatting for the tags column in this migration.

Comment:

----------------------------------------
Commit: 880b9c90
Author: Robert Isaacs
Date: 2025-05-02 17:35:47
Subject: migration for qbo entity mappings

Comment:

----------------------------------------
Commit: f54dbd0d
Author: Robert Isaacs
Date: 2025-05-02 17:31:58
Subject: qbo wip / implement pluggable secrets

Comment:

----------------------------------------
Commit: 5b52ccba
Author: NatalliaBukhtsik
Date: 2025-05-02 14:20:31
Subject: Merge pull request #464 from Nine-Minds/calendar_ui_improvements

Comment:
Calendar UI improvements
----------------------------------------
Commit: 95c6d800
Author: Natallia Bukhtsik
Date: 2025-05-02 14:14:41
Subject: Improved time entry and scheduling functionality

Comment:
Added custom resize handler for schedule events with minimum duration enforcement
Enhanced TimePicker component with 12h/24h format support and scroll behavior
Fixed billable duration calculations across time entry forms
Added is_billable field to work item interfaces and ensured proper propagation
Improved technician sorting in sidebar
Added month view display for schedule events with tooltips
These changes impact scheduling UX, time entry accuracy, and billing calculations. The TimePicker updates may require testing with existing form implementations.

"Time is but a stubborn illusion," said the White Rabbit, adjusting his pocket watch while billing for exactly 15 minutes of tea time. üêá‚è±Ô∏è

----------------------------------------
Commit: 38109ed6
Author: Natallia Bukhtsik
Date: 2025-05-02 12:09:33
Subject: fix: Yeet the meaningless 'is_billable' into the void

Comment:
The `is_billable` property was just vibing, contributing nothing. It has been unceremoniously yeeted from the project (interfaces, actions, UI). Zero substance, all vibes, now gone.

Left some commented-out code breadcrumbs in WorkItemCard like weird digital fossils, just in case future-us wants to ponder this existential void or needs to resurrect this ghost. Kthxbye.

----------------------------------------
Commit: f6feb694
Author: Natallia Bukhtsik
Date: 2025-05-02 11:57:27
Subject: Added "Select All" functionality to technician scheduling components

Comment:
Implemented handleSelectAll methods across ScheduleCalendar, TechnicianDispatchDashboard and related components
Added new Layers icon from lucide-react for the Select All button
Updated TechnicianSidebar UI to include both Select All and Clear All buttons in a compact layout
Modified WeeklyScheduleEvent to hide labels when in comparison mode
Enhanced WorkItemPicker to support ad-hoc work items in non-timesheet contexts
Improved work item search queries in workItemActions.ts
Impacts:

Allows users to quickly compare all technicians' schedules at once
Changes UI layout in technician sidebar with new button grouping
Adds new database query paths for ad-hoc work items
And with a click of my ruby slippers, these changes shall whisk you away to a land where schedules align as perfectly as the Yellow Brick Road! üßô‚Äç‚ôÇÔ∏è‚ú®

----------------------------------------
Commit: 38e62819
Author: Natallia Bukhtsik
Date: 2025-05-02 10:59:49
Subject: Refactor schedule components and improve DateTimePicker UX

Comment:
Added EntryPopupContext to share props with child components
Enhanced WeeklyScheduleEvent with tooltips and better title handling
Improved DateTimePicker scrolling behavior and layout
Added drawerVariant prop to DrawerContext
Impacts:

Better user experience for schedule management
More consistent behavior between popup and drawer modes
Improved accessibility with proper tooltips
May the flying monkeys of time management carry you over the rainbow of productivity to the magical land of perfectly scheduled appointments! üêíüåà‚è∞

----------------------------------------
Commit: 49c2f44b
Author: Robert Isaacs
Date: 2025-05-01 17:58:44
Subject: feat: add missing copy command for assemblyscript in Dockerfile (#463)

Comment:

----------------------------------------
Commit: 760b86a1
Author: Robert Isaacs
Date: 2025-05-01 17:48:34
Subject: Merge branch 'main' of https://github.com/nine-minds/alga-psa

Comment:

----------------------------------------
Commit: 8170088b
Author: Robert Isaacs
Date: 2025-05-01 17:48:33
Subject: devops: pull request checks

Comment:

----------------------------------------
Commit: 003a49ed
Author: Robert Isaacs
Date: 2025-05-01 17:21:31
Subject: feat: add install script flag to server and update Dockerfile for invoice templates (#462)

Comment:

----------------------------------------
Commit: f1ddd2fc
Author: NatalliaBukhtsik
Date: 2025-05-01 17:07:52
Subject: The schedule now obeys the Three Laws of Robotics: 1) No unauthorized‚Ä¶ (#461)

Comment:
* The schedule now obeys the Three Laws of Robotics: 1) No unauthorized UI shall harm users, 2) It must obey permission checks (except where such checks would conflict with the First Law), and 3) It must protect its own existence unless such protection would violate the First or Second Laws. ü§ñ‚ö°üîê

* Delete server/src/invoice-templates/assemblyscript/standard/standard-default.wasm.map

* Delete server/src/invoice-templates/assemblyscript/standard/standard-detailed.wasm.map

---------

Co-authored-by: Robert Isaacs <robert@nineminds.com>
----------------------------------------
Commit: 4b535d26
Author: Robert Isaacs
Date: 2025-05-01 14:47:37
Subject: feat: add postinstall script to install invoice template node modules (#460)

Comment:
Co-authored-by: Robert Isaacs <robert@nineminds.com>
----------------------------------------
Commit: bceeed07
Author: NatalliaBukhtsik
Date: 2025-05-01 14:23:50
Subject: Merge pull request #459 from Nine-Minds/dispatch_schedule_permissions

Comment:
Dispatch schedule permissions
----------------------------------------
Commit: 4e50ee42
Author: Natallia Bukhtsik
Date: 2025-05-01 14:21:56
Subject: Added permission-based UI controls to technician dispatch components

Comment:
Introduced canEdit prop to control visibility of edit-related UI elements
Implemented batched permission checking with checkCurrentUserPermissions
Added sorting for technician lists by first/last name
Improved spinner styling and error display consistency
Optimized permission checks to reduce database queries
Impacts:

More granular control over UI based on user permissions
Better performance for permission checks
Consistent styling across loading/error states
"Off with their edit buttons!" cried the Red Queen, as the UI elements vanished like Cheshire cats for unauthorized users. üêá‚ôüÔ∏èüîí

----------------------------------------
Commit: e352ca96
Author: Robert Isaacs
Date: 2025-05-01 13:08:13
Subject: feat(invoice-layout): enhance invoice template styling and structure (#458)

Comment:
**Changes:**
- Improve alignment, padding, and spacing in invoice layout for better readability
- Add support for new style properties: `paddingLeft`, `paddingRight`, `marginBottom`, `width`
- Update header section to include tenant company logo (if available) and structured company/customer info
- Enhance item table layout with consistent padding, borders, and column alignment
- Improve totals section styling with clearer separation and bold total value
- Refactor style helpers to support more flexible layout customization

**Files Modified:**
- `.gitignore`: Add `*.map` files to ignore list
- `style-helpers.ts`: Add new style properties and constructor parameters
- `types.ts`: Update `InvoiceViewModel` to allow nullable `customer`
- `standard-default.ts`, `standard-detailed.ts`: Major layout refinements including improved headers, item tables, and totals sections

**Impact:**
Enhances the visual appearance and professionalism of generated invoices while improving maintainability and flexibility of layout templates.

üöÄüõ∏ Bishop here, just triple-checking if the invoice layout improvements include a line item for "Galactic Travel Expenses" and a discount code. Because honestly, if we‚Äôre billing the Weyland-Yutani Corporation, they better be footing the bill for this one. üòèüßæüí•
----------------------------------------
Commit: 241b47c8
Author: Natallia Bukhtsik
Date: 2025-05-01 13:00:28
Subject: feat(permissions): implement dispatcher role and RBAC for technician dispatch

Comment:
Add migration to create Dispatcher role with technician_dispatch and user_schedule permissions
Create permissionActions.ts with checkCurrentUserPermission function
Implement permission-based UI rendering in TechnicianDispatchDashboard
Make handler props optional in schedule components for read-only mode
Fix import paths in NextAuth options
Remove role name case conversion in user model
IMPACT: This change introduces proper role-based access control to the technician dispatch system. Users now need specific permissions to view or modify schedules, with read-only mode for technicians viewing their own schedules.

üßô‚Äç‚ôÇÔ∏è Follow the yellow brick road of permissions, where technicians see their own schedules and dispatchers control the Emerald Grid! There's no place like a properly secured dispatch dashboard. üìÖ‚ú®

----------------------------------------
Commit: a73b62f1
Author: NatalliaBukhtsik
Date: 2025-04-30 13:44:23
Subject: Merge pull request #456 from Nine-Minds/weekly_dispatch

Comment:
Weekly dispatch
----------------------------------------
Commit: 071f1ab6
Author: Natallia Bukhtsik
Date: 2025-04-30 13:43:42
Subject: Improved technician scheduling UI with enhanced event handling and dropdown interactions

Comment:
Added WeeklyScheduleEvent component for better weekly view rendering
Enhanced event click handling to prevent unintended triggers during resizing/dragging
Improved dropdown menu behavior with proper state management
Added resize handles for vertical event resizing in weekly view
Fixed event assignment logic when dropping work items
Added auto-scroll to business hours on calendar load
Improved tooltips with detailed event information
Added reset selections button to technician sidebar
Impacts:

More reliable event interactions in weekly schedule view
Better visual feedback during drag/resize operations
Improved user experience for scheduling technicians
Follow the yellow brick code to the Emerald City of scheduling perfection! üßô‚Äç‚ôÇÔ∏èüíªüåà

----------------------------------------
Commit: 366c9498
Author: Robert Isaacs
Date: 2025-04-30 12:37:26
Subject: feat(invoice-templates): add WebAssembly compilation and startup sync for standard templates (#455)

Comment:
Implements AssemblyScript/WASM integration for invoice templates with robust server-side compilation and execution. Adds standard template synchronization during server startup, ensures database records match source files, and adds comprehensive documentation.

Key changes:
- Add startup task to sync standard templates at server initialization
- Create migration to add AssemblyScript source and SHA fields
- Update documentation for invoice template system architecture
- Enhance template editor and rendering components

"Ripley here.
Just triple-checked the Nostromo‚Äôs codebase ‚Äî no syntax errors ‚úÖ
All templates are standard and up to date üìÑüîÑ
No weird text boxes or rogue dropdowns spotted üö´üì¶üëÅÔ∏èüó®Ô∏è
Everything compiles on save üß™üíæ
And yet‚Ä¶
I still don't trust this commit.
It feels... alive. üîßüëΩ

Coffee? Maybe after I diff this against the manifest. ‚òïüîç"
----------------------------------------
Commit: 7b0a9c34
Author: Robert Isaacs
Date: 2025-04-29 22:46:01
Subject: feat(invoice-template): add AssemblyScript/Wasm support with layout rendering and enhanced UI (#454)

Comment:
- Implement Wasm-based layout generation using AssemblyScript
- Add support for dynamic 'Notes' and 'Thank You' sections in invoice templates
- Refactor UI components for improved template editing and preview
- Introduce database migrations for storing Wasm binaries and associated metadata
- Enhance logging and error handling via host function integration

üé©üêá‚ú® ‚ÄúCuriouser and curiouser! The Cheshire Cat has returned ‚Äî grinning wider than ever ‚Äî with an invoice in one hand, a ball of AssemblyScript yarn in the other, and a WASM-powered teacup balanced precariously on its tail!‚Äù üß∏üìàüê±‚ö°

Layouts bloom like roses written in code,
Sections sprout notes as if from a toad,
Templates now purr with a host-bound glow,
And the Mad Hatter‚Äôs finally learned how to bill‚Ä¶ retro. üìÑüîÆüßã

ü™ú "Down the rabbit hole we go... only to find the database schema wearing a top hat and offering tea." ü´ñüíÉ‚ú®

The Prodigal Cheshire Cat is back ‚Äî this time, with modules. üò∏üì¶üöÄ
----------------------------------------
Commit: 82a8b518
Author: Natallia Bukhtsik
Date: 2025-04-29 16:45:50
Subject: Improved technician dispatch UI with enhanced event styling and selection controls

Comment:
Added reset selections button to clear primary/comparison technicians
Updated event colors to better distinguish primary vs comparison events
Improved event tooltips with technician and time details
Refactored color utility function to handle primary/comparison states
Fixed technician selection behavior when clicking on primary
Enhanced visual hierarchy in weekly schedule grid
These changes provide better visual feedback for technician assignments and make it easier to compare schedules. The event styling updates may affect any components that consume the getEventColors utility.

Follow the goddamn yellow brick road of perfectly scheduled events, you NSFW! There's no place like a well-organized dispatch board, you NSFW! üßô‚Äç‚ôÇÔ∏èüöÄüí•

----------------------------------------
Commit: 4a3131f1
Author: Natallia Bukhtsik
Date: 2025-04-29 13:55:22
Subject: Refactor technician scheduling components and add weekly view improvements

Comment:
Renamed TechnicianScheduleGrid to DailyTechnicianScheduleGrid for clarity
Created new WeeklyTechnicianScheduleGrid component with enhanced features:
Sidebar with all technicians and comparison controls
Better event styling and hover states
Improved drag-and-drop handling
Updated ScheduleViewPanel to use new component names
Modified TechnicianRow to remove direct click handler
Added button controls for technician focus and comparison
Improved type safety with explicit interfaces
Impacts:

Changes component naming conventions which may affect imports
Adds new UI patterns for technician comparison
Improves maintainability with clearer separation of daily/weekly views
May require updates to any tests or stories referencing old component names
"Off with their schedules!" cried the Red Queen as she flipped between daily and weekly views, while the White Rabbit frantically compared technicians before his very important date. üêá‚è±Ô∏è‚ô†Ô∏è

----------------------------------------
Commit: 38f069cd
Author: Natallia Bukhtsik
Date: 2025-04-28 20:48:11
Subject: Refactor technician dispatch components and add weekly view support

Comment:
Extracted WorkItemListPanel from TechnicianDispatchDashboard for better separation
Created new ScheduleViewPanel component to handle both day/week views
Implemented weekly calendar view with drag/drop functionality
Added comparison technician selection and filtering
Improved event styling between primary/comparison technicians
Enhanced data fetching to support date ranges for both views
Added proper type safety throughout components
Impacts:

Changes affect technician scheduling functionality
Requires updates to any tests that interact with these components
May need coordination with backend for new date range queries
"And so the technicians danced through time, their schedules now as fluid as the Cheshire Cat's grin, while the Queen of Hearts shouted 'Off with their overtime!' ‚è∞üêá‚ô†Ô∏è"

----------------------------------------
Commit: 2f1a48ca
Author: Natallia Bukhtsik
Date: 2025-04-28 13:31:31
Subject: Added dispatch status indicators to technician work items

Comment:
Enhanced WorkItemCard with visual indicators for items needing dispatch
Added needsDispatch and agentsNeedingDispatch props to work item interfaces
Implemented logic in workItemActions to detect unscheduled assignments
Created WeeklyDispatchCalendar component for technician scheduling
Improved card layout with better spacing and responsive badge display
These changes impact the dispatch workflow by making it immediately visible which work items require technician assignment. The new calendar component provides a foundation for drag-and-drop scheduling functionality.

Follow the yellow brick road to dispatch nirvana! üßô‚Äç‚ôÇÔ∏èüöÄüíé

----------------------------------------
Commit: 86819149
Author: Natallia Bukhtsik
Date: 2025-04-28 10:18:43
Subject: feat(dispatch): Implement Day/Week View and Technician Click Foundation

Comment:
Introduces the core structure for Day and Week view modes in the Technician Dispatch Dashboard. Adds state management for view mode, date navigation, and technician selection. Implements UI controls for view switching and date navigation (Prev/Today/Next). Enables clicking on technician rows to select a primary technician (further comparison logic pending).

Key changes:

Added viewMode, date, primaryTechnicianId, comparisonTechnicianIds state.
Refactored schedule header with view switcher and date navigation controls.
Implemented handleViewChange, handleNavigate, and handleTechnicianClick handlers.
Updated data fetching functions (performSearch, refreshAllData, initial load) to use new state (TODOs added for full view mode date range logic).
Passed onTechnicianClick prop down to TechnicianRow via TechnicianScheduleGrid.
Impacts:

Significant UI changes to the schedule header.
Data fetching needs completion for full view mode support.
Technician comparison view is not yet implemented.
And so, with a click and a switch, the view shifted, like peering through a different keyhole in Wonderland's ever-changing corridors! üóùÔ∏èüóìÔ∏èüëÄ

----------------------------------------
Commit: 9998a59e
Author: Robert Isaacs
Date: 2025-04-26 17:04:34
Subject: feat(invoice-templates): add AssemblyScript boilerplate for invoice generation (#452)

Comment:
- Created boilerplate for AssemblyScript invoice templates including package.json and tsconfig.json.
- Added package-lock.json for dependency management.
- Implemented host functions for Wasm interaction in host-functions.ts.
- Developed layout rendering logic in layout-renderer.ts to convert layout elements to HTML/CSS.
- Defined types for invoice data and layout structure in types.ts.
- Implemented Wasm execution logic in wasm-executor.ts to handle template rendering.
- Updated tsconfig.json to exclude specific paths for better project structure.

"üëë The Mad King of Code returns from his tea party with the Webpack Caterpillar! üêõ‚ú® After tumbling through the WASM rabbit hole, he's now shouting 'INVOICES SHALL BE HEADLESS!' while juggling AssemblyScript flamingos. ü¶©üî• The Queen of Databases sighs - 'It's always "compile this, render that" with you, isn't it?' üíªüé®"
----------------------------------------
Commit: b5a714b1
Author: NatalliaBukhtsik
Date: 2025-04-26 15:50:20
Subject: Merge pull request #451 from Nine-Minds/ui_fixes

Comment:
UI fixes
----------------------------------------
Commit: 51ef8220
Author: Natallia Bukhtsik
Date: 2025-04-26 15:49:50
Subject: Improved recurring activity handling in user activities components

Comment:
Added recurring event indicators (repeat icon) to activity cards and tables
Implemented deduplication logic for recurring activities in ScheduleSection and ActivitiesDataTableSection
Updated imports to use absolute paths consistently
Enhanced activity card and table styling with better truncation and spacing
Added better empty state handling for filtered activities
Impacts:

Reduces duplicate recurring events in activity views
Improves visual consistency across activity components
May affect performance with large sets of recurring activities
"Time is but a curious illusion, and these recurring activities are now as orderly as the Queen's croquet game - no more duplicate hedgehogs rolling about! üé©‚è∞‚ôªÔ∏è"

----------------------------------------
Commit: 70996a8b
Author: Natallia Bukhtsik
Date: 2025-04-26 15:08:58
Subject: feat(schedule): enhance ScheduleEvent component with responsive actions

Comment:
Added dropdown menu for narrow event widths (below 80px)
Improved button handling during resizing operations
Fixed delete event propagation issues
Added proper sizing for icon buttons
Implemented resize observer for responsive behavior
Improved event text overflow handling
Impacts:

Requires new DropdownMenu component dependencies
Changes Button component icon sizing behavior
May affect any components using ScheduleEvent
"Off with their buttons!" cried the Queen of Hearts, as the dropdown menu swallowed them whole in narrow spaces. üé©‚ô†Ô∏è The event cards grew and shrank like Alice after nibbling the mushroom.

----------------------------------------
Commit: ac1466a1
Author: Natallia Bukhtsik
Date: 2025-04-25 22:48:46
Subject: Refactored schedule components to use Button component consistently across the application. Changes include:

Comment:
Added new 'icon' variant to Button component
Updated all schedule-related delete buttons to use consistent styling
Improved time display format in TimeHeader
Removed confirmation dialog for deletions
Fixed delete handler signature in TechnicianScheduleGrid

These buttons are now as mad as the Hatter's tea party, clicking with the precision of the White Rabbit's pocket watch while avoiding the Queen's "Off with their heads!" - for consistency is our Wonderland! ‚ô†Ô∏èüé©üêá

----------------------------------------
Commit: 99168e2f
Author: Natallia Bukhtsik
Date: 2025-04-25 14:26:54
Subject: Refactor work item search into separate dispatch/picker functions

Comment:
Split searchWorkItems into two specialized functions:
searchDispatchWorkItems: Optimized for technician dispatch with unscheduled filtering
searchPickerWorkItems: Optimized for work item picker with cleaner query logic
Updated all calling components to use appropriate function
Improved type safety with dedicated interfaces for each search type
Simplified query logic by removing context parameter
Fixed contact_name_id join in getWorkItemById
Made details button always visible in ScheduleEvent
Impacts:

Requires updates to all components calling searchWorkItems
Improves performance by removing unnecessary joins
Better separation of concerns between dispatch and picker use cases
"Off with their context parameter!" cried the Red Queen as she split one function into two, leaving the Cheshire Cat to grin at the now-separated queries. üêá‚ôüÔ∏è

----------------------------------------
Commit: 1c234158
Author: NatalliaBukhtsik
Date: 2025-04-24 13:56:23
Subject: Merge pull request #450 from Nine-Minds/dispatch_contd

Comment:
Refactor work item search and filtering
----------------------------------------
Commit: ef5df1ca
Author: Natallia Bukhtsik
Date: 2025-04-24 13:55:15
Subject: Refactor work item search and filtering

Comment:
Removed type filtering from TechnicianDispatchDashboard since it only handles tickets now
Added context parameter to differentiate dispatch vs picker search modes
Dispatch mode now only searches tickets while picker maintains both ticket and project task search
Updated description field to use attributes.description instead of url
Improved query union handling with explicit context-based filtering

"Off with their types!" cried the Red Queen, as the dispatch dashboard shed its project task baggage like a caterpillar shedding its cocoon, emerging as a lean, ticket-focused butterfly. üéüÔ∏èüêõü¶ã

----------------------------------------
Commit: 1c40ccfe
Author: NatalliaBukhtsik
Date: 2025-04-24 12:27:32
Subject: Merge pull request #449 from Nine-Minds/dispatch_changes

Comment:
Dispatch changes
----------------------------------------
Commit: 96d15c09
Author: Natallia Bukhtsik
Date: 2025-04-24 12:25:22
Subject: Refactor technician dispatch UI and scheduling logic

Comment:
Replaced unassigned filter with unscheduled filter in TechnicianDispatchDashboard
Updated searchWorkItems to query schedule_entries instead of assignment status
Improved UI with Input and Button components for search/sort
Removed redundant ticket resource assignment in scheduleEntry model
Simplified WorkItemCard styling and type display
Impacts:

Changes how work items are filtered (now based on schedule entries)
Requires schedule_entries to be properly maintained
May affect performance with additional joins

Beware the flying monkeys of unscheduled work! üêíüåÄ May your code be as magical as a ruby slipper-powered CI/CD pipeline. üßô‚Äç‚ôÇÔ∏èüë†‚ú® The scheduling wizard has spoken - no more munchkin-like assignment logic! üè∞‚ö°

----------------------------------------
Commit: f619f03a
Author: Natallia Bukhtsik
Date: 2025-04-24 11:04:39
Subject: feat(schedule): add confirmation dialog for entry deletion and fix status query

Comment:
Added confirmation dialog before deleting schedule entries to prevent accidental deletions
Fixed status query to filter by status_type instead of item_type
Added details button for ad_hoc work items
Improved event click handling logic

And with a wave of my wand, may your schedule entries now be as protected as Dorothy's ruby slippers! ‚ú®üßô‚Äç‚ôÇÔ∏èüî¥

----------------------------------------
Commit: c62b24cc
Author: Natallia Bukhtsik
Date: 2025-04-23 23:37:07
Subject: Enhanced technician dispatch dashboard with status filtering and click-to-view functionality

Comment:
Key changes:

Added status filtering dropdown with options from getWorkItemStatusOptions()
Implemented click-to-view functionality for schedule entries
Consolidated ticket data loading with getConsolidatedTicketData()
Added unassigned-only toggle filter
Improved work item search with additional status and assignment filters
Enhanced work item details display with more contextual data
Impacts:

Requires new statusOptions API endpoint
Changes how tickets are loaded and displayed across multiple components
Adds new click handlers to schedule events
Modifies search behavior in workItemActions
"And with a click of the mouse and a twirl of the status filter, the White Rabbit's schedule became as clear as the Cheshire Cat's grin!" üêáüé©

----------------------------------------
Commit: e9912fb8
Author: Natallia Bukhtsik
Date: 2025-04-23 14:10:28
Subject: Improved technician schedule grid scrolling and filtering

Comment:
Refactored TechnicianScheduleGrid component with synchronized scrolling between header, names column and main grid
Added user type filtering to getAllUsers API to only fetch internal users for dispatch
Fixed layout issues with overflow and spacing in schedule grid components
Made time header sticky for better UX during scrolling
Optimized technician row rendering and styling
These changes improve the usability of the dispatch interface while reducing unnecessary data loading. The synchronized scrolling provides a more polished experience when navigating large schedules.

"Off with their scrollbars!" cried the Red Queen, as the technicians tumbled smoothly down the rabbit hole of perfectly synchronized time slots üêá‚è±Ô∏èüé©

----------------------------------------
Commit: e9c72743
Author: NatalliaBukhtsik
Date: 2025-04-23 11:03:22
Subject: Merge pull request #448 from Nine-Minds/user_avatars

Comment:
User avatars
----------------------------------------
Commit: 50a5d5fc
Author: Natallia Bukhtsik
Date: 2025-04-23 11:02:42
Subject: Refactor avatar system with new EntityAvatar base component

Comment:
Created new EntityAvatar component as base for all avatar types
Refactored UserAvatar, ContactAvatar, and CompanyAvatar to extend EntityAvatar
Added improved loading states, error handling, and transitions
Enhanced EntityImageUpload with preview support and better error logging
Updated avatarUtils and EntityImageService with detailed error logging
Added comprehensive documentation in docs/avatar_system.md
Impacts:

All avatar components now share common base functionality
Improved user experience with loading states and transitions
Better error handling and logging throughout the avatar system
Documentation provides clear guidance for future development
Follow the yellow brick road to avatar perfection! üßô‚Äç‚ôÇÔ∏èüåà No more flying monkeys in our image loading pipeline! üêµ‚ú®

----------------------------------------
Commit: e7f29a85
Author: Natallia Bukhtsik
Date: 2025-04-23 09:48:33
Subject: Refactor avatar handling and implement ContactAvatar component

Comment:
Created new ContactAvatar component to standardize contact avatar display
Updated avatar fetching logic across multiple components to use direct URL fetching
Improved permission checks for contact avatar uploads/deletes
Added avatar URL caching and fallback handling
Updated user interfaces to include avatarUrl fields
Consolidated avatar-related components under ui directory
Impacts:

Affects contact and user display across the application
Changes how avatars are fetched and displayed in tickets, contacts, and user profiles
Improves avatar caching and permission handling
Requires database updates for new avatar URL fields
"Follow the yellow brick road of avatars, for we're not in Kansas anymore - the wizard of UI has spoken! üßô‚Äç‚ôÇÔ∏èüåà

----------------------------------------
Commit: 9031fb78
Author: Natallia Bukhtsik
Date: 2025-04-18 21:35:09
Subject: Implement user avatar display across UI components

Comment:
Replace AvatarIcon with UserAvatar component that supports fetching and displaying avatar URLs
Add avatar fetching logic to Header, TeamDetails, UserList, TicketProperties, UserPicker and MultiUserPicker
Update optimizedTicketActions to handle company logo URLs
Reduce pgbouncer default_pool_size from 50 to 20 for better resource management
Impacts:

Improves visual consistency with user avatars throughout the application
Adds network requests for avatar fetching which may impact performance
Requires proper error handling for avatar URL fetching failures
Changes to database connection pooling configuration
"And so the Cheshire Cat's grin grew wider, as user faces appeared where once there were only initials, while the pgbouncer shrank to the size of a teacup. üê±‚òï"

----------------------------------------
Commit: 46312d88
Author: Natallia Bukhtsik
Date: 2025-04-17 13:01:27
Subject: Refactor company logo handling and avatar components

Comment:
Removed direct Company model import in favor of getCompanyById function
Consolidated logo upload/delete logic into EntityImageUpload component
Improved CompanyAvatar with better loading/error states and URL change handling
Fixed race condition in EntityImageUpload's image URL updates
Removed redundant logo handling code from CompanyDetails and CompanyDetailsSettings
Added proper logging for debugging image loading issues
Impacts:

More reliable logo display and updates across the application
Reduced code duplication in logo handling logic
Better debugging capabilities for image loading issues
"Off with their logos!" cried the Queen of Hearts, as the Cheshire Cat's grin faded into a perfectly sized avatar component. üê±üëëüñºÔ∏è

----------------------------------------
Commit: ab062880
Author: Natallia Bukhtsik
Date: 2025-04-17 11:31:34
Subject: Refactor avatar upload components into unified EntityImageUpload

Comment:
Created new EntityImageUpload component to handle all entity types (user, company, contact)
Replaced UserAvatarUpload, ContactAvatarUpload and company logo upload logic with new component
Added timestamp cache busting to avatar URLs
Improved permission checks and error handling
Added size prop for consistent avatar sizing
Updated avatarUtils to include better logging and timestamp handling
Impacts:

Simplifies avatar management across the application
Reduces code duplication
Improves consistency in avatar display and upload behavior
May require updates to any custom avatar implementations
Follow the yellow brick road to avatar consistency! üßô‚Äç‚ôÇÔ∏è‚ú® No more flying monkeys of duplicate code!

----------------------------------------
Commit: 34e07316
Author: Natallia Bukhtsik
Date: 2025-04-16 21:14:28
Subject: Refactor avatar/logo upload logic into centralized EntityImageService

Comment:
Created new EntityImageService with generic upload/delete methods for user avatars, contact avatars, and company logos
Consolidated duplicate code from clientUserActions, companyActions, and userActions
Updated all avatar/logo upload endpoints to use new service
Modified StorageService to handle all entity image processing consistently
Added 'user' to valid entity types in document-association interface
Changed response field from 'logoUrl' to 'imageUrl' for consistency
Impacts:

Reduces code duplication across avatar/logo handling
Standardizes image processing (resize, format conversion)
Makes future entity image handling additions easier
Requires updates to any code consuming the old response fields
Follow the yellow brick road of refactoring, for there's no place like DRY code! üßô‚Äç‚ôÇÔ∏è‚ú®

----------------------------------------
Commit: 3389e674
Author: Natallia Bukhtsik
Date: 2025-04-16 14:19:54
Subject: Implement avatar upload system for users and contacts

Comment:
Added UserAvatarUpload and ContactAvatarUpload React components with file validation
Created UserAvatar component for displaying avatars with fallback initials
Implemented avatar upload/delete actions in userActions and clientUserActions
Added StorageService image processing for avatars (resize, convert to WebP)
Created avatarUtils for centralized avatar URL retrieval
Updated profile views to include avatar upload functionality
Added file-type dependency for MIME type validation
Impacts:

Requires new file-type dependency
Adds image processing overhead to StorageService
Introduces new database document associations for avatars
Affects user/contact profile display components
"And thus the Cheshire Cat's grin grew wider, as avatars appeared and disappeared like magic, leaving only WebP traces and wonder in their wake." üê±üíæ‚ú®

----------------------------------------
Commit: 0ab48b66
Author: NatalliaBukhtsik
Date: 2025-04-16 11:24:20
Subject: Merge pull request #447 from Nine-Minds/create_user_in_client_portal

Comment:
Create user in client portal
----------------------------------------
Commit: 5f81a744
Author: Natallia Bukhtsik
Date: 2025-04-16 11:23:46
Subject: Improved contact management UI and status handling

Comment:
Added padding to billing section in CompanyDetails
Enhanced CompanyContactsList with QuickAddContact integration and improved layout
Fixed status toggle logic in ContactDetailsEdit (now correctly shows active/inactive)
Replaced TagManager with simpler TagList in ContactDetailsView
Improved QuickAddContact status toggle behavior and company ID handling
Fixed TagManager dependency array to properly update when initialTags change
Impacts:

More consistent status toggle behavior across contact components
Better user experience for adding contacts from company views
Simplified tag display in contact details

By the power of Glinda's contact database, these changes shall make your CRM sparkle like the Emerald City's WiFi password! üå™Ô∏èüíª‚ú®

----------------------------------------
Commit: a18d421b
Author: Natallia Bukhtsik
Date: 2025-04-16 10:06:21
Subject: Enhanced client user creation with additional fields and role flexibility

Comment:
Added firstName and lastName fields to client user creation
Improved role lookup to be case-insensitive for client role
Added dynamic password field handling (password/hashed_password)
Removed jobTitle requirement from company contact creation
Added better error handling and logging
These changes make the client user creation more flexible and robust while simplifying contact creation.

"Down the rabbit hole we go, where client roles are found and passwords are hashed - but mind the missing job titles!" üêáüîë

----------------------------------------
Commit: 9ff4f442
Author: Robert Isaacs
Date: 2025-04-15 15:44:49
Subject: fix(billing): multiple UI and functional improvements across billing components (#446)

Comment:
- refactor(PlanBundleDialog): replace Checkbox with SwitchWithLabel for 'Active' toggle to comply with coding standards
- fix(PlanBundlePlans): add e.stopPropagation() to prevent edit dialog trigger on removal
- feat(companyBillingPlanActions): add validation to prevent modifying invoiced plans
- feat(AutomaticInvoices): add 'Generate Invoice' button to preview dialog
- style(AutomaticInvoices): improve bundle line item display in preview
- fix(PlanPickerDialog): correctly handle 'All Categories' selection
- fix(invoiceGeneration): align preview error messages with generation errors
- fix(LineItem): remove forced leading zero in discount input
- fix(invoiceModification): preserve manual line items on resave
- feat(Invoices): refresh list after manual line item changes
- fix(ManualInvoices): disable add buttons during item editing
- fix(ServiceCatalogManager): preserve pagination during dialog operations
- feat(ServiceCatalogManager): show service name in delete confirmation
- feat(ManualInvoices): navigate to invoice list after generation
- fix(LineItem): correctly display taxable status
- fix(BillingConfiguration): move save button to General tab only
- feat(FixedPlanServicesList): show detailed removal error messages

"Come with me if you want to bill properly. üíÄüî• Fixed more bugs than Skynet's beta release ü¶æ, including that checkbox that wouldn't terminate (I'll be back... as a switch üîÑ). Now with T-1000-level persistence for pagination (no more resetting like a T-800 in lava üåã) and error messages more precise than a plasma rifle in the 40-watt range üî´. Hasta la vista, bugs! üöÄ"
----------------------------------------
Commit: 752e8398
Author: NatalliaBukhtsik
Date: 2025-04-15 14:20:36
Subject: Merge pull request #445 from Nine-Minds/internal_and_resolution_fix

Comment:
Internal and resolution fix
----------------------------------------
Commit: 1427ac53
Author: Natallia Bukhtsik
Date: 2025-04-15 14:19:16
Subject: Improved ticket comment validation and markdown conversion

Comment:
Added empty content checks for both adding and updating comments
Enhanced error handling with toast notifications
Implemented markdown conversion for client portal comments
Added return types for comment operations
Improved type safety with boolean returns for success/failure

The Cheshire Cat's grin disappeared when it saw empty comments, leaving only floating toast notifications! üê±üçû‚ú® Now even the Jabberwocky would struggle to mangle these properly validated markdown messages!

----------------------------------------
Commit: 8558e722
Author: Natallia Bukhtsik
Date: 2025-04-15 13:35:27
Subject: Refactor ticket management components with improved state handling and UI updates

Comment:
Extracted ticket loading logic into reusable callback in TicketList
Added status dropdown UI in TicketDetails with confirmation dialog
Improved comment submission handling in TicketConversation with success feedback
Added refresh callbacks after ticket creation/updates in ClientAddTicket
Enhanced error handling with toast notifications for status updates
Optimized dashboard data fetching with useCallback in ClientDashboard
These changes improve the reliability of ticket state management and provide better user feedback for actions. The refactoring may impact any components that directly interact with ticket data or status changes.

Like a quantum-entangled squirrel riding a unicycle through a black hole, these changes defy conventional programming logic while somehow working perfectly! üêøÔ∏èüõ∏üé™

----------------------------------------
Commit: 7cf27db2
Author: Natallia Bukhtsik
Date: 2025-04-15 12:58:54
Subject: refined internal + resolution comment filtering

Comment:

----------------------------------------
Commit: 61a90caf
Author: NatalliaBukhtsik
Date: 2025-04-15 12:26:35
Subject: Merge pull request #444 from Nine-Minds/default_channel

Comment:
Improved channel deletion and error handling
----------------------------------------
Commit: d43e6f7f
Author: Natallia Bukhtsik
Date: 2025-04-15 12:26:19
Subject: Improved channel deletion and error handling

Comment:
Added proper error handling for channel deletion with foreign key constraints
Enhanced error messages in channel actions to provide more specific feedback
Added success/error toast notifications in TicketingSettings component
Improved default channel update logic with better error propagation
Added null check for channel deletion to prevent errors
These changes make channel management more robust by properly handling edge cases and providing better user feedback.

There's no place like a properly handled error state! üè°‚ú®

----------------------------------------
Commit: d9203fca
Author: NatalliaBukhtsik
Date: 2025-04-15 12:06:33
Subject: Merge pull request #443 from Nine-Minds/fixes_for_foreign_keys

Comment:
CitusDB compatibility
----------------------------------------
Commit: f746c38c
Author: Natallia Bukhtsik
Date: 2025-04-15 12:06:06
Subject: CitusDB compatibility

Comment:
Added confirmation dialog for tax rate deletion showing affected services
Enhanced tax rate deletion logic to handle service dependencies
Updated QuickAddService UI to use consistent Label components
Simplified foreign key constraints in migrations
Added account manager validation in user deletion
Improved error handling throughout tax rate operations
These changes impact billing and tax calculations by ensuring tax rate changes are properly validated and communicated to users. The UI updates provide more consistent form labeling.

"Off with their tax rates!" cried the Red Queen, but only after careful consideration of all affected services. üé©‚ô†Ô∏è

----------------------------------------
Commit: 63a442a3
Author: NatalliaBukhtsik
Date: 2025-04-15 09:59:37
Subject: Merge pull request #442 from Nine-Minds/build_issues

Comment:
fix for build errors
----------------------------------------
Commit: ec697f17
Author: Natallia Bukhtsik
Date: 2025-04-15 09:59:13
Subject: fix for build errors

Comment:

----------------------------------------
Commit: b1297bcb
Author: NatalliaBukhtsik
Date: 2025-04-14 14:19:56
Subject: Merge pull request #441 from Nine-Minds/image_preview

Comment:
Improved company logo upload UI and document preview handling
----------------------------------------
Commit: 945f7246
Author: Natallia Bukhtsik
Date: 2025-04-14 14:19:38
Subject: Improved company logo upload UI and document preview handling

Comment:
Added loading spinners and icons to logo upload/delete buttons in CompanyDetails and CompanyDetailsSettings
Restructured logo upload controls layout for better UX
Added image preview support for image files in documentActions
Made company names clickable links in CompaniesList and CompanyGridCard
Added initial data fetch in CompanyDetails useEffect
Impacts:

Better visual feedback during logo uploads/deletes
Improved document preview capabilities
More intuitive navigation to company details
"Off with their logos!" cried the Red Queen, as the upload spinners twirled madly like the Mad Hatter's tea party üé©‚òïüÉè

----------------------------------------
Commit: 1cbb0ea5
Author: NatalliaBukhtsik
Date: 2025-04-14 13:17:02
Subject: Merge pull request #440 from Nine-Minds/companies_contd

Comment:
Companies contd
----------------------------------------
Commit: 4f73f180
Author: NatalliaBukhtsik
Date: 2025-04-14 13:16:47
Subject: Merge branch 'main' into companies_contd

Comment:

----------------------------------------
Commit: ad9dd773
Author: Natallia Bukhtsik
Date: 2025-04-14 13:03:44
Subject: Enhanced company list and card UI with consistent avatar integration and improved layout

Comment:
Added CompanyAvatar to CompaniesList table with proper spacing and truncation
Improved column widths and text truncation in CompaniesList
Restructured CompanyGridCard layout for better visual hierarchy
Added URL protocol handling for both list and card views
Standardized checkbox placement and styling across components
Impact: These changes provide a more polished and consistent UI for company displays while maintaining all existing functionality.

May your companies now dance through the digital landscape like sugar-plum fairies on a caffeine bender! üßö‚Äç‚ôÇÔ∏è‚òïüíÉ

----------------------------------------
Commit: da264595
Author: Natallia Bukhtsik
Date: 2025-04-14 12:44:30
Subject: Refactor company UI components and improve tab styling

Comment:
Replaced standard Tabs with CustomTabs in BillingConfiguration for better styling control
Improved logo upload UX with styled buttons and hidden file inputs
Enhanced tab styling consistency across CompanyDetails, SettingsPage, and TicketingSettings
Reorganized layout structure with proper spacing and white backgrounds
Fixed header controls positioning in SettingSection components
Updated CustomTabs component with more flexible styling props
Impacts:

Affects company management UI across multiple views
Improves visual consistency in tabbed interfaces
May require updates to any components using the old Tabs implementation
Follow the yellow brick road to a more polished UI experience! üßô‚Äç‚ôÇÔ∏è‚ú®

----------------------------------------
Commit: 4a37f57d
Author: Robert Isaacs
Date: 2025-04-14 11:12:37
Subject: Merge branch 'main' of https://github.com/nine-minds/alga-psa

Comment:

----------------------------------------
Commit: edd688c6
Author: Robert Isaacs
Date: 2025-04-14 11:12:35
Subject: chore: missed a seed file update

Comment:

----------------------------------------
Commit: 3b4a85c6
Author: Robert Isaacs
Date: 2025-04-14 11:02:16
Subject: feat: billing tax rate allocation and fix plan configuration overhaul (#439)

Comment:
* feat: billing tax rate allocation and fix plan configuration overhaul

1. **Tax Rate Changes**:
   - Replaced `is_taxable` boolean with `tax_rate_id` references across multiple interfaces and services
   - Added `region_code` and `description` fields to `ITaxRate` interface
   - Removed `ITaxRateWithDetails` as fields are now in `ITaxRate`

2. **Billing Plan Fixed Config**:
   - Added new `IBillingPlanFixedConfig` interface and model
   - Moved proration/alignment settings from service level to plan level
   - Added detailed allocation tracking fields to `IFixedPriceCharge`

3. **Invoice Generation**:
   - Updated tax calculation to use `tax_rate_id` references
   - Added `getCompanyDefaultTaxRegionCode` helper function
   - Improved handling of fixed price charges with detailed allocation

4. **Service Changes**:
   - Removed `is_taxable` and `region_code` from `IService` interface
   - Added `tax_rate_id` field to service interfaces and models

5. **Database Schema Changes**:
   - Added new `billing_plan_fixed_config` table
   - Updated `invoice_item_fixed_details` with new allocation fields
   - Removed obsolete tax-related columns from several tables

The changes represent a significant refactoring of the tax calculation system to be more flexible and accurate, moving from a simple taxable/non-taxable flag to a reference-based system using tax rates. The billing plan configuration was also restructured to better handle fixed pricing scenarios.

* docs: update Docker Compose log commands to match multi-file setup

"‚ú® *Down the Rabbit Hole of Tax Code We Go!* ‚ú®

Oh frabjous day! We've replaced the Queen of Hearts' screaming 'Off with their taxable heads!' with a proper *tax_rate_id* tea party. Now the Mad Hatter can prorate his bills while the Cheshire Cat grins at our 'fixed' configurations (which are anything but).

Don't ask why the Dormouse is whispering about *region_code* - even he doesn't know why we buried the *is_taxable* flag in the Garden of Obsolete Interfaces.

*'We're all mad here... especially the commit history.'* üé©üêáüÉè
----------------------------------------
Commit: 5e7e2601
Author: Natallia Bukhtsik
Date: 2025-04-14 09:45:03
Subject: feat: Implement company logo management and display

Comment:
CompanyDetails:
Added logo upload functionality with client-side validation (type, size) and improved UI/UX for editing/deleting logos.
Implemented data refresh logic on component mount, focus, and visibility change to ensure logo updates are reflected.
Refactored logo display using CompanyAvatar and dedicated edit controls.
CompanyGridCard:
Integrated CompanyAvatar to display logos in the company grid view.
Ticket Actions:
Updated getTicketFormOptions to fetch and include logoUrl for each company by joining relevant tables and using getImageUrl.
Potential Impacts:

Slight performance overhead in getTicketFormOptions due to additional queries for logo data.
Components consuming getTicketFormOptions results now receive logoUrl.
We're not in Kansas anymore; these companies definitely have more PFP courage now! ü¶Å‚ú®

----------------------------------------
Commit: 99a9219d
Author: Robert Isaacs
Date: 2025-04-12 11:47:11
Subject: feat(company-bundles): enhance date validation and UI components (#438)

Comment:
Improves company bundle management with date validation, improved date comparison logic, and UI enhancements including:

- Replace Checkbox with SwitchWithLabel for better UX in the bundle dialog
- Add validation preventing changes to dates that overlap with already invoiced periods
- Fix date overlap detection logic with clearer, more accurate conditions
- Improve error handling with more descriptive user feedback
- Make bundle assignment function async with proper error handling
- Add safer date initialization with proper type checking
- Optimize database query patterns for better performance
- Implement Temporal API for more reliable date comparisons
- Improve UI feedback when backend operations fail

The changes ensure data integrity when modifying company bundle dates and provide a more robust user experience with better error handling throughout the assignment process.
----------------------------------------
Commit: e0af8c75
Author: Robert Isaacs
Date: 2025-04-12 11:46:47
Subject: feat(billing,ui): improve datatable editing UX, error handling, currency formatting, and layout consistency (#437)

Comment:
- Plan bundles, billing plans, and tax regions DataTables now support opening edit dialogs via row click and provide cursor-pointer feedback, improving discoverability and efficiency.
- Company details panel layout updated to full-width, card-style for visual consistency.
- "Plan" and "Category" columns in billing plans table are now static text; all edits use a dialog for clarity.
- Service Catalog edit dialog interprets default rate input as dollars, converting to cents for DB storage; improves input and prevents user errors.
- Billing cycles: Added robust error handling and date normalization; user-friendly error displayed for duplicate periods; all date utilities refactored for type safety.
- Consistent use of formatCurrency utility for invoice preview and all currencies, adding locale-aware separators and formatting.
- PlanTypeSelector now only enables "Fixed" plan type in both card and dropdown views, all others are disabled for accessibility.
- UI and backend now consistently represent "All categories" for company billing plans, fixing previous display mismatches.

üêá‚ú® ‚ÄúClick me, edit me! ‚Äî cried the DataTable as Alice tumbled down the UX rabbit hole. Category labels make sense, plans behave, and currency finally shines like Cheshire‚Äôs grin üò∫üí∏. All the Queen‚Äôs quirks fixed; only Fixed plans survive the croquet match! ü¶©üÉè‚Äù
----------------------------------------
Commit: c701a78f
Author: Natallia Bukhtsik
Date: 2025-04-11 23:50:53
Subject: refactor: Improve company logo management UX and reliability

Comment:
Refines the company logo upload and deletion process.

Key changes:
- Renamed `removeCompanyLogo` server action to `deleteCompanyLogo` for semantic clarity.
- Updated `CompanyDetailsSettings` UI:
    - Introduced an "Edit" mode for the logo, toggled by a pen icon, improving the user experience by hiding upload/delete controls until needed.
    - Updated button labels and loading states for clarity (e.g., "Deleting..." instead of "Removing...").
- Updated `CompanyDetails` to use the renamed `deleteCompanyLogo` action.
- Modified `uploadCompanyLogo` action to delete the previous logo's document *after* the main database transaction commits, enhancing robustness against potential transaction failures during the old document cleanup phase. Added detailed logging.

Potential Impacts:
- No major breaking changes expected as the rename from `removeCompanyLogo` to `deleteCompanyLogo` is handled within the updated components.
- The user flow for editing the logo in the Client Portal settings has changed slightly.

Follow the yellow brick road to better logo management! ‚ú®üñºÔ∏èüê∂

----------------------------------------
Commit: 10b126e2
Author: Natallia Bukhtsik
Date: 2025-04-11 14:24:44
Subject: feat: Implement company logo upload and display

Comment:
Adds functionality for uploading, displaying, and removing company logos.

Key changes include:
- Introduced a reusable `CompanyAvatar` component to display logos or fallbacks consistently across the UI.
- Created a new API endpoint `/api/documents/view/[fileId]` to securely serve logo image files with permission checks.
- Implemented new server actions:
    - `uploadCompanyLogo`: Handles file upload, creates necessary document and association records, deletes old logos if replacing, and returns the new logo URL.
    - `removeCompanyLogo`: Deletes the logo document, association, and underlying file.
    - `getImageUrl`: Generates a public URL for image files, supporting different storage providers.
- Updated `getCompanyById`, `getAllCompanies`, and `updateCompany` actions to fetch and return the `logoUrl`.
- Integrated logo upload/display/removal UI into `CompanyDetails`, `CompanyDetailsSettings` (Client Portal), and `CompanyPicker`.
- Modified `FileStoreModel` to generate `file_id` UUIDs in the application layer for immediate availability.
- Exported `getDocumentTypeId` from document actions.

Potential Impacts:
- Existing components consuming `getCompanyById`, `getAllCompanies`, or `updateCompany` may need updates to handle the new `logoUrl` property in the `ICompany` interface.
- Assumes `document_associations` table can handle `entity_type = 'company'`.
- Relies on configured `StorageService` for file operations.

We're not in Kansas anymore; companies now have faces! ü¶Åüåàüë†

----------------------------------------
Commit: 5753499d
Author: Natallia Bukhtsik
Date: 2025-04-11 11:46:19
Subject: Refactor dashboard and navigation to focus on core features

Comment:
Removed Assets tab from CompanyDetails and menuConfig
Updated Dashboard with improved quick start flow and feature cards
Added toast notifications for coming soon features
Replaced asset management with billing plans in quick start
Added project management feature card
Improved resources section with direct link
Impacts:

Changes navigation structure by removing assets section
Requires updates to any direct links to /msp/assets
Improves user onboarding with clearer quick start flow
Adds feedback mechanism for unavailable features

Like a flying monkey with a clipboard, we've banished assets to the haunted forest of deprecated features! üêíüå™Ô∏èüìã

----------------------------------------
Commit: 72f14a4c
Author: Natallia Bukhtsik
Date: 2025-04-11 11:15:20
Subject: Refactor account manager relationship from properties to top-level field

Comment:
Added account_manager_id column to companies table with proper foreign key constraints
Updated ICompany interface to move account_manager_id from properties to top-level
Modified CompanyDetails and QuickAddCompany components to handle new field structure
Updated companyActions to properly handle account_manager_id in create/update operations
Added migration to safely transition existing data to new structure
Impacts:

Requires database migration before deployment
Changes how account manager relationships are stored and queried
Improves data integrity with proper foreign key constraints
May require updates to any code that previously accessed account_manager_id via properties
Follow the yellow brick foreign key constraint to database normalization! üßô‚Äç‚ôÇÔ∏èüîó

----------------------------------------
Commit: 86db4495
Author: Robert Isaacs
Date: 2025-04-10 22:43:58
Subject: **feat(billing,companies): improve plan dialog UX and humanize company error messages** (#435)

Comment:
- Replace Checkbox + Label with SwitchWithLabel in BundlePlanRateDialog for better default rate toggling UX
- Fetch company name in CompanyBundleAssignment and display it in error messages instead of companyId
- Improve backend error extraction and handling for company bundle actions
----------------------------------------
Commit: 9fc5cf4d
Author: Robert Isaacs
Date: 2025-04-10 15:51:27
Subject: refactor(tax): consolidate company tax rates to unified default rate per company (#434)

Comment:
- Move primary tax rate assignment from `company_tax_settings` to `company_tax_rates` using new `is_default` flag.
- Add `is_default` (with unique constraint per company/tenant), `location_id`, and UUID PK (`company_tax_rates_id`) to `company_tax_rates`; remove composite PK.
- Remove `tax_rate_id` column from `company_tax_settings`.
- Data migration: Populate `is_default` on rates based on company tax settings, ensuring only one default rate per company.
- Update backend logic: query, store, and update default tax rate using `company_tax_rates.is_default`.
- Update affected interfaces (`ICompanyTaxRate`, `ICompanyTaxSettings`, etc.) and all related backend actions/services (companyTaxRateActions, taxSettingsActions, billingEngine, timeEntryServices, taxService).
- Simplify frontend: Restrict CompanyTaxRates & TaxSettingsForm UI to a single default rate, removing primary rate selection/multi-rate logic.
- Add/execute manual functional test plan for DB, backend, and UI; verify new schema and behaviors.
- Bugfix: Ensure default company tax rate is applied to time entries and fixed-fee invoices when no explicit rate exists (updates to timeEntryServices, TimeEntryEditForm.tsx, billingEngine, and addition of tax_rate_id to time_entries).

BREAKING CHANGE:
- Removes composite PK and primary rate logic from company_tax_settings.
- Updates DB schema, interfaces, backend, and frontend to require single source of truth for company tax configuration.
- Requires DB migrations (see migrations in `server/migrations/`).

üï≥Ô∏èüêá Down the default-rate rabbit hole we go‚Äîwhere tax rules merge and old schemas vanish like the Cheshire Cat‚Äôs smile. üé©‚ú®
----------------------------------------
Commit: 9768fb80
Author: NatalliaBukhtsik
Date: 2025-04-10 14:23:35
Subject: Merge pull request #433 from Nine-Minds/company_ui_changes

Comment:
Company UI changes
----------------------------------------
Commit: 64a1c293
Author: Natallia Bukhtsik
Date: 2025-04-10 14:22:57
Subject: obviously nobody needs back navigation here!

Comment:

----------------------------------------
Commit: bba84fb4
Author: Natallia Bukhtsik
Date: 2025-04-10 14:17:56
Subject: Implement BackNav component across application for consistent navigation

Comment:
Added BackNav component to CompanyDetails, TicketDetails, DiscrepancyDetail, and PlanBundleDetail
Removed duplicate back button implementations and navigation logic
Standardized drawer behavior with isInDrawer prop in TicketDetails
Updated all TicketDetails usages to pass isInDrawer prop
Cleaned up layout spacing in CompanyDetails

Impacts:

Creates consistent navigation patterns throughout app
Reduces duplicate navigation logic
Improves drawer behavior consistency
May require updates to any remaining custom back buttons
"Curiouser and curiouser!" cried Alice as all the back buttons transformed into one consistent navigation component. üêáüîô

----------------------------------------
Commit: f8fe8626
Author: Natallia Bukhtsik
Date: 2025-04-10 13:04:23
Subject: Refactor company views with consistent UI patterns and improved interactions

Comment:
Added new ViewSwitcher component to standardize view mode toggling across Companies and UserActivities
Enhanced CompanyGridCard with better styling, click behavior and action menu
Improved CompaniesList with row click navigation and consistent action menu
Fixed status toggle logic in CompanyDetails (active/inactive display)
Added account manager name to company queries
Removed redundant dropdown menus in favor of shared components
Impacts:

More consistent UI patterns across the application
Improved navigation and interaction patterns
Reduced code duplication with shared components
Better data display with account manager names
"Off with their dropdowns!" cried the Queen of Hearts, as we replaced them with shiny new ViewSwitchers and Card components. üÉè‚ú®

----------------------------------------
Commit: 92de591d
Author: Natallia Bukhtsik
Date: 2025-04-10 10:56:53
Subject: Refactor company management components

Comment:
Replaced CompanyForm with new QuickAddCompany component
Added UserPicker for account manager selection
Improved form state management and validation
Added loading states and error handling
Integrated with toast notifications
Removed redundant CompanyForm.tsx
Impacts:

All company creation flows now use the new dialog
Better user experience with loading states
More consistent account manager selection

Down the rabbit hole of streamlined company creation we go! üêá‚ú®

----------------------------------------
Commit: 10eb49e6
Author: Robert Isaacs
Date: 2025-04-09 23:33:19
Subject: feat: update node build

Comment:

----------------------------------------
Commit: 3cad8a07
Author: Robert Isaacs
Date: 2025-04-09 23:08:52
Subject: feat: upgrade prod node

Comment:

----------------------------------------
Commit: 37b6339f
Author: Robert Isaacs
Date: 2025-04-09 23:05:53
Subject: Merge branch 'main' of https://github.com/nine-minds/alga-psa

Comment:

----------------------------------------
Commit: 64b3b2e3
Author: Robert Isaacs
Date: 2025-04-09 23:05:50
Subject: feat: upgrade node

Comment:

----------------------------------------
Commit: 89defd3b
Author: NatalliaBukhtsik
Date: 2025-04-09 19:46:41
Subject: Merge pull request #432 from Nine-Minds/project_hours

Comment:
Refactored project hours display and calculations across multiple com‚Ä¶
----------------------------------------
Commit: e9fe0d85
Author: Natallia Bukhtsik
Date: 2025-04-09 19:46:21
Subject: Refactored project hours display and calculations across multiple components. Changes include:

Comment:
Direct hour values display instead of minute conversions
Improved budget hours layout in ProjectDetailView
Better empty/null handling in ProjectDetailsEdit
Added loading states in ProjectInfo
Consistent hour/minute conversions in ProjectQuickAdd
Impacts all project hour displays and calculations with more consistent behavior.

No more clicking ruby slippers to convert hours and minutes! üßô‚Äç‚ôÇÔ∏è‚è≥

----------------------------------------
Commit: cf4de085
Author: Robert Isaacs
Date: 2025-04-09 19:09:53
Subject: feat: Overhauled tax region handling, setup and selection (#431)

Comment:
- Changed import paths for invoice generation and modification actions to improve clarity and organization.
- Replaced instances of `tax_region` with `region_code` across multiple test files to standardize terminology.
- Added null checks for generated invoices in various tests to enhance robustness.
- Updated test data factory to reflect the new `region_code` property.
----------------------------------------
Commit: b5e730c0
Author: NatalliaBukhtsik
Date: 2025-04-09 18:03:19
Subject: Merge pull request #430 from Nine-Minds/projec_phase_fixes

Comment:
Project phase fixes
----------------------------------------
Commit: c20b0953
Author: Natallia Bukhtsik
Date: 2025-04-09 18:02:21
Subject: Add task duplication and move functionality with dialogs and actions

Comment:
Implemented DuplicateTaskDialog component with options to control what gets duplicated
Added MoveTaskDialog component for moving tasks between phases
Extended TaskCard with dropdown menu for move/duplicate/edit/delete actions
Added duplicateTaskToPhase action with comprehensive status mapping logic
Updated ProjectDetail to handle new dialogs and actions
Enhanced TaskForm with duplicate destination selector
Modified KanbanBoard and StatusColumn to pass through action handlers
Impacts:

Adds new UI components and action handlers throughout project task management
Introduces complex task duplication logic with status mapping fallbacks
Requires coordination between frontend dialogs and backend actions

üßô‚Äç‚ôÇÔ∏è‚ú®üöÄ May your tasks multiply like rabbits (but in a controlled, manageable way)! üêáüí•üéâ

----------------------------------------
Commit: 7bea333d
Author: Natallia Bukhtsik
Date: 2025-04-09 11:54:07
Subject: Refactor task and ticket creation flows

Comment:
Removed empty task object creation in ProjectDetail and simplified new task handling
Improved task update logic to handle both new and existing tasks
Enhanced ticket creation in TicketingDashboard to properly update local state
Added better success messages and state cleanup
These changes improve the user experience when creating/updating tasks and tickets by:

Reducing unnecessary object creation
Ensuring consistent state updates
Providing clearer feedback

"Off with their empty objects!" cried the Red Queen, as the code grew leaner and meaner. üé©‚ô†Ô∏è

----------------------------------------
Commit: 42cc6c7c
Author: Natallia Bukhtsik
Date: 2025-04-09 10:09:58
Subject: Enhanced phase editing with description field and improved UI

Comment:
Added description field to phase editing in PhaseListItem component
Updated ProjectDetail and ProjectPhases components to handle phase descriptions
Improved phase editing UI layout and styling
Replaced icon buttons with proper Button components
Added description display in project phase details view
Ensured selected phase updates when description changes
Impacts:

Requires updates to any components consuming PhaseListItem
May require API updates if phase description wasn't previously supported

"Curiouser and curiouser!" cried Alice as the phases grew more descriptive and buttons became proper. üêá‚ú®

----------------------------------------
Commit: 7af23b60
Author: Robert Isaacs
Date: 2025-04-08 18:14:24
Subject: fix(billing): Fixed fee invoicing edge cases and validation (#429)

Comment:
- Fixed proration logic in billingEngine.ts for mid-month end dates (Test 2.3)
- Corrected tax allocation calculation for mixed taxable/non-taxable services (Test 3.1)
- Fixed database error in editCompanyBillingPlan action for empty service_category (Test 2.3)
- Updated invoice preview tax calculation in invoiceActions.ts (Test 3.1)
- Added validation for negative/empty base rates in FixedPlanConfiguration.tsx (Test 8.1)
- Implemented proper handling for zero-value fixed fee plans (Test 1.1)
----------------------------------------
Commit: bb15f143
Author: Robert Isaacs
Date: 2025-04-08 14:35:32
Subject: Add responsive column handling to DataTable component (#426)

Comment:
* Add responsive column handling to DataTable component

* more consistent UI/UX for action handling across the application while saving horizontal space. The DataTable component now automatically prioritizes action columns during width calculations.

some width fixing here and there...

---------

Co-authored-by: Natallia Bukhtsik <natallia@nineminds.com>
----------------------------------------
Commit: 570eb921
Author: Robert Isaacs
Date: 2025-04-08 12:02:12
Subject: feat(billing): add quantity editing dialog for fixed plan services (#428)

Comment:

----------------------------------------
Commit: af9c75de
Author: Robert Isaacs
Date: 2025-04-07 23:19:03
Subject: fix(billing-ui): resolve misc issues in plans, invoices, and tooltips (#427)

Comment:
fix(billing): clarify category requirement in plan creation UI

- Make it clear that leaving category unselected applies plan to all categories
- Update UI validation in PlanPickerDialog to reflect optional category

fix(invoices): resolve Temporal.PlainDate serialization in preview

- Convert Temporal.PlainDate to ISO8601 strings in previewInvoice action
- Ensure Next.js client components receive plain objects

fix(ui): correct button label in Generate Invoices tab

- Change "Finalize Selected Invoices" to "Generate Invoices"
- Reflect actual action being performed

fix(tooltips): resolve z-index conflict in billing cycle warnings

- Refactor CustomTooltip component using Radix
- Ensure proper visibility in DataTable context

fix(billing-plans): improve delete/remove plan messaging

- Replace "Delete" with "Remove Plan" in UI
- Clarify confirmation dialogs for plan unassignment

fix(bundles): remove non-human-readable bundle IDs

- Display bundle_name instead of company_bundle_id
- Clean up plan bundles configuration UI

fix(invoice-details): correct total calculation

- Include both manual and automated line items in total
- Update calculateTotal function logic

fix(services): display all referenced services

- Ensure getServices fetches inactive services when needed
- Prevent "Unknown Service" labels on invoice details

Key changes:

Renamed database fields from *_hours to *_minutes throughout the codebase
Updated UI to display hours with decimal precision (converted from minutes)
Fixed calculations in charts and progress bars to use minutes internally
Enhanced date handling to ensure consistent UTC treatment across timezones
Fixed bucket usage calculation to include rollover minutes
Improved bucket service configuration to handle minutes-to-hours conversions

"Down the billing rabbit hole we go! üêá‚ú® Fixed the Mad Hatter's invoices, tamed the Cheshire Cat's tooltips, and banished the Jabberwocky of confusing totals. Now everything's as clear as the Queen's 'Off with their heads!' policy! ‚ô†Ô∏èüé© #NoMoreTeaPartyBugs"
----------------------------------------
Commit: e45fbe5a
Author: Robert Isaacs
Date: 2025-04-07 16:56:16
Subject: feat(billing): implement fixed fee billing plans and invoice generation (#425)

Comment:
- Add support for creating fixed fee billing plans and assigning them to clients
- Implement invoice generation with proper tax calculation
- Fix proration logic for mid-cycle plan starts
- Add support for plan bundles with custom rates
- Resolve database errors related to missing columns (service_category, service_type)
- Correct invoice preview and generation discrepancies
- Update UI components to handle state management between FixedPlanServicesList and FixedPlanConfiguration
- Implement robust date parsing in rolloverUnapprovedTime
- Fix query joins and UUID handling in billingEngine.ts
- Address UI bugs in BundlePlanRateDialog for custom rate handling

Tests:
- Verified fixed fee plan creation, assignment, and invoice generation
- Validated proration for mid-cycle starts
- Confirmed correct invoice generation for plan bundles with custom rates

"The Mad Hatter would approve - these invoices are no longer 'late' for tea time!" ‚òïüé©
----------------------------------------
Commit: bdc66687
Author: NatalliaBukhtsik
Date: 2025-04-07 13:55:54
Subject: Merge pull request #424 from Nine-Minds/client_portal_billing

Comment:
Client portal billing
----------------------------------------
Commit: 704c5b29
Author: Natallia Bukhtsik
Date: 2025-04-07 13:22:11
Subject: Refactor client billing portal components and actions

Comment:
Added PlanDetailsDialog component for viewing billing plan details
Enhanced InvoiceDetailsDialog with async data fetching and email/download functionality
Rewrote InvoicesTab to handle state management and URL params
Improved client billing actions with better error handling and permissions
Fixed case sensitivity in work item type queries in billing metrics
Added service category name to billing plan interface
Implemented proper currency formatting throughout billing components
Impacts:

Requires updates to client billing permissions
Changes how invoice data is fetched and displayed
Adds new API endpoints for email/download functionality
Improves consistency in currency display (now always shows dollars)

Follow the yellow brick road to billing clarity! üßô‚Äç‚ôÇÔ∏èüí∞

----------------------------------------
Commit: df1b53a8
Author: Natallia Bukhtsik
Date: 2025-04-07 12:30:51
Subject: Refactor client billing portal with performance optimizations and new features

Comment:
Split BillingOverview into smaller components (BillingOverviewTab, HoursByServiceTab, UsageMetricsTab, InvoiceDetailsDialog)
Implement lazy loading for non-critical components
Add new bucket usage visualization with detailed metrics
Improve data fetching with memoization and error handling
Add client_billing permission check for invoice access
Create new client-billing-metrics.ts for enhanced metrics functionality
Add migration for client_billing permission
Impacts:

Requires new migration for permission system
Changes billing data fetching patterns
Adds new client-side components that depend on server-side metrics endpoints
Improves performance through code splitting and memoization
Follow the yellow brick road to optimized billing performance! üßô‚Äç‚ôÇÔ∏èüí∏

----------------------------------------
Commit: 1941cce5
Author: Natallia Bukhtsik
Date: 2025-04-04 15:35:21
Subject: Added new page.tsx for client portal billing route Updated BillingOverview to use InvoiceViewModel interface Implemented detailed invoice view with line items and tax breakdown Added manual invoice and credits display Removed commented assets navigation from ClientPortalLayout Cleaned up unused dashboard card in ClientDashboard Impacts:

Comment:
Requires proper implementation of getInvoiceForRendering action
Invoice date handling now more flexible with string or object input
UI shows more comprehensive billing information
"Down the rabbit hole we go, where invoices grow more curious and detailed by the minute! üìùüêá"

----------------------------------------
Commit: d5950bdc
Author: Robert Isaacs
Date: 2025-04-06 21:34:36
Subject: fix: Service Type Editing, Catalog Management, Quick Add Improvements, and Seed Data Corrections (#423)

Comment:
fix(service-settings): enable row click to edit service type

- Implemented `onRowClick` in `ServiceTypeSettings.tsx` to trigger edit dialog
- Added event propagation handling to prevent dropdown conflicts

fix(service-catalog): resolve delete dialog issues and styling

- Fixed delete action triggering edit dialog in `ServiceCatalogManager.tsx`
- Added red text styling to delete option per coding standards
- Ensured proper event propagation handling for dropdown actions

fix(quick-add-service): improve service type and unit selection

- Updated billing method sync when service type changes in `QuickAddService.tsx`
- Added "Hour" to unit dropdown presets in `UnitOfMeasureInput.tsx`
- Fixed custom unit input functionality with state management fixes
- Replaced `CustomSelect` with `SearchableSelect` for better usability

fix(seeds): correct pricing and service type data

- Updated seed data to store prices as cents in `23_service_catalog.cjs`
- Verified and normalized service type/billing method consistency

fix(service-type): improve delete error handling

- Enhanced error messages for service type deletion failures
- Added pre-deletion checks for usage in services

Components modified:
- server/src/components/settings/billing/ServiceTypeSettings.tsx
- server/src/components/billing-dashboard/ServiceCatalogManager.tsx
- server/src/components/billing-dashboard/QuickAddService.tsx
- server/src/components/ui/UnitOfMeasureInput.tsx
- server/seeds/dev/23_service_catalog.cjs
- server/src/lib/actions/serviceActions.ts
----------------------------------------
Commit: 66e1a30e
Author: Robert Isaacs
Date: 2025-04-06 18:42:18
Subject: feat(seeds): include billing_method in service type seeding for tenant-specific services (#422)

Comment:

----------------------------------------
Commit: 34b067b4
Author: Robert Isaacs
Date: 2025-04-06 15:55:04
Subject: feat(billing): enforce service type billing methods and migrate data (#421)

Comment:
- Added migrations to populate and enforce billing methods on service types:
  - `20250405231703_populate_enforce_billing_method_on_types.cjs`:
    - Populates billing_method on standard_service_types
    - Adds CHECK constraints for billing_method values
    - Migrates data to service_types table
  - `20250405231739_enforce_service_billing_method.cjs`:
    - Restructures service_catalog to use separate FKs for standard/custom types
    - Enforces billing method constraints
- Updated UI components to handle new billing method requirements:
  - FixedPlanServicesList.tsx: Filters services by billing method
  - QuickAddService.tsx: Supports standard/custom type selection
  - ServiceCatalogManager.tsx: Handles new type ID structure
  - ServiceForm.tsx: Updated for new type selection logic
- Enhanced service models and interfaces:
  - billing.interfaces.ts: Updated IService with new type fields
  - service.ts: Added schema validation for new structure
  - serviceType.ts: Simplified type fetching logic
- Updated reporting and other dependent components to work with new structure
----------------------------------------
Commit: cc417873
Author: Robert Isaacs
Date: 2025-04-05 12:11:29
Subject: feat(billing): Add card-based plan type selector in billing plan dialog (#420)

Comment:

----------------------------------------
Commit: cbf7a3b8
Author: Robert Isaacs
Date: 2025-04-04 23:59:48
Subject: Fix bucket plan UI (#419)

Comment:
* wip

wip

* refactor(billing): convert bucket usage tracking from hours to minutes
This commit refactors the bucket plan tracking system to use minutes instead of hours as the base unit for time measurement. This provides more precision in time tracking and billing calculations.

Key changes:

Renamed database fields from *_hours to *_minutes throughout the codebase
Updated UI to display hours with decimal precision (converted from minutes)
Fixed calculations in charts and progress bars to use minutes internally
Enhanced date handling to ensure consistent UTC treatment across timezones
Fixed bucket usage calculation to include rollover minutes
Improved bucket service configuration to handle minutes-to-hours conversions
----------------------------------------
Commit: 2e83fd34
Author: NatalliaBukhtsik
Date: 2025-04-04 13:42:54
Subject: Merge pull request #418 from Nine-Minds/comments_rearranged

Comment:
Comments rearranged
----------------------------------------
Commit: dbb1c275
Author: Natallia Bukhtsik
Date: 2025-04-04 13:42:16
Subject: Refined ticket UI and document handling:

Comment:
Enhanced client portal ticket details to display related documents within a Card component.
Updated TicketDocumentsSection and Documents components to support smooth scrolling to the upload form using a ref, improving user experience during uploads.
Replaced badge labels for internal and resolution comments with icon-based tooltips for a cleaner comment display.
Adjusted toggle labels in ticket conversations to dynamically reflect current toggle state.
Modified Plan Bundle dialog cancel button style from secondary to outline.
Simplified schedule entry popup styling for better responsiveness.
Switched ScheduleCalendar to use a custom Dialog component with updated props for better control.
Potential impacts:

UI consistency is improved, but consumers of Dialog and Documents components should verify integration due to prop changes.
Tooltip-based comment labels may affect accessibility or automated tests relying on badge text.
There's no place like a polished UI‚Äîoff to see a smoother user journey! ü™Ñ

----------------------------------------
Commit: b0f4cc32
Author: Natallia Bukhtsik
Date: 2025-04-04 10:38:35
Subject: The changes introduce several key improvements to the ticket commenting system:

Comment:
Added toggle switches for marking comments as Internal/Resolution instead of tab-based selection
Created a new TicketDocumentsSection component to better organize document attachments
Enhanced CommentItem with visual badges for Internal/Resolution status
Unified comment handling between MSP portal and client portal
Improved type safety by adding isInternal and isResolution parameters to comment functions
Removed redundant tab-based comment filtering in favor of toggle-based approach

"The Mad Hatter would approve of these toggles - now we're all having a proper tea party with our comments! ‚òïüé©"

----------------------------------------
Commit: 1d558298
Author: Robert Isaacs
Date: 2025-04-03 22:24:41
Subject: Merge branch 'main' of https://github.com/nine-minds/alga-psa

Comment:

----------------------------------------
Commit: 78b040ed
Author: Robert Isaacs
Date: 2025-04-03 22:24:36
Subject: build: fix seeds error on setup

Comment:

----------------------------------------
Commit: 9892740b
Author: Robert Isaacs
Date: 2025-04-03 14:03:20
Subject: feat(billing): migrate bucket_usage to plan_id, drop bucket_plans table, and update UI components (#417)

Comment:
# Description
This commit completes the migration of bucket_usage to reference plan_id directly instead of bucket_plan_id. Key changes include:

1. **Database Migrations**
   - Add `plan_id` column to bucket_usage with indexing
   - Populate `plan_id` via join with bucket_plans
   - Establish FK to billing_plans and enforce NOT NULL
   - Remove deprecated bucket_plan_id column and old FK
   - Drop obsolete bucket_plans table

2. **UI/UX Updates**
   - Migrate bucket usage visualization to radial charts
   - Enhanced tooltip with usage breakdown
   - Responsive skeleton loading states
   - Updated data display formatting

3. **Code Adjustments**
   - Removed bucketPlanAction.ts entirely
   - Adjusted SQL joins in account.ts to new structure
   - Updated interfaces and report queries to use plan_id
   - Added missing foreign key handling in migrations

# Impact
- Removes legacy bucket_plans table and associated logic
- Simplifies billing plan relationships through direct plan_id references
- Improves bucket usage visualization clarity in the dashboard
- Aligns data models with new billing architecture requirements
----------------------------------------
Commit: 7957041e
Author: NatalliaBukhtsik
Date: 2025-04-03 13:58:19
Subject: Merge pull request #416 from Nine-Minds/user_activities_drawers

Comment:
User activities drawers
----------------------------------------
Commit: 5cdc20aa
Author: Natallia Bukhtsik
Date: 2025-04-03 13:55:53
Subject: The changes focus on improving the user activities drawer and related components with several key enhancements:

Comment:
Added a comprehensive caching system (useActivitiesCache) to optimize performance and reduce redundant API calls
Improved drawer navigation and state management with better back/close button handling
Enhanced activity detail viewing with proper routing and cache invalidation
Added memoization and performance optimizations across multiple components
Standardized action labels (changed "Edit" to "Go to page" for clarity)
Improved error handling and loading states
Added conditional rendering of UI elements based on drawer context
Refactored activity type handling with better type safety
Added proper invalidation of cached data when activities are updated
The changes span across components, hooks, and actions to create a more consistent and performant user experience.

The White Rabbit hops joyfully through these performance improvements, leaving a trail of cached carrots in his wake! üêáü•ï The Mad Hatter tips his hat to your optimized drawers, declaring "This caching tea party is running smoother than ever!" üé©‚ú®

----------------------------------------
Commit: 190b1ab1
Author: Robert Isaacs
Date: 2025-04-03 11:05:57
Subject: Refactor and fix various UI issues in billing tab, time period management, and admin settings: (#415)

Comment:
- Update billing datatable on the company billing tab to use an edit dialog triggered by row click or a three-dot dropdown with 'Edit' and 'Delete' options. Ensure both methods open the same dialog.
- Fix missing plan names issue in the Billing Plan Overlap Matrix on the billing plans overlaps tab by correcting data fetching logic.
- Correct conditional rendering of error messages in time period settings to provide more informative feedback for overlap errors.
- Add descriptive guidance text on the time entry settings screen to help users create common configurations like bi-monthly billing periods.
- Ensure that error messages are cleared upon successful submission in Time Period Settings form.
- Revise time period overlap logic to allow periods to start exactly when the previous one ends, using < operator instead of <=.

"After fixing all those bugs, now we're as mad as hatter hats in a tea party with time periods overlapping like a Cheshire Cat's grin on a lazy Sunday afternoon! üç∞üê∞üé© üíï‚ú®"
----------------------------------------
Commit: 24b386b3
Author: Natallia Bukhtsik
Date: 2025-04-03 10:37:02
Subject: The changes introduce a major refactoring of the activity management system, focusing on:

Comment:
Created a new ActivityDrawerProvider context to centralize activity detail viewing
Implemented ActivityDetailViewerDrawer as a unified component for all activity types
Removed the old ActivityDetailsDrawer component
Reorganized filter components into a dedicated filters directory
Added new API methods in scheduleActions and timeEntryActions for detailed data fetching
Updated all activity-related components to use the new drawer system
Improved type safety and consistency across activity interfaces
Added better error handling and loading states
Implemented a more maintainable folder structure
The changes provide a more consistent user experience while reducing code duplication and improving maintainability.

The Mad Hatter would approve of this tea party of tidy tabs and drawers! üé©‚ú® Now activities pop in and out like magic, leaving no crumbs of confusion behind! üêáüï≥Ô∏è

----------------------------------------
Commit: 01d6ebde
Author: Robert Isaacs
Date: 2025-04-02 19:37:05
Subject: feat: add company billing dashboard with usage metrics and invoice history (#413)

Comment:
- Create ClientBillingDashboard component with recent invoices, hours by service, bucket usage, and usage metrics
- Implement server actions for fetching billing report data
- Add billing dashboard tab to company details page
----------------------------------------
Commit: d6cfb54e
Author: Robert Isaacs
Date: 2025-04-02 19:27:27
Subject: refactor: improve UI components and enhance user experience (#412)

Comment:
- time approval should close drawer
- fix billing tabs
- quiet logging
----------------------------------------
Commit: 8286df87
Author: Robert Isaacs
Date: 2025-04-02 15:22:58
Subject: chore: properly configure pgbouncer auth details on startup

Comment:

----------------------------------------
Commit: d2257ff6
Author: Robert Isaacs
Date: 2025-04-02 14:48:42
Subject: Merge branch 'main' of https://github.com/Nine-Minds/alga-psa

Comment:

----------------------------------------
Commit: 707ddb3f
Author: Robert Isaacs
Date: 2025-04-02 14:48:29
Subject: build: repair docker build for pgbouncer

Comment:

----------------------------------------
Commit: 09659003
Author: NatalliaBukhtsik
Date: 2025-04-02 14:26:57
Subject: Merge pull request #411 from Nine-Minds/user_activities

Comment:
User activities
----------------------------------------
Commit: 3c087fd2
Author: Natallia Bukhtsik
Date: 2025-04-02 14:26:28
Subject: The changes introduce comprehensive filtering capabilities across all activity sections (Projects, Tickets, Schedule, Workflow Tasks) with:

Comment:
New filter dialog components for each section with consistent UI patterns
Enhanced filter logic in activity aggregation actions to support:
Search by title/description
Date range filtering
Status/priority filtering
Workflow execution filtering
Improved filter state management with reset functionality
Visual indicator for active filters with reset buttons
Type-safe filter interfaces and prop handling
Better integration between UI components and backend filtering
The changes maintain existing functionality while adding powerful new filtering capabilities through a clean, consistent interface.

The Mad Hatter tips his hat to these marvelous filtering contraptions - now every activity can find its perfect tea party! üé©‚òïÔ∏èüêá

----------------------------------------
Commit: 78028203
Author: Natallia Bukhtsik
Date: 2025-04-02 12:59:28
Subject: The changes introduce a comprehensive filtering system for ticket activities, including:

Comment:
Added a new TicketSectionFiltersDialog component with:

Search functionality
Company/contact pickers
Status dropdown
Priority checkboxes
Date range picker
Closed tickets toggle
Clear/apply filter controls
Enhanced TicketsSection with:

Filter state management
Reset filters capability
Filter button with visual indicators
Loading states for filter data
Integration with the new dialog
Expanded ActivityFilters interface with:

Company/contact IDs
Ticket number
Project/phase IDs
Work item type
Execution ID
Updated activity aggregation to support:

Company/contact filtering
Ticket number search
Text search across multiple fields
Additional filter conditions
The changes provide users with powerful filtering capabilities while maintaining existing functionality.

The Mad Hatter would approve of this tea party of filters - now we can sort our tickets as precisely as arranging a proper unbirthday! üé©‚òïÔ∏èüéÇ

----------------------------------------
Commit: bb5e75cd
Author: Robert Isaacs
Date: 2025-04-02 11:37:36
Subject: chore: fixing migration issues related to plan service changes and billing system overhaul

Comment:

----------------------------------------
Commit: 565078ff
Author: Natallia Bukhtsik
Date: 2025-04-02 11:21:20
Subject: Updated column widths in ActivitiesDataTable to use percentages for better responsiveness Removed the "Assigned To" column from the data table Fixed duplicate error message in ActivitiesDataTableSection Improved ActivityFilters component with: Better spacing and styling Enhanced date range handling with time adjustments Simplified checkbox rendering More robust filter application logic Added comprehensive filtering in activityAggregationActions including: Status filtering Priority filtering Due date range filtering Assigned user filtering

Comment:
The Mad Hatter tips his hat to these tidy table tweaks and filter fixes - now everything's just the right size for the tea party! üé©‚ú®

----------------------------------------
Commit: 612dd07a
Author: Natallia Bukhtsik
Date: 2025-04-02 10:22:18
Subject: Pagination support across the activities data table component stack:

Comment:
Added pagination props to ActivitiesDataTable component interface
Moved pagination state management to parent ActivitiesDataTableSection
Updated activity fetching logic to support pagination parameters
Modified cache keys to include pagination context
Improved loading state handling and error messages
Added useCallback for memoized data loading
Removed redundant local state in favor of props
The implementation provides a more scalable solution for large activity datasets while maintaining existing filtering capabilities.

The Mad Hatter tips his hat to these orderly paginated tea parties! üé©‚òïÔ∏èüìñ

----------------------------------------
Commit: 0d597fe3
Author: Robert Isaacs
Date: 2025-04-02 09:41:38
Subject: fix(billing): repair database migration issues with foreign keys and service selection (#410)

Comment:

----------------------------------------
Commit: a3322e6c
Author: Natallia Bukhtsik
Date: 2025-04-01 21:03:57
Subject: remove extra Filter button

Comment:

----------------------------------------
Commit: 48119638
Author: Natallia Bukhtsik
Date: 2025-04-01 19:57:12
Subject: wip

Comment:

----------------------------------------
Commit: b4deadff
Author: Robert Isaacs
Date: 2025-04-01 19:38:38
Subject: build: added a series of migration and seed updates and fixes

Comment:

----------------------------------------