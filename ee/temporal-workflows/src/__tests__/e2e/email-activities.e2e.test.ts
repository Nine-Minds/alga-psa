import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import { TestWorkflowEnvironment } from '@temporalio/testing';
import { Worker } from '@temporalio/worker';
import * as activities from '../../activities';
import { generateTemporaryPassword, sendWelcomeEmail } from '../../activities/email-activities';
import { MockEmailService } from '../../services/email-service';
import type { SendWelcomeEmailActivityInput } from '../../types/workflow-types';

// Simple test workflow for E2E testing
const testEmailWorkflow = async (input: SendWelcomeEmailActivityInput) => {
  const { sendWelcomeEmail: sendWelcomeEmailActivity } = activities;
  
  // Generate a secure password
  const temporaryPassword = generateTemporaryPassword(12);
  
  // Update input with generated password
  const updatedInput = {
    ...input,
    temporaryPassword,
  };
  
  // Send welcome email
  const emailResult = await sendWelcomeEmailActivity(updatedInput);
  
  return {
    temporaryPassword,
    emailResult,
  };
};

describe('Email Activities - E2E Tests', () => {
  let testEnv: TestWorkflowEnvironment;
  let worker: Worker;
  let mockEmailService: MockEmailService;

  beforeAll(async () => {
    // Create time-skipping test environment for fast execution
    testEnv = await TestWorkflowEnvironment.createTimeSkipping();
    
    // Create worker with all activities
    worker = await Worker.create({
      connection: testEnv.nativeConnection,
      taskQueue: 'email-e2e-test-queue',
      workflowsPath: require.resolve(__filename), // Use this file for the test workflow
      activities,
    });

    // Initialize mock email service for tracking
    mockEmailService = new MockEmailService();
  });

  afterAll(async () => {
    await worker?.shutdown();
    await testEnv?.teardown();
  });

  describe('End-to-End Email Workflow', () => {
    it('should execute complete email workflow with password generation', async () => {
      const timestamp = Date.now();
      const input: SendWelcomeEmailActivityInput = {
        tenantId: `tenant-${timestamp}`,
        tenantName: 'E2E Test Tenant',
        adminUser: {
          userId: `user-${timestamp}`,
          email: `e2e-test-${timestamp}@example.com`,
          firstName: 'E2E',
          lastName: 'Test',
        },
        temporaryPassword: '', // Will be generated by workflow
        companyName: 'E2E Test Company',
        loginUrl: 'https://e2e-test.example.com/login',
      };

      // Execute the workflow end-to-end
      const { handle } = await testEnv.client.workflow.start(testEmailWorkflow, {
        args: [input],
        taskQueue: 'email-e2e-test-queue',
        workflowId: `email-e2e-test-${timestamp}`,
      });

      const result = await handle.result();

      // Verify password was generated
      expect(result.temporaryPassword).toBeDefined();
      expect(result.temporaryPassword).toHaveLength(12);
      expect(result.temporaryPassword).toMatch(/[A-Z]/);
      expect(result.temporaryPassword).toMatch(/[a-z]/);
      expect(result.temporaryPassword).toMatch(/[2-9]/);
      expect(result.temporaryPassword).toMatch(/[!@#$%^&*]/);
      expect(result.temporaryPassword).not.toMatch(/[0O1lI]/);

      // Verify email was sent
      expect(result.emailResult.emailSent).toBe(true);
      expect(result.emailResult.messageId).toBeDefined();
      expect(result.emailResult.messageId).toMatch(/^mock-/);
      expect(result.emailResult.error).toBeUndefined();
    });

    it('should handle workflow with invalid email gracefully', async () => {
      const timestamp = Date.now();
      const input: SendWelcomeEmailActivityInput = {
        tenantId: `tenant-${timestamp}`,
        tenantName: 'Invalid Email Test',
        adminUser: {
          userId: `user-${timestamp}`,
          email: 'invalid-email-format',
          firstName: 'Invalid',
          lastName: 'Test',
        },
        temporaryPassword: '',
        companyName: 'Invalid Email Company',
      };

      const { handle } = await testEnv.client.workflow.start(testEmailWorkflow, {
        args: [input],
        taskQueue: 'email-e2e-test-queue',
        workflowId: `email-invalid-${timestamp}`,
      });

      const result = await handle.result();

      // Password should still be generated
      expect(result.temporaryPassword).toBeDefined();
      expect(result.temporaryPassword).toHaveLength(12);

      // Email should fail gracefully
      expect(result.emailResult.emailSent).toBe(false);
      expect(result.emailResult.error).toBeDefined();
      expect(result.emailResult.error).toContain('Invalid email address');
    });

    it('should execute workflow with minimal required fields', async () => {
      const timestamp = Date.now();
      const input: SendWelcomeEmailActivityInput = {
        tenantId: `tenant-${timestamp}`,
        tenantName: 'Minimal Test Tenant',
        adminUser: {
          userId: `user-${timestamp}`,
          email: `minimal-${timestamp}@example.com`,
          firstName: 'Minimal',
          lastName: 'User',
        },
        temporaryPassword: '',
        // No companyName or loginUrl - should use defaults
      };

      const { handle } = await testEnv.client.workflow.start(testEmailWorkflow, {
        args: [input],
        taskQueue: 'email-e2e-test-queue',
        workflowId: `email-minimal-${timestamp}`,
      });

      const result = await handle.result();

      // Should complete successfully with defaults
      expect(result.temporaryPassword).toBeDefined();
      expect(result.emailResult.emailSent).toBe(true);
      expect(result.emailResult.messageId).toBeDefined();
      expect(result.emailResult.error).toBeUndefined();
    });

    it('should handle multiple concurrent workflows', async () => {
      const timestamp = Date.now();
      const workflows = [];

      // Start 3 concurrent workflows
      for (let i = 0; i < 3; i++) {
        const input: SendWelcomeEmailActivityInput = {
          tenantId: `tenant-${timestamp}-${i}`,
          tenantName: `Concurrent Test Tenant ${i}`,
          adminUser: {
            userId: `user-${timestamp}-${i}`,
            email: `concurrent-${timestamp}-${i}@example.com`,
            firstName: `User${i}`,
            lastName: 'Test',
          },
          temporaryPassword: '',
          companyName: `Concurrent Company ${i}`,
        };

        const { handle } = await testEnv.client.workflow.start(testEmailWorkflow, {
          args: [input],
          taskQueue: 'email-e2e-test-queue',
          workflowId: `email-concurrent-${timestamp}-${i}`,
        });

        workflows.push(handle);
      }

      // Wait for all workflows to complete
      const results = await Promise.all(workflows.map(h => h.result()));

      // Verify all workflows completed successfully
      results.forEach((result, index) => {
        expect(result.temporaryPassword).toBeDefined();
        expect(result.temporaryPassword).toHaveLength(12);
        expect(result.emailResult.emailSent).toBe(true);
        expect(result.emailResult.messageId).toBeDefined();
      });

      // Verify all passwords are unique
      const passwords = results.map(r => r.temporaryPassword);
      const uniquePasswords = new Set(passwords);
      expect(uniquePasswords.size).toBe(3);
    });
  });

  describe('Workflow Error Handling', () => {
    it('should complete workflow even if email fails', async () => {
      const timestamp = Date.now();
      const input: SendWelcomeEmailActivityInput = {
        tenantId: `tenant-${timestamp}`,
        tenantName: 'Error Handling Test',
        adminUser: {
          userId: `user-${timestamp}`,
          email: '', // Empty email to trigger error
          firstName: 'Error',
          lastName: 'Test',
        },
        temporaryPassword: '',
      };

      const { handle } = await testEnv.client.workflow.start(testEmailWorkflow, {
        args: [input],
        taskQueue: 'email-e2e-test-queue',
        workflowId: `email-error-${timestamp}`,
      });

      // Workflow should complete without throwing
      const result = await handle.result();

      // Password generation should still work
      expect(result.temporaryPassword).toBeDefined();
      expect(result.temporaryPassword).toHaveLength(12);

      // Email should fail but not crash workflow
      expect(result.emailResult.emailSent).toBe(false);
      expect(result.emailResult.error).toBeDefined();
    });

    it('should handle activity timeouts gracefully', async () => {
      const timestamp = Date.now();
      const input: SendWelcomeEmailActivityInput = {
        tenantId: `tenant-${timestamp}`,
        tenantName: 'Timeout Test Tenant',
        adminUser: {
          userId: `user-${timestamp}`,
          email: `timeout-${timestamp}@example.com`,
          firstName: 'Timeout',
          lastName: 'Test',
        },
        temporaryPassword: '',
      };

      // Create workflow with short timeout to test timeout handling
      const { handle } = await testEnv.client.workflow.start(testEmailWorkflow, {
        args: [input],
        taskQueue: 'email-e2e-test-queue',
        workflowId: `email-timeout-${timestamp}`,
        workflowExecutionTimeout: '10s', // Short timeout for testing
      });

      // Should complete within timeout
      const result = await handle.result();
      
      expect(result.temporaryPassword).toBeDefined();
      expect(result.emailResult).toBeDefined();
    });
  });

  describe('Integration with Mock Email Service', () => {
    it('should track emails through complete workflow execution', async () => {
      const timestamp = Date.now();
      const initialEmailCount = mockEmailService.getEmailCount();
      
      const input: SendWelcomeEmailActivityInput = {
        tenantId: `tenant-${timestamp}`,
        tenantName: 'Tracking Test Tenant',
        adminUser: {
          userId: `user-${timestamp}`,
          email: `tracking-${timestamp}@example.com`,
          firstName: 'Tracking',
          lastName: 'Test',
        },
        temporaryPassword: '',
        companyName: 'Tracking Test Company',
      };

      const { handle } = await testEnv.client.workflow.start(testEmailWorkflow, {
        args: [input],
        taskQueue: 'email-e2e-test-queue',
        workflowId: `email-tracking-${timestamp}`,
      });

      const result = await handle.result();

      // Verify workflow completed
      expect(result.emailResult.emailSent).toBe(true);

      // Note: In a real E2E test, we would verify the email was tracked
      // Here we verify the service interface works correctly
      const template = mockEmailService.getEmailTemplate('tenant_welcome');
      expect(template).toBeDefined();
      expect(template?.variables).toContain('firstName');
      expect(template?.variables).toContain('temporaryPassword');
    });
  });
});

// Export the test workflow for the worker
export { testEmailWorkflow };