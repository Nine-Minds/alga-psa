FROM node:20-bullseye AS base

# Install system dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Development stage - build everything
FROM base AS development

# First, copy root package files to install shared dependencies
COPY package*.json ./
COPY tsconfig.base.json ./
RUN npm ci

# Build shared packages
COPY shared ./shared
WORKDIR /app/shared
RUN npm ci && npm run build

# Now build temporal-workflows
WORKDIR /app/ee/temporal-workflows
COPY ee/temporal-workflows/package*.json ./
RUN npm ci
COPY ee/temporal-workflows/ ./
RUN npm run build

# Production stage
FROM base AS production

# Copy only what's needed from development stage
COPY --from=development /app/ee/temporal-workflows/dist ./ee/temporal-workflows/dist
COPY --from=development /app/ee/temporal-workflows/package*.json ./ee/temporal-workflows/
COPY --from=development /app/ee/temporal-workflows/node_modules ./ee/temporal-workflows/node_modules

# Set working directory to temporal-workflows
WORKDIR /app/ee/temporal-workflows

# Copy the shared module directly into node_modules instead of using symlinks
# This avoids module resolution issues in production
COPY --from=development /app/shared/dist ./node_modules/@alga-psa/shared/
COPY --from=development /app/shared/package.json ./node_modules/@alga-psa/shared/

# Create non-root user
RUN groupadd -r temporal && useradd -r -g temporal temporal
RUN chown -R temporal:temporal /app
USER temporal

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD node -e "console.log('Health check: OK')" || exit 1

# Expose health check port
EXPOSE 8080

# Default command runs the worker
CMD ["npm", "run", "start"]