/* eslint-disable */
// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by ee/scripts/generate-chat-registry.mjs
import { ChatApiRegistryEntry } from './apiRegistry.schema';

export const chatApiRegistry: ChatApiRegistryEntry[] = [
  {
    id: 'serviceCategories.list',
    method: 'get',
    path: '/api/v1/categories/service',
    displayName: 'List Service Categories',
    summary: 'List service categories',
    description: 'Returns a paginated list of service categories within the current tenant.',
    tags: ['Service Categories'],
    rbacResource: 'service-category',
    approvalRequired: false,
    parameters: [
      {
        name: 'search',
        in: 'query',
        required: false,
        description: 'Filter categories by partial name match.',
        schema: { type: 'string' }
      },
      {
        name: 'is_active',
        in: 'query',
        required: false,
        description: 'When true, only include active categories.',
        schema: { type: 'boolean' }
      },
      {
        name: 'page',
        in: 'query',
        required: false,
        description: 'Pagination page number (default 1).',
        schema: { type: 'integer', minimum: 1 }
      },
      {
        name: 'limit',
        in: 'query',
        required: false,
        description: 'Pagination size (max 100).',
        schema: { type: 'integer', minimum: 1, maximum: 100 }
      }
    ],
    requestBodySchema: undefined,
    requestExample: undefined,
    responseBodySchema: {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              tenant: { type: 'string', format: 'uuid' },
              category_id: { type: 'string', format: 'uuid' },
              category_name: { type: 'string' },
              description: { type: ['string', 'null'] },
              display_order: { type: 'integer' },
              is_active: { type: 'boolean' },
              created_at: { type: 'string', format: 'date-time' },
              updated_at: { type: 'string', format: 'date-time' },
              created_by: { type: 'string', format: 'uuid' },
              updated_by: { type: 'string', format: 'uuid' },
              tags: { type: 'array', items: { type: 'string' } }
            },
            required: ['tenant', 'category_id', 'category_name', 'is_active', 'created_at', 'updated_at', 'created_by', 'updated_by']
          }
        },
        pagination: {
          type: 'object',
          properties: {
            page: { type: 'integer' },
            limit: { type: 'integer' },
            total: { type: 'integer' },
            totalPages: { type: 'integer' },
            hasNext: { type: 'boolean' },
            hasPrev: { type: 'boolean' }
          }
        },
        meta: { type: 'object' }
      }
    },
    playbooks: ['service-categories/list-basic'],
    examples: [
      {
        name: 'List active categories',
        request: {
          query: {
            is_active: true
          }
        }
      }
    ]
  },
  {
    id: 'serviceCategories.create',
    method: 'post',
    path: '/api/v1/categories/service',
    displayName: 'Create Service Category',
    summary: 'Create service category',
    description: 'Creates a new service category for the tenant.',
    tags: ['Service Categories'],
    rbacResource: 'service-category',
    approvalRequired: true,
    parameters: [],
    requestBodySchema: {
      type: 'object',
      properties: {
        category_name: { type: 'string', minLength: 1, maxLength: 255 },
        description: { type: ['string', 'null'], maxLength: 1000 },
        is_active: { type: 'boolean' }
      },
      required: ['category_name']
    },
    requestExample: {
      category_name: 'Remote Support',
      description: 'Standard remote troubleshooting',
      is_active: true
    },
    responseBodySchema: {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          properties: {
            tenant: { type: 'string', format: 'uuid' },
            category_id: { type: 'string', format: 'uuid' },
            category_name: { type: 'string' },
            description: { type: ['string', 'null'] },
            display_order: { type: 'integer' },
            is_active: { type: 'boolean' },
            created_at: { type: 'string', format: 'date-time' },
            updated_at: { type: 'string', format: 'date-time' },
            created_by: { type: 'string', format: 'uuid' },
            updated_by: { type: 'string', format: 'uuid' },
            tags: { type: 'array', items: { type: 'string' } }
          }
        }
      }
    },
    playbooks: ['service-categories/create-basic'],
    examples: [
      {
        name: 'Create a new service category',
        request: {
          body: {
            category_name: 'Remote Support',
            description: 'Standard remote troubleshooting',
            is_active: true
          }
        }
      }
    ]
  },
  {
    id: 'storage.list',
    method: 'get',
    path: '/api/v1/storage/namespaces/{namespace}/records',
    displayName: 'List Storage Records',
    summary: 'List records in a namespace',
    description: 'Returns records for the given namespace with optional prefix filtering.',
    tags: ['Extension Storage'],
    rbacResource: 'storage',
    approvalRequired: false,
    parameters: [
      {
        name: 'namespace',
        in: 'path',
        required: true,
        description: 'Namespace identifier.',
        schema: { type: 'string' }
      },
      {
        name: 'prefix',
        in: 'query',
        required: false,
        description: 'Optional key prefix filter.',
        schema: { type: 'string' }
      },
      {
        name: 'limit',
        in: 'query',
        required: false,
        description: 'Maximum number of records to return.',
        schema: { type: 'integer', minimum: 1, maximum: 100 }
      },
      {
        name: 'cursor',
        in: 'query',
        required: false,
        description: 'Pagination cursor.',
        schema: { type: 'string' }
      }
    ],
    requestBodySchema: undefined,
    requestExample: undefined,
    responseBodySchema: {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              namespace: { type: 'string' },
              key: { type: 'string' },
              value: { type: ['string', 'object', 'array', 'number', 'boolean', 'null'] },
              contentType: { type: 'string' },
              revision: { type: 'integer' },
              createdAt: { type: 'string', format: 'date-time' },
              updatedAt: { type: 'string', format: 'date-time' }
            },
            required: ['namespace', 'key', 'value', 'revision']
          }
        },
        nextCursor: { type: ['string', 'null'] }
      }
    },
    playbooks: ['storage/list-namespace'],
    examples: [
      {
        name: 'List records with prefix filter',
        request: {
          params: {
            namespace: 'integrations:zendesk'
          },
          query: {
            prefix: 'tickets/'
          }
        }
      }
    ]
  },
  {
    id: 'storage.bulkUpsert',
    method: 'post',
    path: '/api/v1/storage/namespaces/{namespace}/records',
    displayName: 'Upsert Storage Records',
    summary: 'Bulk insert or update records',
    description: 'Creates or updates multiple records within the provided namespace.',
    tags: ['Extension Storage'],
    rbacResource: 'storage',
    approvalRequired: true,
    parameters: [
      {
        name: 'namespace',
        in: 'path',
        required: true,
        description: 'Namespace identifier.',
        schema: { type: 'string' }
      }
    ],
    requestBodySchema: {
      type: 'object',
      properties: {
        records: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              key: { type: 'string' },
              value: {},
              contentType: { type: 'string' },
              revision: { type: 'integer' }
            },
            required: ['key', 'value']
          }
        }
      },
      required: ['records']
    },
    requestExample: {
      records: [
        {
          key: 'webhook/url',
          value: 'https://hooks.example.com/inbound',
          contentType: 'text/plain'
        }
      ]
    },
    responseBodySchema: {
      type: 'object',
      properties: {
        updated: { type: 'integer' },
        inserted: { type: 'integer' }
      }
    },
    playbooks: ['storage/bulk-upsert-records'],
    examples: [
      {
        name: 'Bulk upsert configuration values',
        request: {
          params: {
            namespace: 'automation:workflow'
          },
          body: {
            records: [
              {
                key: 'webhook/url',
                value: 'https://hooks.example.com/inbound',
                contentType: 'text/plain'
              }
            ]
          }
        }
      }
    ]
  },
  {
    id: 'storage.get',
    method: 'get',
    path: '/api/v1/storage/namespaces/{namespace}/records/{key}',
    displayName: 'Get Storage Record',
    summary: 'Get a record by key',
    description: 'Fetches a single storage record by namespace and key.',
    tags: ['Extension Storage'],
    rbacResource: 'storage',
    approvalRequired: false,
    parameters: [
      {
        name: 'namespace',
        in: 'path',
        required: true,
        description: 'Namespace identifier.',
        schema: { type: 'string' }
      },
      {
        name: 'key',
        in: 'path',
        required: true,
        description: 'Record key.',
        schema: { type: 'string' }
      },
      {
        name: 'if-revision-match',
        in: 'header',
        required: false,
        description: 'Optional optimistic locking header.',
        schema: { type: 'string' }
      }
    ],
    requestBodySchema: undefined,
    requestExample: undefined,
    responseBodySchema: {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          properties: {
            namespace: { type: 'string' },
            key: { type: 'string' },
            value: {},
            contentType: { type: 'string' },
            revision: { type: 'integer' },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' }
          },
          required: ['namespace', 'key', 'value', 'revision']
        }
      }
    },
    playbooks: ['storage/get-record'],
    examples: [
      {
        name: 'Retrieve a workflow record',
        request: {
          params: {
            namespace: 'automation:workflow',
            key: 'webhook/url'
          }
        }
      }
    ]
  },
  {
    id: 'storage.put',
    method: 'put',
    path: '/api/v1/storage/namespaces/{namespace}/records/{key}',
    displayName: 'Put Storage Record',
    summary: 'Create or update a record by key',
    description: 'Creates or updates a storage record and returns the latest revision.',
    tags: ['Extension Storage'],
    rbacResource: 'storage',
    approvalRequired: true,
    parameters: [
      {
        name: 'namespace',
        in: 'path',
        required: true,
        description: 'Namespace identifier.',
        schema: { type: 'string' }
      },
      {
        name: 'key',
        in: 'path',
        required: true,
        description: 'Record key.',
        schema: { type: 'string' }
      }
    ],
    requestBodySchema: {
      type: 'object',
      properties: {
        value: {},
        contentType: { type: 'string' },
        revision: { type: 'integer' }
      },
      required: ['value']
    },
    requestExample: {
      value: 'https://hooks.example.com/inbound',
      contentType: 'text/plain'
    },
    responseBodySchema: {
      type: 'object',
      properties: {
        data: {
          type: 'object',
          properties: {
            namespace: { type: 'string' },
            key: { type: 'string' },
            value: {},
            contentType: { type: 'string' },
            revision: { type: 'integer' },
            createdAt: { type: 'string', format: 'date-time' },
            updatedAt: { type: 'string', format: 'date-time' }
          },
          required: ['namespace', 'key', 'value', 'revision']
        }
      }
    },
    playbooks: ['storage/put-record'],
    examples: [
      {
        name: 'Set workflow webhook URL',
        request: {
          params: {
            namespace: 'automation:workflow',
            key: 'webhook/url'
          },
          body: {
            value: 'https://hooks.example.com/inbound',
            contentType: 'text/plain'
          }
        }
      }
    ]
  }
];

export default chatApiRegistry;
