# Start with a base image and install system dependencies
FROM node:alpine AS base
RUN apk add \
    graphicsmagick \
    imagemagick \
    ghostscript \
    postgresql-client \
    redis \
    curl \
    nano \
    bash
WORKDIR /app

# Stage for installing dependencies (cache-friendly)
FROM base AS deps
# Copy package files for both root and server parts of the project
COPY package.json package-lock.json ./
COPY server/package.json ./server/
COPY shared/package.json ./shared/
COPY tsconfig.base.json ./
COPY server/src/invoice-templates/assemblyscript ./server/src/invoice-templates/assemblyscript


# Builder stage for compiling the application
FROM deps AS builder
# Copy all project files and build the server

WORKDIR /app

COPY . .

# Remove ee directory for CE build to ensure stub implementations are used
RUN rm -rf /app/ee

RUN npm install --include=optional sharp --workspace=shared --workspace=server
RUN npm install --workspace=shared --workspace=server

# Build shared module first
WORKDIR /app/shared
RUN npm run build

WORKDIR /app/server
RUN npm install

# Increase Node.js memory limit for the build process
ENV NODE_OPTIONS="--max-old-space-size=4096"

RUN npm run build

WORKDIR /app/server

# Create secrets directory and populate with secure placeholder values
RUN mkdir -p /app/secrets && \
    echo "secure-admin-password-placeholder" > /app/secrets/postgres_password && \
    echo "secure-app-password-placeholder" > /app/secrets/db_password_server && \
    echo "secure-hocuspocus-password-placeholder" > /app/secrets/db_password_hocuspocus && \
    echo "secure-redis-password-placeholder" > /app/secrets/redis_password && \
    echo "secure-32char-auth-key-placeholder-xxxxx" > /app/secrets/alga_auth_key && \
    echo "secure-32char-crypto-key-placeholder-xxxx" > /app/secrets/crypto_key && \
    echo "secure-32char-token-key-placeholder-xxxx" > /app/secrets/token_secret_key && \
    echo "secure-32char-nextauth-key-placeholder-xx" > /app/secrets/nextauth_secret && \
    echo "secure-email-password-placeholder" > /app/secrets/email_password && \
    echo "secure-oauth-client-id-placeholder" > /app/secrets/google_oauth_client_id && \
    echo "secure-oauth-client-secret-placeholder" > /app/secrets/google_oauth_client_secret && \
    echo "secure-ee-gmail-client-secret-placeholder" > /app/secrets/EE_GMAIL_CLIENT_SECRET && \
    echo "secure-ee-microsoft-client-secret-placeholder" > /app/secrets/EE_MICROSOFT_CLIENT_SECRET && \
    chmod 600 /app/secrets/*
# Copy example environment file
COPY .env.example /app/.env   
COPY .env.example /app/server/.env  

# Final production image with minimal runtime artifacts
FROM node:alpine
RUN apk add --no-cache bash \
    postgresql-client \
    redis \
    graphicsmagick \
    imagemagick \
    ghostscript \
    curl \
    nano \
    bash

WORKDIR /app
COPY tsconfig.base.json ./
COPY server/setup /app/server/setup
COPY .env.example /app/.env   
COPY .env.example /app/server/.env  

# Copy built application and node_modules from earlier stages -- minimalist approach
COPY --from=builder /app/shared ./shared
COPY --from=builder /app/server/.next ./server/.next
COPY --from=builder /app/server/public ./server/public
COPY --from=builder /app/server/next.config.mjs ./server/
COPY --from=builder /app/server/package.json ./server/
COPY --from=builder /app/package.json ./
COPY --from=builder /app/package-lock.json ./
COPY --from=builder /app/server/knexfile.cjs ./server/
COPY --from=builder /app/server/tsconfig.json ./server/
COPY --from=builder /app/server/index.ts ./server/
COPY --from=builder /app/server/migrations/ ./server/migrations/
COPY --from=builder /app/server/seeds/ ./server/seeds/
COPY --from=builder /app/server/src/ ./server/src/
COPY --from=builder /app/node_modules ./node_modules

RUN npm install -g tsx

COPY server/entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

EXPOSE 3000

# Environment configuration
ENV NODE_ENV=production

# Secret provider configuration
# Default configuration for composite secret system
# Can be overridden in docker-compose or deployment environments
ENV SECRET_READ_CHAIN="env,filesystem"
ENV SECRET_WRITE_PROVIDER="filesystem"

ENTRYPOINT ["/app/entrypoint.sh"]
