FROM node:alpine AS server

# Build argument to control edition
ARG INCLUDE_EE=false

# Install required system dependencies (rarely changes)
RUN apk add --no-cache \
    graphicsmagick \
    imagemagick \
    ghostscript \
    postgresql-client \
    redis \
    curl \
    bash

WORKDIR /app

# Copy only package files first for npm install
COPY package.json package-lock.json ./
COPY server/package.json ./server/
COPY ee/server/package.json ./ee/server/
COPY scripts/ ./scripts/

# Install dependencies (cached unless package files change)

COPY server/src/invoice-templates/assemblyscript ./server/src/invoice-templates/assemblyscript

RUN npm install && \
    cd server/src/invoice-templates/assemblyscript && \
    npm install && \
    cd /app

COPY tsconfig.base.json ./

WORKDIR /app
COPY shared/ ./shared/
COPY services/ ./services/

# Copy EE features conditionally
COPY ee/ ./ee/
# Handle edition-specific setup
RUN if [ "$INCLUDE_EE" = "true" ]; then \
        echo "Including EE features..."; \
        ./scripts/build-enterprise.sh; \
    else \
        echo "Building CE edition - excluding EE features..."; \
        rm -rf ./ee; \
    fi

WORKDIR /app/server

# Copy server source code
COPY server/ ./
COPY scripts/ ./scripts/

# Clean any existing build artifacts and build the Next.js application with conditional env var
RUN rm -rf .next && \
    if [ "$INCLUDE_EE" = "true" ]; then \
        npm run build:enterprise; \
    else \
        npm run build; \
    fi

# Copy and make entrypoint executable (rarely changes)
COPY server/entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

EXPOSE 3000

# Environment configuration
ENV NODE_ENV=production

# Secret provider configuration
# Default configuration for composite secret system
# Can be overridden in docker-compose or deployment environments
ENV SECRET_READ_CHAIN="env,filesystem"
ENV SECRET_WRITE_PROVIDER="filesystem"

ENTRYPOINT ["/app/entrypoint.sh"]

